[{"C:\\projects\\worksheet-creator\\front-end\\src\\index.js":"1","C:\\projects\\worksheet-creator\\front-end\\src\\reportWebVitals.js":"2","C:\\projects\\worksheet-creator\\front-end\\src\\App.js":"3","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\ConceptSelection.js":"4","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\DisplayAssignment.js":"5","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\UserWorksheets.js":"6","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\FinalSelections.js":"7","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\ConceptCustomization.js":"8","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\general.js":"9","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\functions\\createWorksheet.js":"10","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\DisplayUserSelection.js":"11","C:\\projects\\worksheet-creator\\front-end\\src\\general\\pages\\Home.js":"12","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\context\\auth-context.js":"13","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\hooks\\http-hook.js":"14","C:\\projects\\worksheet-creator\\front-end\\src\\general\\pages\\Schools.js":"15","C:\\projects\\worksheet-creator\\front-end\\src\\general\\pages\\Parents.js":"16","C:\\projects\\worksheet-creator\\front-end\\src\\general\\pages\\Teachers.js":"17","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\Navigation\\MainNavigation.js":"18","C:\\projects\\worksheet-creator\\front-end\\src\\user\\pages\\Authenticate.js":"19","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\input.js":"20","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\WorksheetList.js":"21","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\ConceptGeneral.js":"22","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\functions\\conceptCheck.js":"23","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\functions\\createWorksheetcss.js":"24","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\LoadingSpinner.js":"25","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\ErrorModal.js":"26","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\FormElements\\Input.js":"27","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\Backdrop.js":"28","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\util\\validators.js":"29","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\Navigation\\MainHeader.js":"30","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\Navigation\\NavLinks.js":"31","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\Navigation\\SideDrawer.js":"32","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\hooks\\form-hook.js":"33","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\FormElements\\Button.js":"34","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\FormElements\\ImageUpload.js":"35","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\Card.js":"36","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\WorksheetItem.js":"37","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\order-of-ops.js":"38","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\add-sub.js":"39","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\add-sub-dec.js":"40","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\multiply-dec.js":"41","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\tables.js":"42","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\add-sub-fract.js":"43","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\divide-fract.js":"44","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\multiply-fract.js":"45","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\divide-dec.js":"46","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\divide.js":"47","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\multiply.js":"48","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\area-perimeter.js":"49","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\Modal.js":"50","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\Avatar.js":"51","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\Table.js":"52","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\WorksheetData.js":"53","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\vertical-align.js":"54","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\fract-shared.js":"55"},{"size":612,"mtime":1616360276948,"results":"56","hashOfConfig":"57"},{"size":375,"mtime":1616360276948,"results":"58","hashOfConfig":"57"},{"size":13607,"mtime":1616377077737,"results":"59","hashOfConfig":"57"},{"size":2951,"mtime":1616360278587,"results":"60","hashOfConfig":"57"},{"size":1682,"mtime":1616360545772,"results":"61","hashOfConfig":"57"},{"size":2021,"mtime":1616360278593,"results":"62","hashOfConfig":"57"},{"size":3825,"mtime":1616360278591,"results":"63","hashOfConfig":"57"},{"size":17491,"mtime":1616360278584,"results":"64","hashOfConfig":"57"},{"size":10847,"mtime":1616360278604,"results":"65","hashOfConfig":"57"},{"size":8447,"mtime":1616375418665,"results":"66","hashOfConfig":"57"},{"size":2106,"mtime":1616360278572,"results":"67","hashOfConfig":"57"},{"size":2859,"mtime":1616360276943,"results":"68","hashOfConfig":"57"},{"size":203,"mtime":1616360276966,"results":"69","hashOfConfig":"57"},{"size":1390,"mtime":1616360276966,"results":"70","hashOfConfig":"57"},{"size":3394,"mtime":1616360276943,"results":"71","hashOfConfig":"57"},{"size":3095,"mtime":1616360276943,"results":"72","hashOfConfig":"57"},{"size":3258,"mtime":1616360276943,"results":"73","hashOfConfig":"57"},{"size":1380,"mtime":1616360276956,"results":"74","hashOfConfig":"57"},{"size":5308,"mtime":1616360276968,"results":"75","hashOfConfig":"57"},{"size":973,"mtime":1616360278578,"results":"76","hashOfConfig":"57"},{"size":1406,"mtime":1616360278578,"results":"77","hashOfConfig":"57"},{"size":2228,"mtime":1616360278570,"results":"78","hashOfConfig":"57"},{"size":2186,"mtime":1616360278580,"results":"79","hashOfConfig":"57"},{"size":1174,"mtime":1616360278581,"results":"80","hashOfConfig":"57"},{"size":286,"mtime":1616360276964,"results":"81","hashOfConfig":"57"},{"size":407,"mtime":1616360276962,"results":"82","hashOfConfig":"57"},{"size":2481,"mtime":1616360276954,"results":"83","hashOfConfig":"57"},{"size":302,"mtime":1616360276962,"results":"84","hashOfConfig":"57"},{"size":1710,"mtime":1616360276967,"results":"85","hashOfConfig":"57"},{"size":287,"mtime":1616360276955,"results":"86","hashOfConfig":"57"},{"size":2678,"mtime":1616360276959,"results":"87","hashOfConfig":"57"},{"size":609,"mtime":1616360276960,"results":"88","hashOfConfig":"57"},{"size":1545,"mtime":1616360276966,"results":"89","hashOfConfig":"57"},{"size":1060,"mtime":1616360276951,"results":"90","hashOfConfig":"57"},{"size":1794,"mtime":1616360276951,"results":"91","hashOfConfig":"57"},{"size":230,"mtime":1616360276962,"results":"92","hashOfConfig":"57"},{"size":3032,"mtime":1616360278576,"results":"93","hashOfConfig":"57"},{"size":19492,"mtime":1616360278610,"results":"94","hashOfConfig":"57"},{"size":28119,"mtime":1616360278597,"results":"95","hashOfConfig":"57"},{"size":7139,"mtime":1616360278595,"results":"96","hashOfConfig":"57"},{"size":14965,"mtime":1616360278608,"results":"97","hashOfConfig":"57"},{"size":20569,"mtime":1616376155269,"results":"98","hashOfConfig":"57"},{"size":4773,"mtime":1616360278596,"results":"99","hashOfConfig":"57"},{"size":2025,"mtime":1616360278602,"results":"100","hashOfConfig":"57"},{"size":1724,"mtime":1616360278609,"results":"101","hashOfConfig":"57"},{"size":17705,"mtime":1616360278600,"results":"102","hashOfConfig":"57"},{"size":12310,"mtime":1616360278603,"results":"103","hashOfConfig":"57"},{"size":14561,"mtime":1616360278609,"results":"104","hashOfConfig":"57"},{"size":13345,"mtime":1616360278598,"results":"105","hashOfConfig":"57"},{"size":1330,"mtime":1616360276965,"results":"106","hashOfConfig":"57"},{"size":349,"mtime":1616360276961,"results":"107","hashOfConfig":"57"},{"size":1205,"mtime":1616377404701,"results":"108","hashOfConfig":"57"},{"size":4512,"mtime":1616360278575,"results":"109","hashOfConfig":"57"},{"size":4549,"mtime":1616360278613,"results":"110","hashOfConfig":"57"},{"size":4739,"mtime":1616360278604,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"ygcidw",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"114"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"114"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"114"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"114"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"114"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"114"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"114"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"114"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"114"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"114"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"114"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"114"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"114"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"114"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"114"},"C:\\projects\\worksheet-creator\\front-end\\src\\index.js",[],["245","246"],"C:\\projects\\worksheet-creator\\front-end\\src\\reportWebVitals.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\App.js",["247","248","249","250","251","252","253","254","255","256","257","258"],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\ConceptSelection.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\DisplayAssignment.js",["259","260","261","262","263","264","265"]," import {Link} from \"react-router-dom\";\r\nimport { React, useEffect, useRef, useContext } from \"react\";\r\nimport {AuthContext} from '../../shared/context/auth-context'\r\nimport {useHttpClient} from '../../shared/hooks/http-hook'\r\nimport './DisplayAssignment.css'\r\nimport './CustomizeGeneral.css'\r\n\r\n\r\n\r\nconst DisplayAssignment = (props) => {\r\n    const auth = useContext(AuthContext);\r\n    const initialRender = useRef(true);\r\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\r\n    useEffect(()=> {\r\n        if (initialRender.current) {\r\n            initialRender.current = false;\r\n        } else {\r\n            props.handlePDFViewerTrigger('copy')\r\n            console.log(props.createdWorksheetState)\r\n        }\r\n\r\n    }, [props.createdWorksheetState])\r\n    useEffect(()=> {\r\n        if (initialRender.current) {\r\n            initialRender.current = false;\r\n        } else {\r\n            props.handlePDFViewerTrigger('new')\r\n\r\n        }\r\n    }, [props.userSelection])\r\n    return (\r\n        <div className=\"display-assignment-container\"> \r\n            \r\n            <Link className=\"general-button-link\" to=\"/concept-selection\">\r\n                 <button className='general-button'\r\n                    onClick= {props.handleClearSelections}>\r\n                        Make another assignment\r\n                </button>\r\n\r\n            </Link>\r\n            <Link className=\"general-button-link\" to= '/display-assignment'>\r\n                  <button className='general-button' onClick={props.handlePDFViewerTrigger}>Make another version of this assignment</button>\r\n            </Link>\r\n\r\n\r\n            \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default DisplayAssignment","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\UserWorksheets.js",["266"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport WorksheetList from \"../components/WorksheetList\";\r\n\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport './UserWorksheets.css'\r\nimport './CustomizeGeneral.css'\r\n\r\nconst UserWorksheets = (props) => {\r\n  const userId = useParams().userId;\r\n  const [loadedWorksheets, setLoadedWorksheets] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  useEffect(() => {\r\n    props.handleClearSelections()\r\n    const fetchWorksheets = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `http://localhost:5000/api/worksheets/${userId}`\r\n        );\r\n        setLoadedWorksheets(responseData.worksheets);\r\n      } catch (err) {}\r\n    };\r\n    fetchWorksheets();\r\n  }, [sendRequest, userId]);\r\n  const worksheetDeletedHandler = (deletedWorksheetId) => {\r\n    console.log(deletedWorksheetId)\r\n    setLoadedWorksheets((prevWorksheets) =>\r\n      prevWorksheets.filter((worksheet) => worksheet.id !== deletedWorksheetId)\r\n    );\r\n  };\r\n  // const loadedPlaces = DUMMY_PLACES.filter(place => place.creator===userId)\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedWorksheets && (\r\n        <div className=\"main-container userworksheets-container\">\r\n        <h3 className=\"userworksheets-title\">My Worksheet Collection</h3>\r\n        <WorksheetList\r\n          items={loadedWorksheets}\r\n          worksheetDeletedHandler={worksheetDeletedHandler}\r\n          handleDuplicate={props.handleDuplicate}\r\n \r\n        />\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserWorksheets;\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\FinalSelections.js",["267"],"import { Link } from \"react-router-dom\";\r\nimport { React } from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport BackArrow from '../../app-files/images/previous-button.svg'\r\n\r\nimport Input from \"../components/input.js\";\r\nimport DisplayUserSelection from \"../components/DisplayUserSelection\";\r\nimport \"./FinalSelections.css\";\r\nimport \"./CustomizeGeneral.css\";\r\n\r\nconst FinalSelections = (props) => {\r\n  return (\r\n    <div className=\"main-container final-selection-container \">\r\n      <div className=\"concept-back-arrow\">\r\n        <Link to=\"/concept-selection\">\r\n          <button onClick={props.handleClearInput}>\r\n            <img className=\"back-arrow\" src={BackArrow} alt=\"back\"></img>\r\n          </button>\r\n        </Link>\r\n        <h1>General Customization</h1>\r\n      </div>\r\n      <div className=\"selection-container\">\r\n        <TextField\r\n          variant=\"filled\"\r\n          id=\"filled-basic\"\r\n          label={<span className=\"\">Document Title</span>}\r\n          name=\"docTitle\"\r\n          type=\"text\"\r\n          value={props.generalSelection.docTitle}\r\n          onChange={props.handleInput}\r\n          placeholder=\"\"\r\n          required\r\n          className=\"doc-title-input\"\r\n          min=\"1\"\r\n          max=\"50\"\r\n        />\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              name=\"mixed\"\r\n              value={props.generalSelection.mixed}\r\n              // checked={!!props.generalSelection['order']}\r\n              onChange={props.handleInput}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          className=\"checkbox-space\"\r\n          label={<span className=\"checkbox\"> Mix Up Concepts</span>}\r\n        />{\" \"}\r\n        <br />\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              name=\"docStyle\"\r\n              value={props.generalSelection.docStyle}\r\n              onChange={props.handleInput}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label={\r\n            <span className=\"checkbox\"> Columns (Fit more on a page)</span>\r\n          }\r\n        />{\" \"}\r\n        <br />\r\n      </div>\r\n      <div>\r\n        <Link to=\"/display-assignment\" className=\"general-button-link\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"general-button\"\r\n            onClick={props.handlePDFViewerTrigger}\r\n          >\r\n            Create your assignment\r\n          </button>\r\n        </Link>\r\n      </div>\r\n      <div className=\"user-selection\">\r\n        {props.userSelection.length > 0 ? (\r\n          <DisplayUserSelection\r\n            handleDeleteConcept={props.handleDeleteConcept}\r\n            userSelection={props.userSelection}\r\n          />\r\n        ) : null}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinalSelections;\r\n\r\n\r\n  /* <label className=\"final-title\" htmlFor=\"level\">\r\n        Document Title:\r\n      </label> */\r\n\r\n  /* <input\r\n        type=\"text\"\r\n        className=\"doc-title-input\"\r\n        id=\"docTitle\"\r\n        value={props.generalSelection.docTitle}\r\n        // onChange={props.handleInputTitle}\r\n        onChange={props.handleInput}\r\n        name=\"docTitle\"\r\n      /> */\r\n\r\n  /* <Input\r\n        label=\"Mix up questions:\"\r\n        name=\"mixed\"\r\n        type=\"checkbox\"\r\n        value={props.generalSelection.mixed}\r\n        // onChange={props.handleOrder}\r\n        onChange={props.handleInput}\r\n        className=\"input final-title\"\r\n      /> */\r\n\r\n  /* <Input\r\n        label=\"Columns:\"\r\n        name=\"docStyle\"\r\n        type=\"checkbox\"\r\n        value={props.generalSelection.docStyle}\r\n        // onChange={props.handleDocStyle}\r\n        onChange={props.handleInput}\r\n        className=\"input final-title\"\r\n      /> */\r\n\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\pages\\ConceptCustomization.js",["268","269","270","271","272","273","274","275"],"import { React, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ConceptGeneral from \"../components/ConceptGeneral\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport BackArrow from '../../app-files/images/previous-button.svg'\r\nimport uuid from 'react-uuid'\r\nimport Input from '../../shared/components/FormElements/Input'\r\nimport DisplayUserSelection from '../components/DisplayUserSelection'\r\nimport './ConceptCustomization.css'\r\nimport './CustomizeGeneral.css'\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\n\r\n\r\nconst ConceptCustomization = (props) => {\r\n  const [errorState, setErrorState] = useState(true)\r\n\r\n  const conceptSpecify = (props, name, specifyTitle, specifyArray) => {\r\n    let error= true\r\n\r\n    const specifyFor = (props, name, arr) => {\r\n\r\n      var newArray = [];\r\n      let arrayList = []\r\n      for (var i = 0; i < arr.length; i++) {\r\n        newArray.push(\r\n          <div>\r\n            <FormControlLabel key={uuid()} control= {\r\n              // <Input element='checkbox' name={name} value={arr[i]} checked={!!props.inputState[arr[i]]} onChange={props.handleInput} color='primary'validators={[VALIDATOR_REQUIRE()]}\r\n              // errorText=\"Please enter a valid email.\"/>\r\n            <Checkbox name={name} value={arr[i]} checked={!!props.inputState[arr[i]]} onChange={props.handleInput}color='primary'/>\r\n            } label={<span className=\"checkbox\">{arr[i]}</span>} /> <br />\r\n            {/* value={arr[i]} */}\r\n          </div>\r\n        );\r\n      }\r\n      for(var item in arr) {\r\n        if (props.inputState[arr[item]]===true) {\r\n          error = false\r\n          // setErrorState(false)\r\n          console.log(error)\r\n        }\r\n      }\r\n      return newArray;\r\n    };\r\n\r\n\r\n\r\n    console.log(props.inputState)\r\n    console.log(error)\r\n    // console.log(errorState)\r\n    return (\r\n      <div className='radio-title-button-container'>\r\n        <span className='radio-title'>{specifyTitle}:</span><br />\r\n          <div className=\"radio-button\">\r\n          <FormControl required error={error} component=\"fieldset\">\r\n            <FormGroup >\r\n             {/* aria-label={name} name={name} valueSelected={props.value} onChange={props.handleInput} */}\r\n            {/* <FormLabel component=\"legend\" className='radio-title'>{specifyTitle}</FormLabel> */}\r\n              {specifyFor(props, name, specifyArray)}\r\n            </FormGroup>\r\n            {error ? <FormHelperText>Please select at least one</FormHelperText>:null}\r\n            \r\n          {/* //   :null\r\n          // } */}\r\n        </FormControl>\r\n          </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const conceptProbStyle = (props, name, probTitle, probStyleArray) => {\r\n    return (\r\n      <div className='radio-title-button-container'>\r\n        <span className='radio-title'>{probTitle}:</span><br />\r\n        <FormControl component=\"fieldset\">\r\n          <RadioGroup  aria-label={name} name= {name} value={props.value} onChange={props.handleInput}>\r\n          {/* <FormLabel component=\"legend\">{levelTitle}</FormLabel> */}\r\n              <FormControlLabel key={uuid()} color= 'secondary' value='Vertical'  control= {<Radio color='primary'/>} label={probStyleArray[0]} />\r\n              <FormControlLabel key={uuid()} value='Horizontal' control= {<Radio color='primary'/>} label= {probStyleArray[1]}  />\r\n            </RadioGroup>\r\n        </FormControl> \r\n      </div>\r\n    );\r\n  };\r\n  const conceptLevel = (props, levelTitle, levelArray) => {\r\n    return (\r\n      <div className='radio-title-button-container'>\r\n        <span className='radio-title'>{levelTitle}:</span><br />\r\n        <FormControl component=\"fieldset\">\r\n          <RadioGroup  aria-label=\"level\" name=\"level\" valueSelected={props.value} onChange={props.handleInput}>\r\n          {/* <FormLabel component=\"legend\">{levelTitle}</FormLabel> */}\r\n              <FormControlLabel key={uuid()} color= 'secondary' value='1'  control= {<Radio color='primary'/>} label={'1: '+levelArray[0]} />\r\n              <FormControlLabel key={uuid()} value='2' control= {<Radio color='primary'/>} label={'2: '+levelArray[1]}  />\r\n              <FormControlLabel key={uuid()} value='3' control= {<Radio color='primary'/>} label={'3: '+levelArray[2]}  />\r\n            </RadioGroup>\r\n        </FormControl> \r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const customizeContainer = (props, title, func1, func2, func3, func4, func5) =>{\r\n      return (\r\n          <div className=\"main-container concept-customization-container\">\r\n  \r\n          <div className='concept-back-arrow'>\r\n              <Link to='/concept-selection'>\r\n              <button onClick= {props.handleClearInput}>\r\n                <img className=\"back-arrow\" src={BackArrow} alt=\"back\"></img>\r\n              </button>\r\n              </Link>\r\n              <p className='concept-title'>{title}</p>\r\n          </div>\r\n          <div className='radio-button-container'>\r\n              {func1}\r\n              {func2}\r\n              {func3}\r\n              {func4}\r\n              {func5}\r\n          </div>\r\n          <ConceptGeneral\r\n            inputState={props.inputState}\r\n            handleInput={props.handleInput}\r\n            handleAddConcept={props.handleAddConcept}\r\n            // errorState = {errorState}\r\n          />\r\n          <div className=\"user-selection\">\r\n            {props.userSelection.length > 0 ? (\r\n              <DisplayUserSelection\r\n                handleDeleteConcept={props.handleDeleteConcept}\r\n                userSelection={props.userSelection}\r\n              />\r\n            ) : null}</div>\r\n          </div>\r\n      )\r\n  }\r\n  // useEffect(()=> {\r\n  //   setErrorState(error)\r\n  // }, [error])\r\n\r\n  if (props.inputState['Algorithm']){\r\n    var algorithm = conceptProbStyle(props, \"probStyle\", \"Algorithm Style\", [\r\n      \"Vertical\",\"Horizontal\", ])        \r\n  } if (props.inputState['Application']){\r\n    var application = conceptSpecify(props, \"specify\", \"Application Level\", [\r\n      \"1: One step\", \"2: Multi-step\", ])   \r\n  }\r\n  if (props.inputState.concept === \"Adding Whole Numbers\") {    \r\n    return (\r\n        customizeContainer(props,'Adding Whole Numbers', \r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"1 digit numbers\", \"2 digit numbers\", \"3 digit numbers\",\r\n                \"4 digit numbers\", \"5 digit numbers\", \"6 digit numbers\", \r\n                '7 digit numbers']),\r\n            conceptSpecify(props, \"specify\", \"Problem Type\", [\r\n              \"Algorithm\",\"Application\", ]),   \r\n            <div className='dynamic-customize-container'>\r\n              {algorithm} {application}    \r\n            </div>\r\n                  )\r\n    );\r\n  } else if (props.inputState.concept === \"Subtracting Whole Numbers\") {\r\n    return (\r\n        customizeContainer(props,'Subtracting Whole Numbers',\r\n            conceptSpecify(props, \"specify\", \"Include numbers\", [\r\n              \"1 digit numbers\", \"2 digit numbers\",\"3 digit numbers\",\r\n              \"4 digit numbers\", \"5 digit numbers\",\"6 digit numbers\", \r\n              '7 digit numbers',]),\r\n            conceptSpecify(props, \"specify\", \"Problem Type\", [\r\n              \"Algorithm\",\"Application\", ]),\r\n            <div className='dynamic-customize-container'>\r\n              {algorithm} {application}    \r\n            </div>\r\n        )\r\n    );\r\n  } else if (props.inputState.concept === \"Multiplying Whole Numbers\") {\r\n    return (\r\n          customizeContainer(props, 'Multiplying Whole Numbers',\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"1 by 1 digit\",\"2 by 1 digit\",\"3 by 1 digit\", \"4 by 1 digit\",\r\n                \"2 by 2 digit\",\"3 by 2 digit\",]),\r\n            conceptSpecify(props, \"specify\", \"Problem Type\", [\r\n              \"Algorithm\",\"Application\", ]),\r\n            <div className='dynamic-customize-container'>\r\n              {algorithm} {application}    \r\n            </div>\r\n\r\n                )\r\n    );\r\n  } else if (props.inputState.concept === \"Dividing Whole Numbers\") {\r\n    return (\r\n        customizeContainer(props,\"Dividing Whole Numbers\", \r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"2 by 1 digit\",\"3 by 1 digit\",\"4 by 1 digit\",\"3 by 2 digit\",\r\n                \"4 by 2 digit\", ]),\r\n            conceptSpecify(props, \"specify\", \"Problem Type\", [\r\n              \"Algorithm\",\"Application\", ]),\r\n            <div className='dynamic-customize-container'>\r\n              {algorithm} {application}    \r\n            </div>    \r\n\r\n                )\r\n    );\r\n  } else if (props.inputState.concept === \"Dividing Decimals\") {\r\n    return (\r\n        customizeContainer(props, \"Dividing Decimals\",\r\n            conceptSpecify(props, \"specify\", \"Dividend\", [\r\n                \"2 digit dividend\", \"3 digit dividend\",\"4 digit dividend\",]),\r\n            conceptSpecify(props, \"specify\", \"Divisor\", [\r\n              \"1 digit whole number divisor\",\"2 digit whole number divisor\",\r\n              '1 digit decimal divisor', '2 digit decimal divisor']),\r\n            conceptSpecify(props, \"specify\", \"Problem Type\", [\r\n              \"Algorithm\",\"Application\", ]),\r\n            <div className='dynamic-customize-container'>\r\n              {algorithm} {application}    \r\n            </div>   \r\n\r\n                )\r\n    );\r\n  } else if (props.inputState.concept === \"Multiplying Decimals\") {\r\n    return (\r\n        customizeContainer(props,\"Multiplying Decimals\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"3 by 1 digit\",\"4 by 1 digit\",\r\n                \"2 by 2 digit\",\"3 by 2 digit\", ]),\r\n            conceptSpecify(props, \"specify\", \"Problem Type\", [\r\n              \"Algorithm\",\"Application\", ]),\r\n            <div className='dynamic-customize-container'>\r\n              {algorithm} {application}    \r\n            </div>    \r\n\r\n            )\r\n\r\n    );\r\n  } else if (props.inputState.concept === \"Subtracting Decimals\") {\r\n    return (\r\n        customizeContainer(props,\"Subtracting Decimals\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"1-3 digits to the hundredths\",\"3-4 digits to the hundredths\", \r\n                \"4-5 digits to the hundredths\", \"4-5 digits to the thousandths\"]),\r\n            conceptSpecify(props, \"specify\", \"Place Values\", [\r\n                \"Same decimal place values\",\"Different decimal place values\",]),\r\n            conceptSpecify(props, \"specify\", \"Problem Type\", [\r\n              \"Algorithm\",\"Application\", ]),\r\n            <div className='dynamic-customize-container'>\r\n              {algorithm} {application}    \r\n            </div>    \r\n\r\n                )\r\n    );\r\n  } else if (props.inputState.concept === \"Adding Decimals\") {\r\n    return (\r\n        customizeContainer(props,\"Adding Decimals\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n              \"1-3 digits to the hundredths\",\"3-4 digits to the hundredths\", \r\n              \"4-5 digits to the hundredths\", \"4-5 digits to the thousandths\"]),\r\n            conceptSpecify(props, \"specify\", \"Place Values\", [\r\n                \"Same decimal place values\",\"Different decimal place values\",]),\r\n            conceptSpecify(props, \"specify\", \"Problem Type\", [\r\n              \"Algorithm\",\"Application\", ]),\r\n            <div className='dynamic-customize-container'>\r\n              {algorithm} {application}    \r\n            </div>     \r\n\r\n                )\r\n    );\r\n  } else if (props.inputState.concept === \"Order of Operations\") {\r\n    return (\r\n        customizeContainer(props,\"Order of Operations\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n            \"Whole numbers\", \"Decimals\",\"Integers\",]),\r\n            conceptSpecify(props, \"specify\", \"Number of Steps\", \r\n            [\"3 steps\", \"4 steps\", \"5 steps\"]),\r\n            conceptLevel(props, \"Problem Level\", [\r\n                \"Small numbers\",\"Medium numbers\",\"Large numbers\",]))\r\n    );\r\n  } else if (props.inputState.concept === \"Input Output Tables\") {\r\n    // if (props.inputState['Decimals']){\r\n    //   var decimal = conceptSpecify(props, \"specify\", \"Custom Decimal\", [\r\n    //     \"2-3 by 1 digit\",\"4 by 1 digit\",\"2 by 2 digit\", \"3 by 2 digit\"])\r\n    // } if (props.inputState['Whole numbers']){\r\n    //   var whole = conceptSpecify(props, \"specify\", \"Custom Whole\", [\r\n    //     \"2-3 by 1 digit\",\"4 by 1 digit\",\"2 by 2 digit\", \"3 by 2 digit\"])\r\n      \r\n    // }\r\n   \r\n    return(\r\n      customizeContainer(props,\"Input Output Tables\",\r\n        conceptSpecify(props, \"specify\", \"Include\", [\r\n        \"Whole numbers\",\"Decimals\",]),\r\n        conceptSpecify(props, \"specify\", \"Numbers\", [\r\n            \"Small\",\"Medium\",\"Large\",]),\r\n        conceptSpecify(props, \"specify\", \"Steps\", [\r\n          \"One-step\",\"Two-steps\",]),\r\n        // decimal, whole\r\n        \r\n        ) \r\n    ) \r\n    \r\n   \r\n  } else if (props.inputState.concept === \"Adding Fractions\") {\r\n    return (\r\n        customizeContainer(props,\"Adding Fractions\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"Common Denominators\",\"Uncommon Denominators\",]),\r\n            conceptProbStyle(props, \"probStyle\", \"Algorithm Style\", [\r\n                \"Vertical\",\"Horizontal\", ]) \r\n            // conceptLevel(props, \"Problem Level\", [\r\n            //     \"One step\",\"Two step\",\"Multi-step\",]),\r\n            // <div>{algorithm}</div>\r\n            \r\n                \r\n                )\r\n\r\n    );\r\n  } else if (props.inputState.concept === \"Subtracting Fractions\") {\r\n    return (\r\n        customizeContainer(props,\"Subtracting Fractions\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n              \"Common Denominators\",\"Uncommon Denominators\",]),\r\n            conceptProbStyle(props, \"probStyle\", \"Algorithm Style\", [\r\n              \"Vertical\",\"Horizontal\", ]) \r\n              // <div>{algorithm}</div>\r\n\r\n            // conceptSpecify(props, \"specify\", \"Include\", [\r\n            //     \"Fractions Only\",\"Mixed Numbers\",\"Regrouping\",]),\r\n              \r\n            // conceptLevel(props, \"Problem Level\", [\r\n            //     \"One step\",\"Two step\",\"Multi-step\",])\r\n                )\r\n    );\r\n  } else if (props.inputState.concept === \"Multiplying Fractions\") {\r\n    return (\r\n        customizeContainer(props,\"Multiplying Fractions\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"Fractions Only\",\"Fraction with Whole Numbers\",\"Unit Fraction with Whole Numbers\",]),\r\n            // conceptLevel(props, \"Problem Level\", [\r\n            //     \"One step\",\"Two step\",\"Multi-step\",])\r\n                )\r\n    );\r\n  } else if (props.inputState.concept === \"Dividing Fractions\") {\r\n    return (\r\n        customizeContainer(props,\"Dividing Fractions\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"Unit Fraction with Whole Numbers\",\"Fraction with Whole Numbers\",\r\n                \"Fractions Only\",]),\r\n \r\n                )\r\n    );\r\n  } else if (props.inputState.concept === \"Area\") {\r\n      if (props.inputState['Whole Numbers']){\r\n          var whole = conceptSpecify(props, \"specify\", \"Whole Numbers\", [\r\n            \"1 by 1 digit\",\"2 by 1 digit\" ])\r\n    }\r\n    return (\r\n      customizeContainer(props,\"Area\",\r\n          conceptSpecify(props, \"specify\", \"Include\", [\r\n              \"Whole Numbers\",\"Decimals\",]),\r\n          conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"3 by 1 digit\",\"4 by 1 digit\",\r\n                \"2 by 2 digit\",\"3 by 2 digit\", ]),\r\n          <div>{whole}</div>\r\n          // conceptSpecify(props, \"specify\", \"Include\", [\r\n          //   \"Rectangles\",\"Parallelograms\", \"Triangles\", \"Trapezoids\"]),\r\n      )\r\n  );\r\n  } else if (props.inputState.concept === \"Perimeter\") {\r\n      if (props.inputState['Decimals']){\r\n        var decimal = conceptSpecify(props, \"specify\", \"Decimals\", [\r\n          \"1-3 digits to the hundredths\",\"3-4 digits to the hundredths\", \r\n          \"4-5 digits to the hundredths\", \"4-5 digits to the thousandths\"])\r\n        var decimal2 = conceptSpecify(props, \"specify\", \"Decimal Place Values\", [\r\n            \"Same decimal place values\",\"Different decimal place values\",])\r\n      } if (props.inputState['Whole Numbers']){\r\n        var whole = conceptSpecify(props, \"specify\", \"Whole Numbers\", [\r\n          \"1 digit numbers\", \"2 digit numbers\", \"3 digit numbers\",\r\n          \"4 digit numbers\", \"5 digit numbers\", \"6 digit numbers\", \r\n          '7 digit numbers'])\r\n      }\r\n      return (\r\n        customizeContainer(props,\"Perimeter\",\r\n            conceptSpecify(props, \"specify\", \"Include\", [\r\n                \"Whole Numbers\",\"Decimals\",]),\r\n              <div className='dynamic-customize-container'>\r\n                {decimal}{decimal2}\r\n              </div>,<div>{whole}</div>\r\n\r\n        // conceptSpecify(props, \"specify\", \"Include\", [\r\n        //   \"Rectangles\",\"Parallelograms\", \"Triangles\", \"Trapezoids\"]),\r\n    )\r\n  );\r\n  } else if (props.inputState.concept === \"\") {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <p>\r\n        Return to the homepage to begin creating your assessment!\r\n      </p>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ConceptCustomization;\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\general.js",["276","277","278"],"\r\nimport {Text,View, StyleSheet,} from \"@react-pdf/renderer\";\r\n\r\n\r\nexport var sportList = ['football', 'soccer', 'baseball']\r\nexport var boyList = ['Greg', 'David', 'Jason', 'Samuel', 'Alex', 'Trevor','Daniel',\r\n 'Matthew', 'Logan', 'Aiden', 'Max', 'Zack', 'Jeremy', 'Joshua', 'Andrew', 'Isaac', 'Julian', 'Javier', \r\n'Javier', 'Chris', 'Brett', 'Liam', 'Noah', 'Oliver', 'William', 'Elijah', 'James', 'Ben', 'Lucas', \r\n'Mason', 'Ethan', 'Henry', 'Kenneth', 'Frank', 'Jose', 'Jackson', 'Jared', 'Eduardo', 'Aaron', 'Carlos',\r\n'Cristian', 'Erick', 'Jorge', 'Misael', 'Josue', 'Juan', 'Miguel', 'Gabriel', 'Kevin',\r\n'Leandro', 'Luis','Emiliano', 'Walter', 'Angel', 'Raul', 'Josiah', 'Donte',\r\n\r\n]\r\nexport var girlList = ['Melissa', 'Danielle', 'Zoey', 'Denah', 'Isabella', 'Valentina', \r\n'Olivia', 'Emma', 'Ava', 'Sophia', 'Charlotte', 'Amelia', 'Harper', 'Evelyn', 'Avery', 'Lily', \r\n'Natalie', 'Aria', 'Layla', 'Lyla', 'Chloe', 'Grace', 'Madison','Victoria', 'Veronica', \r\n'Christine', 'Addison', 'Emmy', 'Mary', 'Jenna', 'Ashley','Maria', 'Kylie', 'Laura', 'Sarah', \r\n'Hannah','Rachel','Emily','Monica', 'Nicole', 'Stehanie', 'Camila', 'Miranda','Evelyn',\r\n'Diana','Brittany','Andrea','Allison','Lizbeth','Marilyn','Carrie','Angela','Hailey','Yasmin',\r\n'Lorena','Fatima','Natalia','Sophia','Lanay','Jaleska','Baylie',]\r\nexport var nameList = boyList.concat(girlList)\r\nexport var womanList = [\"Ms. Vallery\", \"Mrs. Estes\", 'Ms. Smith', 'Ms. Gonzalez', 'Ms. Hernandez', \r\n'Mrs. Mendez', 'Mrs. Magee', 'Mrs. Henderson', 'Mrs. Robertson', 'Mrs. Martin', 'Ms. Davidson', \r\n'Ms. Brown', 'Mrs. Perez', 'Mrs. Peterson', \"Mrs. Keefe\", \"Mrs. Mendoza\", \"Mrs. Orr\", \r\n\"Mrs. Guerra\", \"Mrs. Hatter\", \"Mrs. Rios\", \"Mrs. Quinones\", \"Mrs. Serrano\", \"Mrs. DePavia\",\r\n'Mrs. Duncan', 'Mrs. Howard', 'Mrs. Sanchez', 'Mrs. Swain', \r\n]\r\n\r\nexport var candyList = [\"sour patch kids\",\"skittles\",\"m&ms\", \"Mike & Ikes\", \"Starbursts\"]\r\nexport var forestAnimal = [\"rabbit\", \"frog\", \"moth\", \"snake\", \"spider\", \"monkey\", \"bird\"]\r\nexport var lakeAnimal = [\"frog\", \"duck\", \"otter\"]\r\nexport var desertAnimal = [\"lion\", \"zebra\", \"giraffe\",\"antelope\", \"meerkat\", \"warthog\", \"hyena\"]\r\n\r\nexport var bigPetList = [\"cat\", \"dog\", \"rabbit\"]\r\nexport var smallPetList = [\"rabbit\",\"guinea pig\", 'lizard','turtle','hamster','ferret','rat']\r\nexport var xsmallPetList = ['hamster', 'fish', 'frog','tarantula']\r\nexport var disasterList = [\"zombie apocalypse\", \"category 5 hurricane\", 'snow storm', 'tsunami','ice storm', 'flood','natural disaster']\r\n\r\nexport var storeList = [\"Kroger\", \"Mega Market\", \"Walmart\", \"Target\", \"Fiesta\", \"Whole Foods Market\"]\r\n\r\nexport var itemLong = ['string', 'wood', 'rope', 'paper', 'yarn', 'metal', 'wire', 'pipe']\r\nexport var measureList = ['inches','feet','yards','meters','centimeters']\r\n\r\nexport var groupList = [\"package\", \"container\" ]\r\nexport var itemList = [\"Pokemon cards\", \"baseball cards\", \"pencils\", \"erasers\", \"books\", \"stickers\", \"pens\", \"jelly beans\", \"candies\", \"M&Ms\", \"cookies\", \"small toys\",]\r\nexport var itemPkgList = [\"Cheetos\", \"crackers\", \"Skittles\", \"takis\", \"Starbursts\", \"M&Ms\", \"tortilla chips\", \"fruit snacks\", \"gummy bears\", \"Sour Patch Kids\", \"Doritos\", \"Pasta\"]\r\nexport var itemList400_1500 = ['phone','tv','computer','laptop', 'game system']\r\nexport var itemList20_60 = [\"game\", \"blanket\", \"game controller\"]\r\nexport var itemList10_20 = [\"toy\", 'book', 'movie', 'candle', 'lego set', 'board game', 'card game']\r\nexport var itemList2_9 = ['doll', 'lego set', 'movie', 'toy', 'bag of chip', 'teddy bear', 'puzzle', \"rubik's cube\", ]\r\nexport var foodList = [\"soup\", \"pizza\", \"pretzel\", \"cookie\", \"potato\", \"cracker\", \"banana\"]\r\nexport var disasterFoodList = ['cookie', 'cracker','oatmeal','soup', 'candy', 'frozen dinner','mac & cheese']\r\nexport var themeList = [\"flower\", \"space\",\"superhero\",\"neon\",\"jungle\",\"glitter\"]\r\nexport var tourList = ['glacier', 'whale watching', 'ice cave', 'puffin viewing', 'castle', 'northern lights viewing', 'volcano viewing', 'mountain climbing', 'scuba diving', 'zipline', 'snorkeling']\r\nexport var eventHire = ['caterer', 'photographer', 'band', 'DJ']\r\nexport var each = ['for each', 'for one', 'per']\r\nexport var canItemList = ['black beans', 'kidney beans', 'chick peas', 'spinach', 'pinto beans', 'sweet potatoes']\r\nexport var materialList = ['maple wood', 'pipe', 'drywall', 'roof shingles', 'bricks']\r\nexport var buildList = ['house', 'apartment building', 'shed', 'tree house', 'library', 'store']\r\nexport const roundDec = (num, pv) => {\r\n  if (Number.isInteger(num)) {\r\n    return num\r\n  } else {\r\n    var roundNum = Math.round((num + Number.EPSILON) * Math.pow(10, pv)) / Math.pow(10, pv)\r\n    return Number(roundNum)\r\n\r\n  }\r\n\r\n}\r\nexport function randWhole(x, y, nozerone){\r\n  var num =  Math.floor(Math.random() * (y - x + 1) + x)\r\n  if (nozerone === 'true'){\r\n    if (num !== 0 && num!== 1){\r\n      return num\r\n    }else {\r\n        return randWhole(x, y, 'true')\r\n    }\r\n  } else {\r\n    return num\r\n  }\r\n\r\n}\r\nexport const randDec = (x, y, place) => {\r\n  var num = (Math.random()*(y-x) + x).toFixed(place)\r\n  if (Number.isInteger(Number(num))) {\r\n    return randDec(x,y,place)\r\n  } else {\r\n    return Number(num)\r\n  }\r\n}\r\nexport const decPV = (x) => {\r\n  if (Number.isInteger(Number(x))){\r\n    return 0\r\n  }else{\r\n    return x.toString().split('.')[1].length\r\n  }\r\n}\r\nexport const largestDecPV = (x, y) => {\r\n  return Math.max(decPV(x), decPV(y))\r\n}\r\nexport const decOp = (x, y, pv, op) => {\r\n  return (Number(eval(x+op+y).toFixed(pv)))\r\n}\r\nexport const multDecPV = (x, y) => {\r\n\r\n  if(Number.isInteger(Number(x)) && Number.isInteger(Number(y))) {\r\n    return 0\r\n  } else {\r\n    return(decPV(x)+decPV(y))\r\n  }\r\n}\r\n\r\nexport const removeDec = (x) => {\r\n  return Number(x.toString().replace('.', ''))\r\n}\r\nexport const splitDec = (x) => {\r\n  let splitDec = x.toString().split('.')\r\n  let whole = splitDec[0]\r\n  if (splitDec[1] === undefined){\r\n    var decimal = ''\r\n  } else {\r\n    decimal = splitDec[1]\r\n  }\r\n  return [whole, decimal]\r\n\r\n}\r\n\r\n\r\n\r\nexport const cap = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\nexport var cityList = [{city:'San Francisco', pop:randWhole(850000,900000)},\r\n                    {city:'Houston', pop:randWhole(2000000,2500000)},\r\n                    {city:'Austin', pop:randWhole(900000,1000000)},\r\n                    {city:'San Antonio', pop:randWhole(1400000,1500000)},\r\n                    {city:'Los Angeles', pop:randWhole(3700000,4300000)}]\r\n\r\n\r\nexport const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return (array)\r\n  }\r\nexport const wrongOptions = (answer, op, numL, numS, pv) => {\r\n    var wrong = []\r\n    wrong.push(answer+1, answer*10, answer+10) // need more\r\n    var stringNumS = (numS).toString()\r\n    if (op === 'multiply') {\r\n      if (numS > 9) { //no placeholder\r\n        var noPlaceHolder = Math.floor(Number(stringNumS[0])*numL+ Number(stringNumS[1])*numL)\r\n        wrong.push(noPlaceHolder)\r\n      } else {\r\n      }\r\n      wrong.push(answer+100)\r\n    }else if (op === 'add') {\r\n      wrong.push(answer+2, numL+numS+numL, numL-numS, answer-10, answer-1, answer-2)\r\n    }else if (op === 'sub') {\r\n      wrong.push(answer+2, answer-10, answer-1, answer-2, numL+numS)\r\n    }else if (op === 'divide') {\r\n      wrong.push(answer-1, answer+10, numL+numS, numL*numS)\r\n    } else if (op === 'decimal') {\r\n      if (pv === 2){\r\n        wrong.push(roundDec(answer+0.01, pv), Math.abs(roundDec(answer-0.01, pv)))\r\n      }\r\n      if (answer>99) {\r\n        wrong.push(roundDec(answer+100, pv), roundDec(answer-11, pv), roundDec(answer-1.1, pv), roundDec(answer+101.1, pv))\r\n      }\r\n      wrong.push(roundDec(answer/10, pv), roundDec(answer+11, pv), roundDec(answer+11.1, pv), roundDec(answer+0.1, pv), roundDec(answer+0.2, pv), Math.abs(roundDec(answer-0.1, pv)), Math.abs(roundDec(answer-0.2, pv))) //(numL+numS).toFixed(2), (answer +100).toFixed(1), (answer+0.1).toFixed(2), (answer +0.03).toFixed(2),\r\n    \r\n    }else {\r\n      wrong.push(answer +3, answer-1)\r\n    }\r\n    var wrongChoice = shuffleArray(wrong)\r\n    \r\n    return ([wrongChoice[0], wrongChoice[1], wrongChoice[2]])\r\n  }\r\n  // const tstyles = StyleSheet.create({\r\n  //   table: {\r\n  //       display: \"table\",\r\n  //        width: \"200px\",\r\n  //        textAlign:'center',\r\n  //   },\r\n  //   row: {\r\n  //       flexDirection: \"row\",\r\n  //   },\r\n  //   cell: {\r\n  //       // padding: '3px'\r\n  //     },\r\n  //   header: {\r\n  //     backgroundColor: 'grey'\r\n  //   }\r\n  // });\r\n  export const answerChoicesKey = (answer, wrong, wrong2, wrong3, f) => {\r\n    var answers = [answer, wrong, wrong2, wrong3]\r\n    answers = shuffleArray(answers)\r\n    if (f === '$') {\r\n      \r\n      answers = shuffleArray([roundDec(answer,2), roundDec(wrong,2), roundDec(wrong2,2), roundDec(wrong3,2)])\r\n      var [$, unit] = ['$', '']\r\n    } else if (f === undefined) {\r\n      [$, unit] = ['', '']\r\n    } else {\r\n      [$, unit] = ['', ' '+f]\r\n    } \r\n    if (typeof answer === 'string') {\r\n      var A = (' A ' + answers[0])\r\n      var B = (' B ' + answers[1])\r\n      var C = (' C ' + answers[2])\r\n      var D = (' D ' + answers[3])\r\n      var E = ''\r\n      if (answers[0] === answer) {\r\n      var correctAnswer = A\r\n    } else if (answers[1] === answer) {\r\n      correctAnswer = B\r\n    } else if (answers[2] === answer) {\r\n      correctAnswer = C\r\n    } else {\r\n      correctAnswer = D\r\n    }\r\n    } else if (typeof answer === 'number'){\r\n      A = (' A ' + $ + answers[0].toLocaleString()+ unit)\r\n      B = (' B ' + $ + answers[1].toLocaleString()+ unit)\r\n      C = (' C ' + $ + answers[2].toLocaleString()+ unit)\r\n      D = (' D ' + $ + answers[3].toLocaleString()+ unit)\r\n      E = ''\r\n      if (answers[0] === answer) {\r\n        correctAnswer = A\r\n    } else if (answers[1] === answer) {\r\n      correctAnswer = B\r\n    } else if (answers[2] === answer) {\r\n      correctAnswer = C\r\n    } else {\r\n      correctAnswer = D\r\n    }\r\n    } else { //answerchoices are tables\r\n      A = <View><Text>A</Text>{answers[0]}</View>\r\n      B = <View><Text>B</Text>{answers[1]}</View>\r\n      C = <View><Text>C</Text>{answers[2]}</View>\r\n      D = <View><Text>D</Text>{answers[3]}</View>\r\n      correctAnswer = ''\r\n      var answerLetter = ''\r\n      if (answers[0] === answer) {\r\n        correctAnswer = <View>{A}</View>\r\n    } else if (answers[1] === answer) {\r\n        correctAnswer = <View>{B}</View>\r\n    } else if (answers[2] === answer) {\r\n      correctAnswer = <View>{C}</View>\r\n    } else {\r\n      correctAnswer = <View>{D}</View>\r\n    }\r\n\r\n    }\r\n\r\n    return [A, B, C, D, correctAnswer, answerLetter]\r\n  }\r\n//   export const numberWithCommas = (x) => {\r\n//     return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n// }","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\functions\\createWorksheet.js",["279","280","281","282"],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\DisplayUserSelection.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\general\\pages\\Home.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\context\\auth-context.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\hooks\\http-hook.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\general\\pages\\Schools.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\general\\pages\\Parents.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\general\\pages\\Teachers.js",["283"],"import { React } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Dice from \"../../app-files/images/dice.png\";\r\nimport Students from \"../../app-files/images/students.png\";\r\nimport Teacher from \"../../app-files/images/teacher.png\";\r\nimport Education from \"../../app-files/images/education.svg\";\r\nimport Clock from \"../../app-files/images/clock.png\";\r\nimport \"./general.css\";\r\n\r\nconst Teachers = () => {\r\n  return (\r\n    <div className=\"main-general-container\">\r\n      <div className=\"header\">\r\n        <div className=\"header-center\">\r\n          <div>\r\n            <h1>\r\n              Instantly create custom assignments for your students!\r\n            </h1>\r\n          <img  src={Education} alt=\"education\"></img>\r\n\r\n            <p>\r\n              Let infinite math do all the work so you can save hundreds of hours of planning time.\r\n            </p>\r\n            <div className=\"signup\">\r\n              <Link className=\"main-button\" to=\"/signup\">\r\n                Sign up now!\r\n              </Link>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"info-card-container\">\r\n        <div className=\"info-card\">\r\n          <h3>Differentiate</h3>\r\n          <img className=\"info-card-icons\" src={Students} alt=\"students\"></img>\r\n\r\n          <p>\r\n            Customize your assignments to meet the needs of every student in\r\n            your room. You can quickly create many versions of your assignments\r\n            tailored to your students individual needs.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"info-card\">\r\n          <h3>Multiple Versions</h3>\r\n          <img className=\"info-card-icons\" src={Clock} alt=\"clock\"></img>\r\n\r\n          <p>\r\n            Make multiple versions of assignments to: <br />\r\n            <ul>\r\n              <li>Prevent copying during assessments</li>\r\n              <li>Create a review prior to an assessment</li>\r\n              <li>Create re-teach material for struggling students</li>\r\n              <li>Create multiple re-tests for students who failed</li>\r\n            </ul>\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"info-card-container\">\r\n        <div className=\"info-card\">\r\n          <h3>Spiral</h3>\r\n          <img className=\"info-card-icons\" src={Dice} alt=\"dice\"></img>\r\n\r\n          <p>\r\n            Easily create assignments that spiral back to older concepts so that\r\n            students do not forget. With Infinite Math you can mix and match any\r\n            concepts to create a truly unique assignment.\r\n          </p>\r\n        </div>\r\n        <div className=\"info-card\">\r\n          <h3>Infinite</h3>\r\n          <img className=\"info-card-icons\" src={Dice} alt=\"dice\"></img>\r\n\r\n          <p>\r\n            Since our program randomly generates the problems you can create an\r\n            endless amount of activities for your students. <br />\r\n            <ul>\r\n              <li>Homework</li>\r\n              <li>Warm-ups</li>\r\n              <li>Assessments</li>\r\n              <li>Re-Assessments</li>\r\n              <li>Differentiated Classwork</li>\r\n              <li>Small group work</li>\r\n            </ul>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Teachers;\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\Navigation\\MainNavigation.js",["284"],"import React, {useState} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport MainHeader from './MainHeader'\r\nimport NavLinks from './NavLinks'\r\nimport SideDrawer from './SideDrawer'\r\nimport Backdrop from '../UIElements/Backdrop'\r\nimport './MainNavigation.css';\r\n\r\nconst MainNavigation = props => { //all passed between MainHeader = \"props.chidlren\" on MainHeader\r\n  const [drawerIsOpen, setDrawerIsOpen]  = useState(false);\r\n\r\n  const openDrawerHandler = () => {\r\n    setDrawerIsOpen(true);\r\n  }\r\n  const closeDrawerHandler = () => {\r\n    setDrawerIsOpen(false);\r\n  }\r\n  return (\r\n      <React.Fragment> \r\n        {drawerIsOpen && <Backdrop onClick={closeDrawerHandler}/>} \r\n          <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\r\n            <nav className='main-navigation__drawer-nav'>\r\n              <NavLinks handleClearSelections={props.handleClearSelections}/>\r\n            </nav>\r\n          </SideDrawer>\r\n        <MainHeader>\r\n          <button className=\"main-navigation__menu-btn\" onClick= {openDrawerHandler}>\r\n            <span/>\r\n            <span/>\r\n            <span/>\r\n          </button>\r\n          <nav className='main-navigation__header-nav'> \r\n            <NavLinks handleClearSelections={props.handleClearSelections}/>\r\n          </nav>\r\n        </MainHeader>\r\n      </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MainNavigation","C:\\projects\\worksheet-creator\\front-end\\src\\user\\pages\\Authenticate.js",["285","286"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport {useLocation} from 'react-router-dom';\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport {useHttpClient} from '../../shared/hooks/http-hook'\r\nimport \"./Authenticate.css\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nconst Authenticate = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();  \r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    //(initialInputs,initialInputValidity) returns [newState, inputHandler]\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false\r\n          }\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          \"http://localhost:5000/api/users/login\", \r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value\r\n          }),\r\n          {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        )\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {\r\n      }\r\n\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append('email', formState.inputs.email.value)\r\n        formData.append('name', formState.inputs.name.value)\r\n        formData.append('password', formState.inputs.password.value)\r\n        formData.append('image', formState.inputs.image.value)\r\n        const responseData = await sendRequest(\r\n          \"http://localhost:5000/api/users/signup\", \r\n          'POST', \r\n          formData\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {\r\n      }\r\n    }\r\n  };\r\n  let location = useLocation()\r\n  useEffect(() => {\r\n    if (location.pathname==='/signup') {\r\n      switchModeHandler()\r\n    }\r\n    if (location.pathname==='/login') {\r\n      switchModeHandler()\r\n    }\r\n}, [location])\r\n  // if (location.pathname==='/signup') {\r\n  //   switchModeHandler()\r\n  // }\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"authenticate-container\">\r\n      <ErrorModal error= {error} onClear={clearError}/>\r\n    <Card className=\"authentication\">\r\n      {isLoading && <LoadingSpinner asOverlay />}\r\n      {!isLoginMode ? <h2>Sign up</h2> :<h2>Login Required</h2>}\r\n      \r\n      {/* <h2>Login Required</h2> */}\r\n      <hr />\r\n\r\n      <form onSubmit={authSubmitHandler}>\r\n        {!isLoginMode && (\r\n          <Input\r\n            element=\"input\"\r\n            id=\"name\"\r\n            type=\"text\"\r\n            label=\"Name\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a name\"\r\n            onInput={inputHandler}\r\n          />\r\n        )}\r\n        <Input\r\n          id=\"email\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"Email\"\r\n          validators={[VALIDATOR_EMAIL()]}\r\n          errorText=\"Please enter a valid email.\"\r\n          onInput={inputHandler}\r\n        />\r\n        {/* {!isLoginMode && <ImageUpload center id=\"image\" onInput = {inputHandler} errorText=\"Please provide an image\"/>} */}\r\n        <Input\r\n          id=\"password\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"Password\"\r\n          validators={[VALIDATOR_MINLENGTH(6)]}\r\n          errorText=\"Please enter a valid password at least 6 characters.\"\r\n          onInput={inputHandler}\r\n        />\r\n\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </form>\r\n      <Button inverse onClick={switchModeHandler}>\r\n        SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n      </Button>\r\n    </Card>\r\n    </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Authenticate;\r\n\r\n//include a useForm that renders email and password field, validation- util password at least 5 characters,\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\input.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\WorksheetList.js",["287"],"import React from \"react\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport {cap} from '../../worksheet/problems/general'\r\nimport WorksheetItem from \"./WorksheetItem\";\r\nimport './WorksheetList.css'\r\n\r\nconst WorksheetList = (props) => {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"worksheet-list center\">\r\n        <Card>\r\n          <h2>No worksheets found. Try creating one!</h2>\r\n          <Button to=\"/concept-selection\">Make a worksheet</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ul className=\"worksheet-list\">\r\n        {props.items.map((worksheet) => (\r\n          <WorksheetItem\r\n            key={worksheet.id}\r\n            id={worksheet.id}\r\n            // title={cap(worksheet.title)}\r\n            // docStyle={worksheet.docStyle}\r\n            generalSelection={worksheet.generalSelection}\r\n            userSelection={worksheet.userSelection}\r\n            questAnswerList={worksheet.questAnswerList}\r\n            createdAt= {worksheet.createdAt}\r\n            creatorId={worksheet.creator}\r\n            worksheetDeletedHandler={props.worksheetDeletedHandler}\r\n            handleDuplicate={props.handleDuplicate}\r\n\r\n            \r\n          />\r\n        ))}\r\n      </ul>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default WorksheetList;","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\ConceptGeneral.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\functions\\conceptCheck.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\functions\\createWorksheetcss.js",["288","289","290"],"import {Text,\r\n  View,\r\n  StyleSheet,\r\n  Font,\r\n} from \"@react-pdf/renderer\";\r\nexport const styles = StyleSheet.create({\r\n  question: {\r\n    marginBottom:30,\r\n    fontSize: 12,\r\n    textAlign: 'justify',\r\n    // fontFamily: 'arial'\r\n  },\r\n  questionAnswer: {\r\n    flexGrow: 1,\r\n    marginTop: 20,\r\n    marginBottom:20,\r\n    marginRight:40,\r\n    fontSize: 12,\r\n    marginLeft:40,\r\n    textAlign: 'justify',\r\n  },\r\n  column: {\r\n    flexDirection:'row',\r\n    marginTop: 10,\r\n    marginRight:20,\r\n    fontSize:12,\r\n    textAlign:'justify',\r\n    paddingRight:50,\r\n    paddingBottom:10,\r\n    flexGrow: 1,\r\n  },\r\n  columnQuestion: {\r\n    display:'flex',\r\n    flexDirection:'column',\r\n    width: '50%',\r\n    marginRight:20,\r\n  },\r\n  num: {\r\n    width:25,\r\n    marginLeft:10,\r\n  },\r\n  answerKey: {\r\n    flexDirection:'row',\r\n    marginTop: 10,\r\n  },\r\n  answerchoices: {\r\n    padding:50,\r\n  },\r\n  answerLetter: {\r\n    flexDirection:'row',\r\n    padding: 10,\r\n    margin: 10,\r\n  },\r\n  viewList: {\r\n    display:'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    height: '100%',\r\n    // alignItems: 'center',\r\n\r\n  },\r\n  viewQuestion: {\r\n    flexGrow: 1,\r\n\r\n  }\r\n});","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\LoadingSpinner.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\ErrorModal.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\FormElements\\Input.js",["291"],"import React, { useReducer, useEffect } from \"react\";\r\n//useReducer manage more complex state, write logic that runs when you change state rather than just change value. good when have interconnected state.\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { validate } from \"../../util/validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n      case 'TOUCH':\r\n        return {\r\n          ...state,\r\n          isTouched: true\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || '',\r\n    isTouched: false,\r\n    isValid: props.initialValid || false,\r\n  });\r\n\r\n  const {id, onInput} = props;\r\n  const {value, isValid} = inputState;\r\n\r\n  useEffect(()=> {\r\n    props.onInput(id, value, isValid)\r\n  }, [id, value, isValid, onInput])\r\n\r\n  const changeHandler = (event) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: 'TOUCH',\r\n    })\r\n  }\r\n\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur= {touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n//      : props.element ==='checkbox' ? (\r\n//       <Checkbox name={props.name} value={props.value} checked={props.checked} onChange={props.onChange} color='primary'/>\r\n\r\n//     ): props.element === 'radio'? (\r\n//       <Checkbox></Checkbox>\r\n//     ): props.element === 'text-field'? (\r\n// <Checkbox></Checkbox>\r\n//     ):(\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur= {touchHandler}\r\n\r\n        value={inputState.value}\r\n      />\r\n    );\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\Backdrop.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\util\\validators.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\Navigation\\MainHeader.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\Navigation\\NavLinks.js",["292","293","294","295","296","297","298","299"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport Avatar from \"../UIElements/Avatar\";\r\nimport { AuthContext } from \"../../context/auth-context\";\r\nimport \"./NavLinks.css\";\r\nimport { useHttpClient } from \"../../hooks/http-hook\";\r\n\r\nconst NavLinks = (props) => {\r\n  const auth = useContext(AuthContext);\r\n  const [loadedUser, setLoadedUser] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  //   useEffect(() => {\r\n  //     const fetchUsers = async () => {\r\n  //         try {\r\n  //             const responseData = await sendRequest(\r\n  //                 `http://localhost:5000/api/users/${auth.userId}`,\r\n\r\n  //             );\r\n  //             setLoadedUser(responseData.user);\r\n  //             console.log(responseData)\r\n  //             console.log(setLoadedUser)\r\n  //         } catch (err) {}\r\n  //     }\r\n  //     fetchUsers();\r\n  // }, [sendRequest]);\r\n  return (\r\n    <ul className=\"nav-links\">\r\n      <Link to=\"/\" className=\"logo\">\r\n        <h1 className=\"infinite-math-small\">\r\n          <span className=\"in-small\">IN</span>\r\n          <span className=\"finite-small\">finite</span> Math\r\n        </h1>\r\n      </Link>\r\n      {auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to=\"/concept-selection\">\r\n            <button className=\"new-worksheet\" onClick={props.handleClearSelections}>New Worksheet</button>\r\n          </NavLink>\r\n        </li>\r\n      )}\r\n      {auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to={`/worksheets/${auth.userId}`}>My Collection</NavLink>\r\n        </li>\r\n      )}\r\n      {auth.isLoggedIn && (\r\n        <li>\r\n          <button onClick={auth.logout}>\r\n            Log out\r\n            {/* <Avatar image={`http://localhost:5000/${loadedUser.user.image}`} alt={loadedUser.user.name}/> */}\r\n          </button>\r\n        </li>\r\n      )}\r\n\r\n      {!auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to=\"/parents\">Parents</NavLink>\r\n        </li>\r\n      )}\r\n      {!auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to=\"/teachers\">Teachers</NavLink>\r\n        </li>\r\n      )}\r\n      {!auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to=\"/schools\">Schools</NavLink>\r\n        </li>\r\n      )}\r\n      {!auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to=\"/concept-selection\">\r\n          <button className=\"new-worksheet\" onClick={props.handleClearSelections}>Try for Free</button>\r\n\r\n          </NavLink>\r\n        </li>\r\n      )}\r\n      {!auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to=\"/auth\">Log in</NavLink>\r\n        </li>\r\n      )}\r\n\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default NavLinks;\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\Navigation\\SideDrawer.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\hooks\\form-hook.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\FormElements\\Button.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\FormElements\\ImageUpload.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\Card.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\WorksheetItem.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\order-of-ops.js",["300","301","302"],"import {randWhole, shuffleArray, answerChoicesKey, randDec, roundDec\r\n    } from './general.js'\r\n\r\nvar simpleQArray = shuffleArray(['What is the value of the expression? \\n',\r\n                  'An expression is shown below, what value is equivalent to the expression?\\n',\r\n                  'Which value is equivalent to the expression below? \\n'])\r\n\r\nconst orderOpsNumbers = (userSelection) => {\r\n    var numArray = []\r\n    if (userSelection['Whole numbers'] || (!('Whole numbers' in userSelection) && !('Decimals' in userSelection) && !('Integers' in userSelection))){\r\n        if (userSelection.level === '2') {\r\n            numArray.push([randWhole(2,9), randWhole(2,9),randWhole(10,20),\r\n                randWhole(10,20),randWhole(21,30),randWhole(21,30)])\r\n\r\n        } else if (userSelection.level === '3') {\r\n            numArray.push([randWhole(20,50), randWhole(20,50), randWhole(30,70), \r\n                randWhole(30,70), randWhole(51,70), randWhole(51,70)])\r\n        } else {\r\n            numArray.push([randWhole(2,5), randWhole(2,5), randWhole(2,9), \r\n                randWhole(2,9),randWhole(6,9),randWhole(6,9)])\r\n        }\r\n\r\n    } if (userSelection['Decimals']) {\r\n        var smallDec = [randDec(1,4,1), randDec(1,4,2), randDec(0.01,0.99,2), \r\n                        randDec(0.01,0.9,1), randDec(0.01,0.1,2) ]\r\n        var largeDec = [randDec(10, 20,1), randDec(10,20,2)]\r\n        if (userSelection.level === '2') {\r\n            numArray.push([smallDec[randWhole(0, smallDec.length-1)], \r\n            smallDec[randWhole(0, smallDec.length-1)], \r\n            randWhole(7,12),randWhole(7,12),randWhole(7,12),randWhole(7,12)])\r\n\r\n        } else if (userSelection.level === '3') {\r\n            numArray.push([largeDec[randWhole(0, largeDec.length-1)], \r\n            largeDec[randWhole(0, largeDec.length-1)],\r\n            randWhole(10,19), randWhole(10,19),randWhole(21,30),randWhole(21,30)])\r\n        } else {\r\n            numArray.push([smallDec[randWhole(0, smallDec.length-1)], \r\n            smallDec[randWhole(0, smallDec.length-1)], \r\n            randWhole(2,9),randWhole(2,9),randWhole(5,9),randWhole(5,9)])\r\n        }\r\n\r\n    } if (userSelection['Integers']){\r\n        if (userSelection.level === '2') {\r\n            numArray.push([randWhole(-12,-2), randWhole(-12,-2), randWhole(-12, 12), randWhole(-9,12), randWhole(5,15),randWhole(5,15)])\r\n \r\n        } else if (userSelection.level === '3') {\r\n            numArray.push([randWhole(-15,-2), randWhole(-15,-2), randWhole(-15, 15), randWhole(-15,15), randWhole(5,20),randWhole(5,20)])\r\n\r\n        } else {\r\n            numArray.push([randWhole(-9,-2), randWhole(-9,-2), randWhole(-9, 9), randWhole(-9,9), randWhole(2,10),randWhole(2,10)])\r\n        }\r\n    } \r\n  \r\n    var numList = shuffleArray(numArray)[0]\r\n\r\nreturn numList\r\n}                  \r\nexport const orderOps = (userSelection) => { //oooA\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberS] = [numList[4], numList[5], numList[2]]\r\n    var [numberM, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberL2*numberS\r\n\r\n    var probArray = []\r\n    if (userSelection['3 steps']) {\r\n        var OoOA = `${numberL} + (${dividend} ÷ ${numberS} - ${numberS2})` //10 + (40÷8 - 2)\r\n        var OoOB = `(${dividend} ÷ ${numberS} - ${numberS2}) + ${numberL} ` //(40÷8 - 9) +10\r\n        var OoOC = `${numberL} + ${dividend} ÷ ${numberS} - ${numberS2}` //10 + 40÷8 - 2\r\n        var answer = numberL+(dividend/numberS-numberS2)\r\n        var wrong = [Math.floor(((numberL+dividend)/numberS)-numberS2), answer-1,\r\n                     answer+2, answer+1]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n      } if (userSelection['4 steps']) {\r\n        OoOA = `${numberL} + (${dividend} ÷ ${numberS} - ${numberS2}) × ${numberM2}` //10 + (40÷8 - 9) × 10\r\n        OoOB = `${numberL} + ${numberM2}(${dividend} ÷ ${numberS} - ${numberS2}) `   //10 + 10(40÷8 - 9)\r\n        OoOC = `${numberM2}(${dividend} ÷ ${numberS} - ${numberS2}) + ${numberL} `  //10(40÷8 - 9)+10\r\n        answer = numberL+(dividend/numberS-numberS2)*numberM2\r\n        wrong = [Math.abs(numberL+dividend/numberS-numberS2*numberM2), answer-1,answer+1,       \r\n                (Math.floor((numberL+dividend)/numberS)-numberS2)*numberM2, answer+5,\r\n                   ]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n      } if (userSelection['5 steps'])  { //no selection/5\r\n        OoOA = `${numberM2} + (${dividend} ÷ ${numberS} - ${numberS2}) × ${numberL} - ${numberM}` //10 + (40÷8-9) x 10 - 2 \r\n        OoOB = `${numberM2} + ${numberL}(${dividend} ÷ ${numberS} - ${numberS2}) - ${numberM}` //10 + 10(40÷8-9) - 2 \r\n        OoOC = `${numberL}(${dividend} ÷ ${numberS} - ${numberS2}) - ${numberM} + ${numberM2}` //10(40÷8-9) - 2 + 10\r\n        answer = numberM2+((dividend/numberS-numberS2)*numberL)-numberM\r\n        wrong = [Math.abs((numberL+dividend)/numberS-numberS2*numberL-numberM), answer+1, answer-1,       \r\n            (Math.floor(((numberM2+numberL)*dividend)/numberS)-numberS2-numberM),\r\n            (((numberM2+dividend)/numberS)-numberS2)*numberL-numberM,\r\n            Math.abs((numberM2+dividend/numberS-numberS2)*numberL-numberM+1)]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n    }\r\n    var randProbObj = shuffleArray(probArray)[0]\r\n    wrong=shuffleArray(randProbObj.wrong)\r\n    var randProb = shuffleArray(randProbObj.prob)[0]\r\n    var AC = answerChoicesKey(randProbObj.answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: randProbObj.answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps2 = (userSelection) => { //oooB\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = roundDec(numberM2*numberS2, 2)\r\n    var probArray = []\r\n\r\n    if (userSelection[\"3 steps\"]) { \r\n        var OoOA = `${numberM} × (${numberL}-${dividend} ÷ ${numberM2})` // 8 x (9- 40/5)\r\n        var OoOB = `(${numberL} - ${dividend} ÷ ${numberM2}) × ${numberM}` //(9-40/5)x8\r\n        var OoOC = `${numberM}(${numberL}-${dividend} ÷ ${numberM2})` //8(9-40/5)\r\n        var answer = numberM*(numberL-(dividend/numberM2))\r\n        var wrong = [numberM*numberL-dividend/numberM2, \r\n                    Math.abs(Math.floor(numberM*((numberL-dividend)/numberM2))), answer-1, answer+1,\r\n        Math.floor(((numberM*numberL+1)-dividend)/numberM2)]\r\n        if (userSelection.specify === 'Decimals') {\r\n            wrong.push(Math.abs(numberM*((numberL-dividend)/numberM2), ((numberM*numberL+1)-dividend)/numberM2))\r\n        }\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n      } if (userSelection[\"4 steps\"]) { \r\n        OoOA = `${numberM}(${numberL}-${dividend} ÷ ${numberM2}) + ${numberL2}` //8(9 - 40/5) + 9\r\n        OoOB = `(${numberL} - ${dividend} ÷ ${numberM2}) × ${numberM} + ${numberL2}` // (9-40/5)x8 +9\r\n        OoOC = `${numberL2} +  ${numberM}(${numberL}-${dividend} ÷ ${numberM2})` //9+ 8(9-40/5)\r\n        answer = numberM*(numberL-(dividend/numberM2))+numberL2\r\n        wrong = [numberM*numberL-dividend/numberM2+numberL2, answer-1,\r\n                (numberL2+numberM)*numberL-(dividend/numberM2),\r\n                Math.floor((((numberM*numberL)-dividend)/numberM2)+numberL2)]\r\n                probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n      } if (userSelection[\"5 steps\"]) { \r\n        OoOA = `${numberM} (${numberS} × ${numberL} - ${dividend} ÷ ${numberM2}) + ${numberL2}` //8 (5 x 9 - 40/5) + 9\r\n        OoOB = `${numberM} (${numberL} × ${numberS} - ${dividend} ÷ ${numberM2}) + ${numberL2}` //8 (9 x 5- 40/5) +9\r\n        OoOC = `${numberL2} + ${numberM} (${numberS} × ${numberL} - ${dividend} ÷ ${numberM2})` //9 + 8( 5 x 9 - 40/5)\r\n\r\n        answer = numberM*(numberS*numberL-(dividend/numberM2))+numberL2\r\n        wrong = [numberM*numberS*numberL-numberS2*numberM2/numberM2+numberL2, \r\n                numberM*numberS*(numberL-(numberS2*numberM2/numberM2)+numberL2),\r\n                Math.floor((((numberM*numberS*numberL)-numberS2)*numberM2))+numberL2,\r\n                answer-1]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n    }        \r\n    var randProbObj = shuffleArray(probArray)[0]\r\n    wrong=shuffleArray(randProbObj.wrong)\r\n    var randProb = shuffleArray(randProbObj.prob)[0]\r\n    var AC = answerChoicesKey(randProbObj.answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: randProbObj.answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps3 = (userSelection) => { //oooC\r\n    \r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var probArray = []\r\n\r\n    if (userSelection[\"3 steps\"]) { \r\n        var OoOA = `(${numberL} - ${numberS2}) + (${numberL2} + ${numberM2})` //(9-2)+(8+5)\r\n        var OoOB = `(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2})` //(8+5)+(9-2)\r\n        var OoOC = `${numberM2} + ${numberL2} + (${numberL} - ${numberS2})` //5+8+(9-2)\r\n        var answer = (numberL-numberS2)+(numberL2+numberM2)\r\n        var wrong = [numberL-numberS2+numberL2-numberM2, \r\n            answer+3, answer-1,\r\n            (numberL+numberS2)+numberL2+numberM2\r\n        ]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n\r\n      } if (userSelection[\"4 steps\"]) {  \r\n        OoOA = `(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})` // (9-4) + 5(8+2)\r\n        OoOB = `${numberM}(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2})` //5(8+2) + (9-4) \r\n        OoOC = `(${numberM2} + ${numberL2}) × ${numberM} + (${numberL} - ${numberS2})` //(8+2)x5 + (9-4)\r\n        answer = (numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberL-numberS2+numberM*numberL2+numberM2, answer+1,answer-1,\r\n            (numberL-numberS2+numberM)*(numberL2+numberM2),\r\n            ((numberL-numberS2+numberM)*numberL2)+numberM2\r\n        ]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n      } if (userSelection[\"5 steps\"]) { \r\n        OoOA = `${numberS}(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})` //2(9-4) + 5(8+2)\r\n        OoOB = `${numberM}(${numberL2} + ${numberM2}) + ${numberS}(${numberL} - ${numberS2}) ` //5(8+2) + 2(9-4)\r\n        OoOC = `${numberM}(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2}) × ${numberS} ` //5(8+2) + (9-4) x 2\r\n        answer = numberS*(numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberS*numberL-numberS2+numberM*numberL2+numberM2, \r\n            (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2,\r\n            (((numberS*numberL-numberS2)+numberM)*numberL2)+numberM2, answer-1\r\n        ]\r\n        if (userSelection.specify==='Integers'){\r\n            wrong.push(answer*-1, \r\n                numberS*(numberL-numberS2*-1)+numberM*(numberL2+numberM2),\r\n                numberS*-1*(numberL-numberS2*-1)+numberM*(numberL2+numberM2),\r\n                )\r\n        } else if (userSelection.specify==='Decimals') {\r\n            wrong.push(answer/10, answer*10, answer+0.1, answer+0.01,\r\n                numberS*(numberL-numberS2/10)+numberM*(numberL2+numberM2),\r\n                )\r\n        }\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n\r\n    }        \r\n    var randProbObj = shuffleArray(probArray)[0]\r\n    wrong=shuffleArray(randProbObj.wrong)\r\n    var randProb = shuffleArray(randProbObj.prob)[0]\r\n    var AC = answerChoicesKey(randProbObj.answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: randProbObj.answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps4 = (userSelection) => { //oooD\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberM2*numberS2\r\n    var probArray = []\r\n\r\n    if (userSelection[\"3 steps\"]) { \r\n        var OoOA = `[${numberL2} + (${numberL} - ${numberS})] × ${numberM2}` //[40+(30-10)]x20\r\n        var OoOB = `${numberM2}[${numberL2} + (${numberL} - ${numberS})]` // 20[40+(30-10)]\r\n        var OoOC = `${numberM2}(${numberL} - ${numberS} + ${numberL2})` // 20[30-10+40]\r\n        var answer = (numberL2+(numberL-numberS))*numberM2\r\n        var wrong = [(numberL2+(numberL-numberS))*(numberM2+1), \r\n                    Math.abs(numberL2*numberL-numberS*numberM2), \r\n                    numberL2*numberM2+Math.abs(numberL-numberS),   \r\n                    (numberL2+numberL-numberS+1)*numberM2, answer+1,answer-1]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n      } if (userSelection[\"4 steps\"]) { \r\n        OoOA = `[${numberL2} + (${numberS2} × ${numberL} - ${numberS})] × ${numberM2}` // [100+(8x40-10)]x40\r\n        OoOB = `${numberM2}[${numberL2} + (${numberS2} × ${numberL} - ${numberS})]` // 40[100+(8x40-10)]\r\n        OoOC = `${numberM2}[(${numberS2} × ${numberL} - ${numberS}) + ${numberL2}]` //40[(8x40-10)+100]\r\n        answer = (numberL2+(numberS2*numberL-numberS))*numberM2\r\n        wrong = [(numberL2+(numberS2*numberL-numberS))*eval(numberM2+1), \r\n                (numberL2+numberS2)*numberL-numberS,\r\n                 numberL2+Math.abs(numberS2*numberL-numberS*numberM2),   \r\n                 (((numberL2+numberS2)*numberL)-numberS)*numberM2, answer+1,answer-1]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n        \r\n      } if (userSelection[\"5 steps\"]) { //\r\n        OoOA = `${numberM2}[${numberL2} + (${numberM} + ${numberS2} × ${numberL} - ${numberS})]` // 40[100+(30+8x40-10)]\r\n        OoOB = `${numberM2}[${numberL2} + (${numberS2} × ${numberL} - ${numberS} + ${numberM})]` // 40[100+(8x40-10+30)]\r\n        OoOC = `[${numberL2} + (${numberM} + ${numberS2} × ${numberL} - ${numberS})] × ${numberM2} ` // [100+(30+8x40-10)] x 40\r\n        answer = (numberL2+(numberM+numberS2*numberL-numberS))*numberM2\r\n        wrong = [(numberL2+(numberM+numberS2*numberL-numberS))*numberM2+1, \r\n                (Math.floor(numberL2+numberM+numberS2)*numberL-numberS),\r\n                 Math.floor(numberL2+numberM+Math.abs(numberS2*numberL-numberS*numberM2)),   \r\n                 Math.floor((((numberL2+numberS2+numberM)*numberL)-numberS)*numberM2),\r\n                answer-1, answer+1] \r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n        \r\n    }        \r\n    var randProbObj = shuffleArray(probArray)[0]\r\n    wrong=shuffleArray(randProbObj.wrong)\r\n    var randProb = shuffleArray(randProbObj.prob)[0]\r\n    var AC = answerChoicesKey(randProbObj.answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: randProbObj.answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps5 = (userSelection) => { //oooE\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    numberM2 = eval(numberM2+'+'+numberS2)\r\n    var probArray = []\r\n\r\n    if (userSelection[\"3 steps\"]) { \r\n        var OoOA = `${numberL2}[${numberL} + (${numberM2} - ${numberS2})]` //5[9+(7-2)]\r\n        var OoOB = `${numberL2}[(${numberM2} - ${numberS2}) + ${numberL}]` //5[(7-2)+9]\r\n        var OoOC = `[${numberL} + (${numberM2} - ${numberS2})] × ${numberL2}` //[9+(7-2)]x5\r\n        var answer = numberL2*(numberL+(numberM2-numberS2))\r\n        var wrong = [numberL2+(numberL+(numberM2+numberM2+numberM2-numberS2)), \r\n                    answer+1, answer-1,\r\n                    numberL2*numberL + numberM2, \r\n                    (numberL2*numberL)*numberM2-numberS2]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n\r\n      } else if (userSelection['4 steps']) { \r\n        OoOA = `${numberL2}[${numberL} + ${numberM}(${numberM2} - ${numberS2})]` // 5[9+6(7-2)]\r\n        OoOB = `${numberL2}[${numberM}(${numberM2} - ${numberS2}) + ${numberL}]` // 5[6(7-2)+9]\r\n        OoOC = `${numberL2} × [${numberL} + ${numberM}(${numberM2} - ${numberS2})]` //5x[9+6(7-2)]\r\n        answer = numberL2*(numberL+numberM*(numberM2-numberS2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2-numberS2)), answer+1,answer-1,\r\n                numberL2*(numberL+numberM)*(numberM2-numberS2),\r\n                numberL2*numberL + (numberM*numberM2-numberS2), \r\n                ((numberL2*numberL+numberM)*numberM2)-numberS2]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n        \r\n      } if (userSelection['5 steps']){ \r\n        OoOA = `${numberL2}[${numberL} + ${numberM}(${numberM2} × ${numberS} - ${numberS2})]` // 5[9+6(7x3-2)]\r\n        OoOB = `${numberL2}[${numberM}(${numberM2} × ${numberS} - ${numberS2}) + ${numberL}]` //5[6(7x3-2)+9]\r\n        OoOC = `[${numberM}(${numberL} + ${numberS} × ${numberM2} - ${numberS2})] × ${numberL}` //[9+6(3x7-2)]x5\r\n        answer = numberL2*(numberL+numberM*(numberM2*numberS-numberS2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2*numberS-numberS2)), answer+1,answer-1,\r\n                numberL2*(numberL+numberM)*(numberM2*numberS-numberS2),\r\n                numberL2*numberL + (numberM*numberM2*numberS-numberS2), \r\n                ((numberL2*numberL+numberM)*numberM2*numberS)-numberS2]\r\n        probArray.push({prob:[OoOA, OoOB, OoOC], answer: answer, wrong: wrong})\r\n        \r\n    }        \r\n    var randProbObj = shuffleArray(probArray)[0]\r\n    wrong=shuffleArray(randProbObj.wrong)\r\n    var randProb = shuffleArray(randProbObj.prob)[0]\r\n    var AC = answerChoicesKey(randProbObj.answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: randProbObj.answer}\r\n    return problem\r\n}\r\n\r\nexport const randOrderOps = (userSelection) => {\r\n    var probArray = [orderOps, orderOps2, orderOps3, orderOps4, orderOps5]\r\n    if (userSelection.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (userSelection.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}\r\n//ideas: \r\n//make order of op problems the answer choices and have them select the one that is or is not the same as a given answer. \r\n\r\n// give two problems asking if the given problems have the same answer. (make it 50/50)\r\n\r\n//make it show student solving and they identify what step was messed up.\r\n\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\add-sub.js",["303","304","305","306"],"// import * as gen from './general.js'\r\nimport {randWhole, shuffleArray, wrongOptions, answerChoicesKey,\r\n        boyList, girlList, nameList, cityList, disasterList, sportList, candyList, forestAnimal, lakeAnimal, desertAnimal} from './general.js'\r\nimport {verticalAlign} from './vertical-align'\r\n\r\nexport const asNumbers = (userSelection) => {\r\n    var numArray = []\r\n    if (userSelection['1 digit numbers']){\r\n        numArray.push([randWhole(2,9), randWhole(2,9), randWhole(2,9)]);\r\n\r\n    } if (userSelection['2 digit numbers']){\r\n        numArray.push([randWhole(2, 99), randWhole(10, 99), randWhole(10,99)]);\r\n\r\n    } if (userSelection['3 digit numbers']) {\r\n        numArray.push([randWhole(10, 999), randWhole(100, 999), randWhole(100, 999)]);\r\n\r\n    } if (userSelection['4 digit numbers']){\r\n        numArray.push([randWhole(100, 9999), randWhole(1000, 9999), randWhole(1000, 9999)]);\r\n\r\n    } if (userSelection['5 digit numbers']){\r\n        numArray.push([randWhole(100, 99999), randWhole(10000, 99999), randWhole(10000, 99999)]);\r\n\r\n    } if (userSelection['6 digit numbers']){\r\n        numArray.push([randWhole(1000, 999999), randWhole(100000, 999999),randWhole(100000, 999999)]);\r\n\r\n    } if (userSelection['7 digit numbers']) {\r\n        numArray.push([randWhole(10000, 9999999), randWhole(1000000, 9999999),randWhole(1000000, 9999999)]);\r\n    }\r\n    var numList = shuffleArray(numArray)[0].sort((a,b) => a-b)\r\n\r\nreturn {numberS:numList[0], numberM: numList[1], numberL: numList[2]}\r\n}  \r\nvar addWord = ['altogether', 'in total', 'combined']\r\n\r\nexport const addAlg = (userSelection) => {\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n    var answer = numberL+numberS\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS) \r\n    wrong.push()\r\n    wrong = shuffleArray(wrong)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    if (userSelection.probStyle==='Vertical') {\r\n        var prob = verticalAlign(numberL.toLocaleString(), '+', numberS.toLocaleString()) \r\n    } else {\r\n        prob =`${numberL.toLocaleString()} + ${numberS.toLocaleString()} = `\r\n    }\r\n    var problem = {text: prob,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n\r\nexport const subAlg = (userSelection) => {\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n    var answer = numberL-numberS\r\n    var wrong= wrongOptions(answer, 'sub', numberS, numberL,)\r\n        wrong.push()\r\n    wrong = shuffleArray(wrong)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    if (userSelection.probStyle==='Vertical') {\r\n        var prob = verticalAlign(numberL.toLocaleString(), '-  ', numberS.toLocaleString()) \r\n    } else {\r\n        prob =`${numberL.toLocaleString()} - ${numberS.toLocaleString()} = `\r\n    }\r\n    var problem = {text: prob,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n\r\n    return problem\r\n}\r\n\r\nexport const subWhole = (userSelection) => { //sport\r\n    var name = shuffleArray(nameList)\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n\r\n    if (numberL < 100) {\r\n        var time = 'yesterday'\r\n    } else if (numberL <1000) {\r\n        time = 'last week'\r\n    } else if (numberL < 10000) {\r\n        time = 'last year'\r\n    } else if (numberL > 9999) {\r\n        time = 'total'\r\n    }\r\n    var answer= (numberL - numberS);\r\n    var wrong = shuffleArray(wrongOptions(answer, 'sub', numberL, numberS))\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${name[0]} played ${sport} for ${numberS.toLocaleString()} minutes ${time}. ${name[1]} ` +\r\n    `played ${sport} for ${numberL.toLocaleString()} minutes ${time}. How many more minutes did `+\r\n    `${name[1]} play than ${name[0]}?`)\r\n    var prob2 = (`${name[0]} played ${sport} for ${numberS.toLocaleString()} minutes ${time}. ${name[1]} `+\r\n    `played ${sport} for ${numberL.toLocaleString()} minutes ${time}. What is the difference between ` +\r\n    `the number of minutes ${name[1]} played and the number of minutes ${name[0]} played?`)\r\n    var prob3 = (`${name[0]} loves ${sport} and watched ${numberS.toLocaleString()} minutes ${time}. ${name[1]} `+\r\n    `also likes ${sport} and has watched ${numberL.toLocaleString()} minutes ${time}. What is the difference between ` +\r\n    `the number of minutes ${name[1]} and ${name[0]} watched ${sport}?`)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n\r\n}\r\nexport const addWhole = (userSelection) => { //sports \r\n    var name = shuffleArray(nameList)\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    var addWord = shuffleArray(['total','altogether'])[0]\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n\r\n    if (numberL < 100) {\r\n        var time = 'yesterday'\r\n    } else if (numberL <1000) {\r\n        time = 'last week'\r\n    } else if (numberL < 10000) {\r\n        time = 'last year'\r\n    } else if (numberL > 9999) {\r\n        time = 'total'\r\n    }\r\n\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${name[0]} loves playing ${sport} with ${name[1]}. He played ${(numberL).toLocaleString()} `+\r\n        `minutes ${time}. ${name[1]} played ${sport} for ${(numberS).toLocaleString()} minutes `+\r\n        `more than ${name[0]} ${time}. How many minutes did ${name[1]} play ${time}?`)\r\n    var prob2 = (`${name[0]} played ${sport} for ${(numberS).toLocaleString()} minutes ${time}. `+\r\n        `${name[1]} played ${sport} for ${(numberL).toLocaleString()} minutes ${time}. How many minutes did ` +\r\n        `${name[0]} and ${name[1]} play ${addWord}?`)\r\n\r\n        // (`${name[0]} loves playing ${sport} with his brother. He played ${(numberL).toLocaleString()} `+\r\n        // `minutes ${time}. His brother ${name[1]} played ${sport} for ${(numberS).toLocaleString()} minutes `+\r\n        // `more than ${name[0]} ${time}. How many minutes did ${name[0]} and ${name[1]} play altogether?`) // good for multi-step \r\n        var randProb = shuffleArray([prob1, prob2])[0]\r\n        var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer,\r\n        }\r\n\r\n    return problem        \r\n}\r\nexport const subWhole2 = (userSelection) => { //candy\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var disaster = disasterList[randWhole(0, disasterList.length-1)]\r\n    var girl = shuffleArray(girlList)\r\n    var boy = shuffleArray(boyList)\r\n\r\n    var candy = shuffleArray(candyList)\r\n    var {numberS, numberM, numberL} = asNumbers(userSelection)\r\n\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(`In a jar there are three different types of candies. There are ${numberS.toLocaleString()} ${candy[0]} `+\r\n        `, ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. What is the difference between `+ \r\n        `the number of ${candy[0]} and the number of ${candy[2]} in the jar?`)\r\n    probArray.push(`${name} has a basket of candies. There are ${numberS} ${candy[0]}, `+\r\n        `${numberS.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. How many more `+\r\n        `${candy[2]} are in the basket than ${candy[0]} ?`)\r\n    probArray.push(`${girl[0]} loves ${candy[0]} so much that she ate ${numberS.toLocaleString()} in the past month. `+\r\n        `This brought her total number of ${candy[0]} eaten in her life to ${numberL.toLocaleString()}. How much was `+\r\n        `her total ${candy[0]} eaten before this past month?`)\r\n    probArray.push(`${boy[0]} is obsessed with ${candy[0]} so he decides to stock up in case of a ${disaster} coming soon.`+\r\n        `He buys ${numberL.toLocaleString()} ${candy[0]} but then on the way home he got really hungry so he ate `+\r\n        `${numberS.toLocaleString()} of the ${candy[0]}. How many ${candy[0]} does he have now?`)\r\n    probArray.push(`${boy[0]} is obsessed with ${candy[0]} so he decides to stock up by purchasing ${numberL.toLocaleString()} in case of `+\r\n        `a ${disaster} coming soon. He decided that he had way too many and ended up giving ${numberS.toLocaleString()} of the ${candy[0]} `+\r\n        `to his friend ${boy[1]}. How many ${candy[0]} does he have left?`)\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    return problem\r\n            \r\n\r\n\r\n}\r\nexport const addWhole2 = (userSelection) => { //candy\r\n    var name = shuffleArray(nameList)\r\n    var girl = shuffleArray(girlList)\r\n    var boy = shuffleArray(boyList)\r\n    var disaster = disasterList[randWhole(0, disasterList.length-1)]\r\n\r\n    var candy = shuffleArray(candyList)\r\n    var {numberS, numberM, numberL} = asNumbers(userSelection)\r\n\r\n\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(`There are three different types of candies in a jar. There are ${numberS.toLocaleString()} ${candy[0]}`+\r\n    `, ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. How many total ${candy[0]} and ${candy[2]} are in the jar?`)\r\n    probArray.push(`${name[0]} has a jar with three different types of candies inside. There are ${numberS.toLocaleString()} `+\r\n    `${candy[0]},  ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. `+\r\n    ` How many ${candy[2]} and ${candy[1]} are in the jar altogether?`)\r\n    probArray.push(`${girl[0]} loves ${candy[0]} so much that she has already eaten ${numberL.toLocaleString()} in her life. `+\r\n    `If she eats ${numberS.toLocaleString()} more by the end of the year, how many total ${candy[0]} will she have eaten?`)\r\n    probArray.push(`${boy[0]} is obsessed with ${candy[0]} so he already has ${numberS.toLocaleString()} in his pantry at home. `+\r\n    `He begins to worry about a ${disaster} coming soon, so he decides `+\r\n    `to stock up by purchasing ${numberL.toLocaleString()} ${candy[0]} just in case. How many ${candy[0]} does he have now?`)\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem        \r\n}\r\n\r\nexport const subWhole3 = (userSelection) => { //animals\r\n    var randForestAnimal = shuffleArray(forestAnimal)\r\n    var randDesertAnimal = shuffleArray(desertAnimal)\r\n    var randLakeAnimal = shuffleArray(lakeAnimal)\r\n    var randAnimal = shuffleArray([randDesertAnimal, randForestAnimal, randLakeAnimal])\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n\r\n\r\n    var place\r\n    if (randAnimal[0] === randDesertAnimal) {\r\n        place = 'desert'\r\n    }else if (randAnimal[0] === randForestAnimal) {\r\n        place = 'forest'\r\n    }else if (randAnimal[0] === randLakeAnimal) {\r\n        place = 'lake'\r\n    }\r\n \r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(`There are ${numberL.toLocaleString()} ${randAnimal[0][0]}s and ${randAnimal[0][1]}s in the `+\r\n        `${place}. If there are ${numberS.toLocaleString()} ${randAnimal[0][0]}s in the ${place}, `+\r\n        `how many ${randAnimal[0][1]}s are in the ${place}?`)\r\n    probArray.push(`In the ${place} there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s and `+\r\n        `${numberL.toLocaleString()} ${randAnimal[0][0]}s. What is the difference beween the number of `+\r\n        `${randAnimal[0][0]}s and ${randAnimal[0][1]}s in the ${place}?`)\r\n    probArray.push(`Researchers are surveying the ${place}. They found a total of ${numberL.toLocaleString()} `+ \r\n        `${randAnimal[0][1]}s, and a total of ${numberS.toLocaleString()} ${randAnimal[0][0]}s. How many more `+\r\n        `${randAnimal[0][1]}s are there in the ${place} than ${randAnimal[0][0]}s?`)\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n\r\n            \r\n}\r\nexport const addWhole3 = (userSelection) => { //animals\r\n    var randForestAnimal = shuffleArray(forestAnimal)\r\n    var randDesertAnimal = shuffleArray(desertAnimal)\r\n    var randLakeAnimal = shuffleArray(lakeAnimal)\r\n    var randAnimal = shuffleArray([randDesertAnimal, randForestAnimal, randLakeAnimal])\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n\r\n    var place\r\n    if (randAnimal[0] === randDesertAnimal) {\r\n        place = 'desert'\r\n    }else if (randAnimal[0] === randForestAnimal) {\r\n        place = 'forest'\r\n    }else if (randAnimal[0] === randLakeAnimal) {\r\n        place = 'lake'\r\n    }\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(`There are ${numberL.toLocaleString()} ${randAnimal[0][0]}s in the ${place}. If there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s `+\r\n        `in the ${place} , how many total ${randAnimal[0][0]}s and ${randAnimal[0][1]} are in the ${place}?`)\r\n    probArray.push(`In the ${place} there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s and ${numberL.toLocaleString()} ${randAnimal[0][0]}s. `+ \r\n        `How m any ${randAnimal[0][0]}s and ${randAnimal[0][1]}s are in the ${place} ${addWord}?`)\r\n    probArray.push(`Researchers are surveying the ${place}. They found a total of ${numberL.toLocaleString()} `+\r\n        `${randAnimal[0][1]}s, and a total of ${numberS.toLocaleString()} ${randAnimal[0][0]}s. How many animals did the researchers `+\r\n        `find at the ${place} ${addWord}?`)\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    return problem\r\n\r\n            \r\n}\r\n\r\n\r\nexport const addWhole4 = (userSelection) => { //youtube\r\n    var boy = shuffleArray(boyList)\r\n    var girl = shuffleArray(girlList)\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n\r\n\r\n    var videoAdj = ['hilarious', 'funny', 'silly', 'popular', 'viral'][randWhole(0,4)]\r\n    var videoTopic = ['dog', 'fashion', 'cat', 'music', 'tutorial', 'cooking' ][randWhole(0,6)]\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n\r\n    probArray.push(`${boy[0]} had ${numberL.toLocaleString()} subscribers on his youtube channel as of last month. This month so far he has gained `+\r\n                `${numberS.toLocaleString()} subscribers after making a ${videoAdj} video. How many subscribers does his channel have?`)\r\n    probArray.push(`${girl[0]} had ${numberL.toLocaleString()} subscribers on her youtube channel as of last month. This month her subscriber count has increased by `+\r\n                `${numberS.toLocaleString()} after she made a very popular ${videoTopic} video. How many subscribers does her channel have now?`)\r\n    probArray.push(`${boy[0]} got ${numberL.toLocaleString()} views on his latest ${videoTopic} video. His previous video got ${numberS.toLocaleString()} views. How `+\r\n                `many combined views did the two videos get?`)\r\n    probArray.push(`${girl[0]} currently has ${numberS.toLocaleString()} subscribers on her channel. Her goal is to reach ${numberL.toLocaleString()} subscribers by `+\r\n                `the end of the year. How many more subscribers will she need to get in order to reach her goal?`)\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole4 = (userSelection) => { //youtube\r\n    var boy = shuffleArray(boyList)\r\n    var girl = shuffleArray(girlList)\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n\r\n    var reason = [`hasn't been making new videos`, `hasn't been actively making videos`, \r\n                `has been inactive recently`, `made a video that the subscribers did not like`][randWhole(0,3)]\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n\r\n    probArray.push(`${boy[0]} had ${numberL.toLocaleString()} subscribers on his youtube channel as of last month. This month so far he has lost `+\r\n                `${numberS.toLocaleString()} subscribers because he ${reason}. How many subscribers does his channel have now?`)\r\n    probArray.push(`${girl[0]} had ${numberL.toLocaleString()} subscribers on her youtube channel as of last month. This month she has lost `+\r\n                `${numberS.toLocaleString()} subscribers because she ${reason}. How many subscribers does her channel have?`)\r\n    probArray.push(`${boy[0]} got ${numberL.toLocaleString()} views on his latest video. His previous video got ${numberS.toLocaleString()} views. How `+\r\n                `many more views did his latest video get than his previous video?`)\r\n    probArray.push(`${girl[0]} got ${numberS.toLocaleString()} views on her latest video. Her other video went viral last week and got ${numberL.toLocaleString()} views. How `+\r\n                `many more views did her viral video get than her latest video?`)\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem        \r\n}\r\nexport const addWhole7dig = (userSelection) => { //population\r\n    var city = shuffleArray(cityList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), city[1].pop, city[0].pop];\r\n    if (userSelection === \"2\") {\r\n        [numberS, numberM, numberL] = [randWhole(100000, 300000), randWhole(300000, 500000), city[0].pop];\r\n    \r\n        }\r\n    var year = randWhole(2015,2019)\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n\r\n    probArray.push(`${city[0].city} had a population of ${numberL.toLocaleString()} as of the end of the year ${year}. Since `+\r\n                `then the city has increased in population by ${numberS.toLocaleString()}. What is the current population of ${city[0].city}?`)\r\n    probArray.push(`The population of ${city[0].city} has increased by ${numberS.toLocaleString()} since the end of the year ${year}. `+\r\n                `the population before then was ${numberL.toLocaleString()}. What is the new population of ${city[0].city}?`)\r\n    probArray.push(`Since the beginning of the year ${year} the population of ${city[0].city} has increased by ${numberS.toLocaleString()}. `+\r\n                `If the population started off ${year} at ${numberL.toLocaleString()}, how much is the current population?`)\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem        \r\n}\r\n\r\nexport const subWhole7dig = (userSelection) => { //population\r\n    var city = shuffleArray(cityList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), city[1].pop, city[0].pop];\r\n    if (userSelection === \"2\") {\r\n        [numberS, numberM, numberL] = [randWhole(100000, 300000), randWhole(300000, 500000), city[0].pop];\r\n    \r\n        }\r\n    var year = randWhole(2015,2019)\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n\r\n    probArray.push(`${city[0].city} had a population of ${numberL.toLocaleString()} as of the end of the year ${year}. Since `+\r\n                `then the city has decreased in population by ${numberS.toLocaleString()}. What is the current population of ${city[0].city}?`)\r\n    probArray.push(`The population of ${city[0].city} has decreased by ${numberS.toLocaleString()} since the end of the year ${year}. `+\r\n                `the population before then was ${numberL.toLocaleString()}. What is the new population of ${city[0].city}`)\r\n    probArray.push(`Since the beginning of the year ${year} the population of ${city[0].city} has decreased by ${numberS.toLocaleString()}. `+\r\n                `If the population started off ${year} at ${numberL.toLocaleString()}, how much is the current population?`)\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nvar badguyList = ['orcs','ogres', 'trolls','goblins', 'undead']\r\nvar goodguyList = ['elves','hobbits','humans']\r\n\r\nexport const subWhole5 = (userSelection) => { //elves and goblins\r\n    var badguys = shuffleArray(badguyList)[0]\r\n    var goodguys = shuffleArray(goodguyList)[0]\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    if (numberL > 99) {\r\n        probArray.push(`An army of ${numberS} ${goodguys} had to defeat an army of ${numberL} ${badguys} `+\r\n        `that were trying to invade their city. How many more ${badguys} were there than ${goodguys}?`)\r\n       probArray.push(`An army of ${numberL} ${badguys} were trying to invade a city of ${numberS} ${goodguys} ` +\r\n               `How many more ${badguys} were there than ${goodguys}?`)\r\n       probArray.push(`An army of ${numberL} ${badguys} were trying to invade a city of ${numberS} ${goodguys}. ` +\r\n               `How many more ${badguys} were there than ${goodguys}?`\r\n       )\r\n    } else {\r\n        probArray.push(`A group of ${numberL} ${badguys} stumbled upon on a group of ${numberS} ${goodguys} ` +\r\n        `at their campsite. How many more ${badguys} were there than ${goodguys}?`)\r\n        probArray.push(`While walking through the forest a group of ${numberS} ${goodguys} found a group of ` +\r\n        `${numberL} ${badguys}. How many more ${badguys} were there than ${goodguys}?`)\r\n    }\r\n    // multi-step = two armies combined against orcs\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem        \r\n}\r\nexport const addWhole5 = (userSelection) => { //elves and goblins \r\n    var badguys = shuffleArray(badguyList)[0]\r\n    var goodguys = shuffleArray(goodguyList)\r\n    var {numberS, numberL} = asNumbers(userSelection)\r\n\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    if (numberL > 99) {\r\n        probArray.push(`An army of ${numberL} ${goodguys[0]} and ${numberS} ${goodguys[1]} had to defeat an army of ${badguys} `+\r\n        `that were trying to invade their city. How many ${goodguys[0]} and ${goodguys[1]} were there ${addWord}?`)\r\n       probArray.push(`An army of ${badguys} were trying to invade a city of ${numberS} ${goodguys[0]} ` +\r\n               `and ${numberL} ${goodguys[1]}. How many ${goodguys[0]} and ${goodguys[1]} were there ${addWord} in the forest?`)\r\n    } else {\r\n        probArray.push(`A group of ${badguys} stumbled upon on a group of ${numberL} ${goodguys[0]} ` +\r\n        `and ${numberS} ${goodguys[1]} at their campsite. How many ${goodguys[0]} and ${goodguys[1]} were there ${addWord}?`)\r\n        probArray.push(`While walking through the forest a group of ${numberS} ${goodguys[0]} found a group of ` +\r\n        `${numberL} ${goodguys[1]}. How many ${goodguys[0]} and ${goodguys[1]} were there ${addWord} in the forest?`)\r\n    }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n//Problem ideas: space distance? elves army of goblins, factory producing products, movies making money, tourists that visit a city/country, city = smaller numbers, country = larger. \r\n// pts in a video\r\n\r\n\r\n\r\n\r\nexport const addDec = (userSelection) => { //sport\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    var [numberS, numberL] = [(Math.random()*49999+10011).toFixed(1),  (Math.random()*999999+500011).toFixed(2)];\r\n    // var f = 'format'\r\n    var answer= (numberL + numberS);\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var wrong = gen.shuffleArray(gen.wrongOptions(answer, 'add', numberL, numberS))\r\n    // var tempAC = [answer, wrong[0], wrong[1], wrong[2]]\r\n    // var AC = gen.shuffleArray(tempAC)\r\n    var randProb \r\n    var problem = { text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n\r\n    return problem\r\n    \r\n}\r\n\r\nexport const subDec = (userSelection) => { //sport\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    // var f = 'format'\r\n    var [numberS, numberL] = [(Math.random()*49999+10011).toFixed(1),  (Math.random()*999999+500011).toFixed(2)];\r\n\r\n    var answer= (numberL - numberS);\r\n    var wrong = shuffleArray(wrongOptions(answer, 'sub', numberL, numberS))\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var sub1 = (`${name[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${name[1]} `+\r\n    `played ${sport} for ${(numberL).toString()} minutes last month. How many more minutes did `+\r\n     `${name[1]} play than ${name[0]}?`)\r\n    var sub2 = (`${name[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${name[1]} `+\r\n     `played ${sport} for ${(numberL).toString()} minutes last month. What is the difference between `+\r\n    `the number of minutes ${name[1]} played and the number of minutes ${name[0]} played?`)\r\n\r\n    var randProb = shuffleArray([sub1, sub2])[0]\r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer: answer}\r\n    return problem\r\n}\r\nexport const randAddWhole = (userSelection) => {\r\n    var probArray = []\r\n    if (userSelection['Algorithm']) {\r\n        probArray.push(addAlg,addAlg,addAlg, addAlg, addAlg, addAlg)\r\n    } if (userSelection['Application']) {\r\n        if (userSelection['7 digit number']){\r\n            probArray.push(addWhole7dig)\r\n        }\r\n        probArray.push(addWhole, addWhole2, addWhole3, addWhole4,addWhole5)\r\n    }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}\r\nexport const randSubWhole = (userSelection) => {\r\n    var probArray = []\r\n    if (userSelection['Algorithm']) {\r\n        probArray.push(subAlg, subAlg, subAlg, subAlg, subAlg, subAlg, subAlg)\r\n    } if (userSelection['Application']) {\r\n        if (userSelection['7 digit numbers']){\r\n            probArray.push(subWhole7dig)\r\n        }\r\n        probArray.push(subWhole, subWhole2, subWhole3, subWhole4, subWhole5 )\r\n    }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\add-sub-dec.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\multiply-dec.js",["307","308"],"import {randWhole, decPV, randDec, shuffleArray, wrongOptions, answerChoicesKey} from './general'\r\nimport * as g from './general'\r\nimport {verticalAlign} from './vertical-align'\r\nimport {StyleSheet} from \"@react-pdf/renderer\";\r\n//   const styles = StyleSheet.create({\r\n//     top: {\r\n//       marginBottom:10,\r\n//       fontSize: 12,\r\n\r\n//       // fontFamily: 'arial'\r\n//     },\r\n//     probContainer: {\r\n//         display:'flex',\r\n//         flexDirection:'column',\r\n//         justifyContent: 'flexEnd',\r\n//         backgroundColor: 'blue',\r\n//       },\r\n//     bottom: {\r\n//         marginBottom:10,\r\n//         fontSize: 12,\r\n//         backgroundColor: 'yellow',\r\n//         // fontFamily: 'arial'\r\n//       },\r\n\r\n//   });\r\n\r\nexport const multNumbers = (userSelection) =>{\r\n    var numArray = []\r\n    if (userSelection['Decimal x Whole Number']) {\r\n        numArray.push(\r\n            [randWhole(2, 9), randDec(0.1, 0.9, 1)],\r\n            [randWhole(2, 9), randDec(0.1, 0.9, 2)],\r\n            [randWhole(2, 9), randDec(1, 9, 1)],\r\n            [randWhole(2, 9), randDec(1, 9, 2)],\r\n            [randWhole(2, 9), randDec(10,99, 1)]\r\n        )\r\n    } if (userSelection['3 by 1 digit']) {\r\n        var randDecimal = [randDec(10, 99, 1), randDec(2,9,2), randDec(0.2, 0.999, 3)][randWhole(0,2)]\r\n        numArray.push(\r\n            [randWhole(2, 9), randDecimal],\r\n            [randDec(0.2, 0.9, 1), randDecimal],\r\n            [randDec(0.2, 0.9, 1), randDecimal],\r\n            [randDec(0.2, 0.9, 1), randWhole(100,999) ],\r\n            [randDec(0.02, 0.09, 2), randDecimal],\r\n            [randDec(0.02, 0.09, 2), randWhole(100,999) ]\r\n        )\r\n    } if (userSelection['4 by 1 digit']) {\r\n        randDecimal = [randDec(100, 999, 1), randDec(20,99,2), randDec(2, 9, 3), randDec(0.2, 0.9999, 4)][randWhole(0,3)]\r\n        numArray.push(\r\n            [randWhole(2, 9), randDecimal],\r\n            [randDec(0.2,0.9, 1), randWhole(1000,9999)],\r\n            [randDec(0.2,0.9,1), randDecimal],\r\n            [randDec(0.02,0.09,2), randDecimal],\r\n            [randDec(0.02,0.09,2), randWhole(1000,9999)]\r\n        )\r\n    } if (userSelection['2 by 2 digit']) {\r\n        randDecimal = [randDec(1, 9, 1), randDec(0.2,0.99,2)][randWhole(0,1)]\r\n        var randDecimal2 = [randDec(1, 9, 1), randDec(0.2,0.99,2)][randWhole(0,1)]\r\n\r\n        numArray.push(\r\n            [randWhole(11, 99), randDecimal],\r\n            [randWhole(11, 99), randDecimal],\r\n            [randDecimal, randDecimal2],\r\n            [randDecimal, randDecimal2],\r\n            [randDec(1, 9, 1), randDec(0.2,0.99,2)],\r\n            [randDec(1, 9, 1), randDec(0.2,0.99,2)]\r\n\r\n        )\r\n    } if (userSelection['3 by 2 digit']) {\r\n        var randDecimal3 = [randDec(10, 99, 1), randDec(2,9,2), randDec(0.2, 0.999, 3)][randWhole(0,2)]\r\n        var randDecimal2 = [randDec(1, 9, 1), randDec(0.2,0.99,2)][randWhole(0,1)]\r\n        numArray.push(\r\n            [randWhole(11, 99), randDecimal3],\r\n            [randDecimal2, randWhole(100,999)],\r\n            [randDecimal2, randDecimal3],\r\n            [randDecimal2, randDecimal3],\r\n            [randDecimal2, randDecimal3]\r\n\r\n        )\r\n    }\r\n    var num = shuffleArray(numArray)[0]\r\n        // var [num1pv, num2pv] = [decPV(num[0]), decPV(num[1])] \r\n    return {numberS:Math.min(...num), numberM:randWhole(9,100), numberL:Math.max(...num)}\r\n}\r\n\r\nexport const multDecAlg = (userSelection) => {\r\n    var {numberS, numberL} = multNumbers(userSelection)\r\n    var multPV = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(multPV))\r\n    var firstNum = numberL.length>numberS.length? numberL:numberS\r\n    var secondNum = numberS.length>numberL.length? numberS:numberL\r\n    if (userSelection.probStyle==='Horizontal') {\r\n        var prob = `${numberL} × ${numberS} = `\r\n    } else{\r\n        prob = verticalAlign(firstNum, '×', secondNum) \r\n    }\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, multPV)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {text: prob,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n\r\nexport const multDecBasic = (userSelection) => {\r\n    var {numberS, numberL} = multNumbers(userSelection)\r\n    var multPV = decPV(numberS)+decPV(numberL)\r\n    var answer = Number((numberL*numberS).toFixed(multPV))\r\n\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, multPV)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(`What is the product of ${numberL} and ${numberS}?`)\r\n    probArray.push(`What is the product of ${numberS} and ${numberL}?`)\r\n    probArray.push(`What is ${numberS} times as much as ${numberL}?`)\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\nexport const multDec = (userSelection) => {\r\n    var girl = shuffleArray(g.girlList)[0]\r\n    var boy = shuffleArray(g.boyList)[0]\r\n    \r\n    var pet = shuffleArray(g.bigPetList)[0]\r\n\r\n    if (userSelection['4 by 1 digit']) {\r\n        var [numberS, numberL] = [randDec(0.2, 0.9, 1), randDec(10,50, 2)]\r\n    } else if (userSelection['3 by 1 digit']) {\r\n        [numberS, numberL] = [randDec(0.2, 0.9, 1), randDec(10,50, 1)]\r\n    } else if (userSelection['2 by 2 digit']) {\r\n        [numberS, numberL] = [randDec(2, 5, 1), randDec(1,3, 1)]\r\n        pet = shuffleArray(g.smallPetList)[0]\r\n    } else if (userSelection['3 by 2 digit']) {\r\n        [numberS, numberL] = [randDec(2, 4, 1), randDec(1, 5, 2)]\r\n        pet = shuffleArray(g.smallPetList)[0]\r\n    }\r\n    var pv = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(pv))\r\n\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, pv)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(`${girl}'s ${pet} weighs ${numberL} pounds. ${boy}'s ${pet} weighs ${numberS} `+   \r\n    ` times as much as ${girl}'s ${pet}. What does ${boy}'s ${pet} weigh in pounds?`)\r\n    // probArray.push(``)\r\n    // probArray.push(``)\r\n\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n\r\n\r\n\r\nexport const multDec2 = (userSelection) => {\r\n    var woman = shuffleArray(g.womanList)[0]\r\n    var pet = shuffleArray(g.smallPetList)[0]\r\n    if (userSelection['4 by 1 digit']) {\r\n        var [numberS, numberL] = [randWhole(2,9), randDec(10,50,2)]\r\n        var time = {s:'month', p:'months'}\r\n    } else if (userSelection['3 by 1 digit']){\r\n        [numberS, numberL] = [randWhole(2, 9), randDec(1, 5,2)]\r\n        time = {s:'week', p:'weeks'}\r\n    } else if (userSelection['2 by 2 digit']){\r\n        [numberS, numberL] = [randWhole(12, 99), randDec(0.20, 0.75,2)]\r\n        time = {s:'day', p:'days'}\r\n    } else if (userSelection['3 by 2 digit']){\r\n        [numberS, numberL] = [randWhole(100, 999), randDec(0.20, 0.75,2)]\r\n        time = {s:'day', p:'days'}\r\n    }\r\n    var pv = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(pv))\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, pv)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var probArray = []\r\n    probArray.push(`It costs ${woman} $${numberL} to buy food for her ${pet}s each ${time.s}. How much `+\r\n    `does it cost her for ${numberS} ${time.p} of ${pet} food?`)\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n\r\n\r\nexport const multDec3 = (userSelection) => {\r\n    var tour = shuffleArray(g.tourList)[0]\r\n    if (userSelection['4 by 1 digit']) {\r\n        var [numberS, numberL] = [randWhole(2,6), randDec(15,50,2)]\r\n        \r\n    } if (userSelection['3 by 1 digit']) {\r\n        [numberS, numberL] = [randWhole(2,6), randDec(7,9,2)]\r\n            \r\n    } if (userSelection['2 by 2 digit']) {\r\n        [numberS, numberL] = [randDec(2,6,1), randWhole(12,50)]\r\n                \r\n    } if (userSelection['3 by 2 digit']) {\r\n        [numberS, numberL] = [randDec(2,4,1), randWhole(100,200)] \r\n        }\r\n    var pv = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(pv))\r\n\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, pv)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var probArray = []\r\n    probArray.push(`The ${tour} tour costs $${numberL} for each hour. How much does it cost `+\r\n    `for a ${numberS} hour tour?`)\r\n    // probArray.push(``)\r\n    // probArray.push(``)\r\n\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n\r\n                   \r\n\r\n\r\n\r\n\r\nexport const multDec4 = (userSelection) => {\r\n    var disaster = shuffleArray(g.disasterList)[0]\r\n    var boy = shuffleArray(g.boyList)[0]\r\n    if (userSelection['4 by 1 digit']) {\r\n        var [numberS, numberL] = [randDec(10, 15, 2), randWhole(5, 9), ]\r\n        var food = shuffleArray(['chicken','pecans','peanut butter','popscicles','chocolate','pasta'])[0]\r\n    \r\n    } if (userSelection['3 by 1 digit']) {\r\n        [numberS, numberL] = [randDec(1,5,2),randWhole(5,9)]\r\n        food = shuffleArray(g.disasterFoodList)[0]\r\n            \r\n    } if (userSelection['2 by 2 digit']) {\r\n        [numberS, numberL] = [randDec(0.2,0.99,2), randWhole(12,99)]\r\n        food = shuffleArray(['ramen','beans','bananas','popscicles','chocolate','pasta'])[0]\r\n    } if (userSelection['3 by 2 digit']) {\r\n        [numberS, numberL] = [randDec(0.2,0.99,2), randWhole(100, 400)] \r\n        food = shuffleArray(['ramen','beans','bananas','popscicles','chocolate','pasta'])[0]\r\n\r\n        }\r\n    var pv = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(pv))\r\n\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, pv)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var probArray = []\r\n    probArray.push(`${boy} is preparing for a ${disaster}. He wants to buy a lot of ${food} so that he does `+\r\n    `not run out. Each package of ${food} costs $${numberS}. How much would it cost him to buy `+\r\n    `${numberL} packages of ${food}?`)\r\n    // probArray.push(``)\r\n    // probArray.push(``)\r\n\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n                   \r\n\r\n\r\nexport const multDec5 = (userSelection) => {\r\n    if (userSelection['']) {\r\n        \r\n    }\r\n    var [numberS, numberL] = []\r\n    var pv = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(pv))\r\n\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, pv)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(``)\r\n    probArray.push(``)\r\n    probArray.push(``)\r\n\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n\r\n\r\n                //    '{randGirl} worked {Decimal} hours this week at her job working as a {randJob}. She earns $'\r\n                //    f'{Decimal2} per hour. How much money did she earn this week?\r\n\r\n\r\nexport const multDec6 = (userSelection) => {\r\n\r\n    if (userSelection['']) {\r\n        \r\n    }\r\n    var [numberS, numberL] = []\r\n    var pv = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(pv))\r\n\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, pv)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(``)\r\n    probArray.push(``)\r\n    probArray.push(``)\r\n\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n\r\n\r\n            //        f'One ounce of {randCan}  has {Decimal} grams of protein. How many grams of protein are in {Decimal2}'\r\n            //    f'ounce can of {randCan}?')\r\nexport const multDec7 = (userSelection) => {\r\n\r\n    if (userSelection['']) {\r\n        \r\n    }\r\n    var [numberS, numberL] = []\r\n    var pv = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(pv))\r\n\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, pv)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var probArray = []\r\n    probArray.push(``)\r\n    probArray.push(``)\r\n    probArray.push(``)\r\n\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n\r\n// (f'{randBoy} needs to buy {Number1} {randItemsExp}s. Each {randItemsExp} costs ${Decimal}. How much'\r\n//                    f' would {randBoy} spend to buy {Number1} {randItemsExp}?\r\nexport const multDec8 = (userSelection) => {\r\n\r\n    if (userSelection['']) {\r\n        \r\n    }\r\n    var [numberS, numberL] = []\r\n    var pv = decPV(numberS)+decPV(numberL)\r\n\r\n    var answer = Number((numberL*numberS).toFixed(pv))\r\n\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS, pv)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2],)\r\n    var probArray = []\r\n    probArray.push(``)\r\n    probArray.push(``)\r\n    probArray.push(``)\r\n\r\n\r\n    var randProb = shuffleArray(probArray)[0]    \r\n    var problem = {text: randProb,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\n            //    It costs ${whole} for a flight to {randCountry[0]}. A flight to {randCountry[1]} costs {Decimal} times'\r\n            //    f'as much as the flight to {randCountry[0]}. How much does the flight to {randCountry[1]} cost?'\r\n\r\n\r\n\r\nexport const randMultDec = (userSelection) => {\r\n    var probArray = []\r\n    if (userSelection['Algorithm']){\r\n        probArray.push(multDecAlg, multDecAlg, multDecAlg, multDecAlg, multDecAlg)\r\n    } if (userSelection['Application']){\r\n        probArray.push(multDecBasic, multDec, multDec2, multDec3, multDec4)\r\n    }\r\n\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\tables.js",["309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333"],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\add-sub-fract.js",["334","335","336","337","338"],"import {randWhole, shuffleArray} from './general.js'\r\nimport {cell_style_fraction, tstyles, horizontalFractions, verticalFractions } from './fract-shared'\r\nimport './problems.css';\r\nimport Table from './Table.js'\r\nimport {Text,View,StyleSheet,} from \"@react-pdf/renderer\";\r\n  const { create, all } = require('mathjs')\r\nconst config = {\r\n// Default type of number\r\n// Available options: 'number' (default), 'BigNumber', or 'Fraction'\r\n    number: 'Fraction'\r\n}\r\nconst math = create(all, config)\r\n\r\nexport const fractionNumbers = (userSelection) => {\r\n    var numerator1 = randWhole(1,8)\r\n    var denominator1 = randWhole(numerator1+1,10)\r\n    var numden2 = []\r\n    if (userSelection['Common Denominators']) {\r\n      var numerator2 = randWhole(1, denominator1-1)\r\n      numden2.push([numerator2,denominator1])\r\n    }\r\n    if (userSelection['Uncommon Denominators']) {\r\n      if (denominator1 > 5) {\r\n          var denominator2 = denominator1-randWhole(1,4)\r\n      } else if (denominator1 === 5) {\r\n          denominator2 = denominator1-randWhole(1,3)\r\n      } else {\r\n        denominator2 = denominator1+randWhole(1, 5)\r\n      }\r\n      numerator2 = randWhole(1, denominator2-1)\r\n      numden2.push([numerator2,denominator2])\r\n    }\r\n    [numerator2, denominator2] = shuffleArray(numden2)[0]\r\n\r\n  return [numerator1, denominator1, numerator2, denominator2]      \r\n}\r\n\r\nexport const addFract = (userSelection) => {\r\n    var numberList = fractionNumbers(userSelection)\r\n    var whole = randWhole(1,4)\r\n    var [num1, denom1, num2, denom2] = [numberList[0], numberList[1], numberList[2], numberList[3]]\r\n    var fract1 = math.fraction(`${num1}/${denom1}`)\r\n    var fract2 = math.fraction(`${num2}/${denom2}`)\r\n    var answer = math.format(math.add(fract1, fract2))\r\n\r\n    var styledFract1 = Table([[num1],[denom1]], cell_style_fraction, tstyles)\r\n    var styledFract2 = Table([[num2],[denom2]], cell_style_fraction, tstyles)\r\n    // var mixedNumber1 = Table([['hi', num1],[whole, denom1]], cell_style_mixednumber, tstyles)\r\n\r\n    // var AC = [answer, 'this is wrong', 'this is wrong2', 'this is wrong3']\r\n    // var prob1 = (`${math.format(fract1)}+${math.format(fract2)}`)\r\n    // var prob1 = <View>{styledFract1}<Text>+</Text>{styledFract2}</View>\r\n    if (userSelection.probStyle==='Vertical') {\r\n        var prob1 = verticalFractions(styledFract1, styledFract2, <Text>+</Text>)\r\n    } else {\r\n        var prob1 = horizontalFractions(styledFract1, styledFract2, <Text>+</Text>)\r\n\r\n    }\r\n    // var prob2 = (`${math.format(fract2)}+${math.format(fract1)}`)\r\n    // var randProb = [prob1.toString(), prob2.toString()][randWhole(0,1)]\r\n    \r\n    var problem = {text: prob1,\r\n        answerChoices: ['','','','', answer],\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\nexport const subFract = (userSelection) => {\r\n    var numberList = fractionNumbers(userSelection)\r\n    var whole = randWhole(1,4)\r\n    var [num1, denom1, num2, denom2] = [numberList[0], numberList[1], numberList[2], numberList[3]]\r\n    var fract1 = math.fraction(`${num1}/${denom1}`)\r\n    var fract2 = math.fraction(`${num2}/${denom2}`)\r\n    // var answer = math.format(math.subtract(fract1, fract2))\r\n    // var answer = math.format(math.subtract(fract1, fract2))\r\n    var styledFract1 = Table([[num1],[denom1]], cell_style_fraction, tstyles)\r\n    var styledFract2 = Table([[num2],[denom2]], cell_style_fraction, tstyles)\r\n    console.log(math.compare(math.number(fract1),math.number(fract2)))\r\n    if (math.compare(math.number(fract1),math.number(fract2)) === 1) {\r\n        var answer = math.format(math.subtract(fract1, fract2))\r\n        if (userSelection.probStyle==='Vertical') {\r\n            var prob1 = verticalFractions(styledFract1, styledFract2, <Text>-</Text>)\r\n        } else {\r\n            prob1 = horizontalFractions(styledFract1, styledFract2, <Text>-</Text>)\r\n        }\r\n\r\n    } else {\r\n        answer = math.format(math.subtract(fract2, fract1))\r\n        if (userSelection.probStyle==='Vertical') {\r\n            prob1 = verticalFractions(styledFract2, styledFract1, <Text>-</Text>)\r\n        } else {\r\n            prob1 = horizontalFractions(styledFract2, styledFract1, <Text>-</Text>)\r\n        }\r\n\r\n    }\r\n\r\n    // var prob1 = horizontalFractions(styledFract1, styledFract2, <Text>-</Text>)\r\n   \r\n    var problem = {text: prob1,\r\n        answerChoices: ['','','','', answer],\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const randAddFract = (userSelection) => {\r\n    var probArray = [addFract]\r\n    \r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}\r\n\r\nexport const randSubFract = (userSelection) => {\r\n    var probArray = [subFract]\r\n    \r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}\r\n","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\divide-fract.js",["339","340"],"import {randWhole, shuffleArray} from './general.js'\r\nimport {cell_style_fraction, tstyles, horizontalFractions, divMultFractNumbers } from './fract-shared'\r\n\r\nimport './problems.css';\r\nimport Table from './Table.js'\r\nimport {Text,View,StyleSheet,} from \"@react-pdf/renderer\";\r\n  const { create, all } = require('mathjs')\r\nconst config = {\r\n// Default type of number\r\n// Available options: 'number' (default), 'BigNumber', or 'Fraction'\r\n    number: 'Fraction'\r\n}\r\nconst math = create(all, config)\r\n\r\n\r\n\r\n\r\nexport const divFract = (userSelection) => {\r\n    var {number1, number2} = divMultFractNumbers(userSelection)\r\n    console.log(number1)\r\n    console.log(number2)\r\n    if (Number.isInteger(number1)) {\r\n        var styledNumber1 = <View><Text>{number1}</Text></View>\r\n        number1 = number1\r\n    } else {\r\n        styledNumber1 = Table([[number1.num1],[number1.denom1]], cell_style_fraction, tstyles)\r\n        number1 = math.fraction(`${number1.num1}/${number1.denom1}`)\r\n    }\r\n    var styledNumber2 = Table([[number2.num2],[number2.denom2]], cell_style_fraction, tstyles)\r\n\r\n    number2 = math.fraction(`${number2.num2}/${number2.denom2}`)\r\n    console.log(number2)\r\n\r\n    var prob1 = horizontalFractions(styledNumber1, styledNumber2, <Text>÷</Text>)\r\n    var prob2 = horizontalFractions(styledNumber2, styledNumber1, <Text>÷</Text>)\r\n\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    if (randProb === prob1) {\r\n        if (Number.isInteger(number1)) {\r\n            var answer = math.format(math.number(math.divide(number1, number2)))\r\n        }\r\n        answer = math.format(math.divide(number1, number2))\r\n\r\n    } else {\r\n        answer = math.format(math.divide(number2, number1))\r\n    }\r\n\r\n    var problem = {text: randProb,\r\n        answerChoices: ['','','','', answer],\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const randDivFract = (userSelection) => {\r\n    var probArray = [divFract]\r\n    \r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\multiply-fract.js",["341","342"],"import {randWhole, shuffleArray} from './general.js'\r\nimport {cell_style_fraction, tstyles, horizontalFractions, divMultFractNumbers } from './fract-shared'\r\n\r\nimport './problems.css';\r\nimport Table from './Table.js'\r\nimport {Text,View,StyleSheet,} from \"@react-pdf/renderer\";\r\n  const { create, all } = require('mathjs')\r\nconst config = {\r\n// Default type of number\r\n// Available options: 'number' (default), 'BigNumber', or 'Fraction'\r\n    number: 'Fraction'\r\n}\r\nconst math = create(all, config)\r\n\r\n\r\nexport const multFract = (userSelection) => {\r\n  var {number1, number2} = divMultFractNumbers(userSelection)\r\n  console.log(number1)\r\n  console.log(number2)\r\n  if (Number.isInteger(number1)) {\r\n      var styledNumber1 = <View><Text>{number1}</Text></View>\r\n      number1 = number1\r\n  } else {\r\n      styledNumber1 = Table([[number1.num1],[number1.denom1]], cell_style_fraction, tstyles)\r\n      number1 = math.fraction(`${number1.num1}/${number1.denom1}`)\r\n  }\r\n  var styledNumber2 = Table([[number2.num2],[number2.denom2]], cell_style_fraction, tstyles)\r\n\r\n  number2 = math.fraction(`${number2.num2}/${number2.denom2}`)\r\n  console.log(number2)\r\n  var prob1 = horizontalFractions(styledNumber1, styledNumber2, <Text>×</Text>)\r\n  var prob2 = horizontalFractions(styledNumber2, styledNumber1, <Text>×</Text>)\r\n\r\n  var randProb = [prob1, prob2][randWhole(0,1)]\r\n  var answer = math.format(math.multiply(number1, number2))\r\n\r\n  var problem = {text: randProb,\r\n      answerChoices: ['','','','', answer],\r\n      correctAnswer: answer}\r\n  return problem\r\n}\r\n\r\nexport const randMultFract = (userSelection) => {\r\n  var probArray = [multFract]\r\n  \r\n  var randProb = shuffleArray(probArray)[0]\r\n  return randProb(userSelection)\r\n}","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\divide-dec.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\divide.js",["343"],"import * as g from \"./general\";\r\nimport {randWhole, shuffleArray, answerChoicesKey, wrongOptions, cap} from './general'\r\nimport {verticalDivide} from './vertical-align'\r\n// var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n\r\n\r\nconst divNumbers = (userSelection) => {\r\n    var numArray = []\r\n    if (userSelection['2 by 1 digit']) {\r\n        numArray.push([randWhole(5, 10), randWhole(2, 9)],)\r\n    } if (userSelection['3 by 1 digit']) {\r\n        numArray.push(\r\n            [randWhole(50, 99), randWhole(2, 9)],\r\n            [randWhole(25, 50), randWhole(5, 9)],\r\n            [randWhole(101, 166), randWhole(2, 6)],\r\n            [randWhole(166, 249), randWhole(2, 4)],\r\n        )\r\n    } if (userSelection['4 by 1 digit']) {\r\n        numArray.push(\r\n            [randWhole(500, 999), randWhole(2, 9)],\r\n            [randWhole(250, 500), randWhole(4, 9)],\r\n            [randWhole(1000, 1660), randWhole(2, 6)],\r\n            [randWhole(1660, 2490), randWhole(2, 4)],\r\n        )\r\n    } if (userSelection['3 by 2 digit']) { \r\n        numArray.push(\r\n            [randWhole(7, 41), randWhole(15, 24)],\r\n            [randWhole(3, 19), randWhole(35, 50)],\r\n            [randWhole(15, 28), randWhole(21, 35)],\r\n            [randWhole(3, 12), randWhole(50, 80)],\r\n        )\r\n    } if (userSelection['4 by 2 digit']) {\r\n        numArray.push(\r\n            [randWhole(67, 416), randWhole(15, 24)],\r\n            [randWhole(28, 199), randWhole(35, 50)],\r\n            [randWhole(48, 285), randWhole(21, 35)],\r\n            [randWhole(20, 124), randWhole(50, 80)],\r\n        )\r\n    }\r\n    var num = shuffleArray(numArray)\r\n    \r\n    var answer = num[0][0]\r\n\r\n    var numberS = num[0][1]\r\n    var numberL = answer*numberS\r\n    return [answer, numberS, numberL]\r\n}\r\nexport const divAlg = (userSelection) => {\r\n    var numList = divNumbers(userSelection)\r\n    var [answer, numberS, numberL] = [numList[0], numList[1], numList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) \r\n\r\n    wrong.push()\r\n    wrong = shuffleArray(wrong)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    if (userSelection.probStyle===['Vertical']){\r\n        var prob = verticalDivide(numberL.toLocaleString(), numberS.toLocaleString())\r\n    } else {\r\n        prob = `${numberL.toLocaleString()} ÷ ${numberS.toLocaleString()} = `\r\n    }\r\n    var problem = {text: prob,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    return problem\r\n}\r\nexport const div1dig = (userSelection) => { // 1 digit divisor only\r\n    var numberList = divNumbers(userSelection)\r\n    var girl = shuffleArray(g.girlList)[0]\r\n    var store = shuffleArray(g.storeList)[0]\r\n    var item = shuffleArray(g.itemPkgList)[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n\r\n\r\n    var [answer, numberS, numberL] = [numberList[0], randWhole(2,6), numberList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong userSelection for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = `${girl} is going to ${store} to buy some ${item} for a party. It costs $${numberS} for ${e} `+\r\n    `package of ${item}. After the cashier rang up her items, she had to give the cashier a total `+\r\n    `of $${numberL}. How many packages of ${item} did she buy?`\r\n    var prob2 = `${girl} wants to buy some ${item} at ${store} to prepare for a large family gathering.`+\r\n    ` She ended up purchasing ${numberS} packages of ${item} which cost `+\r\n    `$${numberL} altogether. How much does ${e} package of ${item} cost?`\r\n    \r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    if (randProb === prob2) {\r\n        AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    }\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const div2dig= (userSelection) => { //playing sports 2 digit only\r\n    var numberList = divNumbers(userSelection)\r\n    var boy = shuffleArray(g.boyList)[0]\r\n    var sport = shuffleArray(g.sportList)[0]\r\n    var [answer, numberS, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong userSelection for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = `${boy} plays ${sport} for a total of ${numberL} minutes last year. He played ${sport} `+\r\n    `for ${numberS} minutes each day. How many days did ${boy} play ${sport} last year? `\r\n    var prob2 = `${boy} plays ${sport} for a total of ${numberL} minutes last year. He played ${sport} `+\r\n    `for ${numberS} days last year for an equal amount of time each day. How many minutes did ${boy} play ${sport} each day last year? `\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const divWhole = (userSelection) => { //simple purchase items\r\n    var numberList = divNumbers(userSelection)\r\n    var [answer, numberS, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    var item = shuffleArray(g.itemList10_20)[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    if (userSelection.specify === '2by1') { //4 by 1\r\n        [answer, numberS] = [randWhole(2,9), randWhole(5,8)];\r\n        numberL= answer*numberS\r\n   }else if (userSelection.specify === '3by1'){\r\n       [answer, numberS] = [randWhole(23,40), randWhole(6,9)];\r\n       numberL = answer*numberS\r\n   } else if (userSelection.specify === '4by1'){\r\n        [answer, numberS] = [randWhole(167,250), randWhole(6,9)];\r\n        numberL = answer*numberS\r\n    } else{\r\n        [answer, numberS] = [randWhole(23,89), randWhole(20,40)];\r\n        numberL = answer*numberS\r\n        item = shuffleArray(g.itemList20_60)[0]\r\n    } \r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong userSelection for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var prob1 = `It costs $${numberL} to buy ${numberS} ${item}s. How much would it cost to buy one `+\r\n    `${item}?`\r\n    var prob2 = `How much would it cost to buy ${e} ${item} if it costs $${numberL} to buy ${numberS} ${item}s?`\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const div1dig2 = (userSelection) => { //teacher buying items\r\n    var woman = shuffleArray(g.womanList)[0]\r\n    var theme = shuffleArray(g.themeList)[0]\r\n    var item = shuffleArray(['pencil','marker','pen','journal','notebook','decoration'])[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    if (userSelection.specify === '2by1') { \r\n        var [answer, numberS] = [randWhole(2,9), randWhole(5,8)];\r\n        var numberL= answer*numberS\r\n    }else { //3by1\r\n        [answer, numberS] = [randWhole(15,15), randWhole(6,9)];\r\n        numberL = answer*numberS\r\n    } \r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS)\r\n    var prob1 = `${woman} bought ${numberS} ${theme} ${item}s for a total of $${numberL} `+\r\n    `. If each ${item} costs the same amount, how much did ${woman} spend on each ${theme} ${item}? `\r\n    var prob2 = `${woman} has a total of $${numberL} to spend on ${item}s. She wants to buy ${theme} `+\r\n        ` ${item}s for her classroom. If ${e} package of ${theme} ${item}s costs $${numberS}, how many packagess can she buy?`\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    if (randProb === prob1) {\r\n        AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    } \r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\n// export const randDivideWhole = () => {\r\n//     var randProb = shuffleArray([\r\n    \r\n//     ])[0]\r\n// }\r\n\r\n\r\n    // var prob1 = `${girl} has ${numberL} ${theme} themed ${schoolItem}. She wants to split them equally `+\r\n    //             ` between her friends. If she has ${numberS} friends, how many ${schoolItem} can each friend get?`\r\n    // var prob2 = `${boy} has ${numberL} ${theme} themed ${schoolItem}. If he gives each friend ${numberS} `+\r\n    //             `${schoolItem}, how many friends can he give them to?`\r\n\r\n    // var prob1 = `${girl} has ${numberL} ${noun} saved up. She decides that she has way too many ${noun} and she `+\r\n    //             `$wants to give them all away to her friends. She wants to give each friend the same amount of ${noun}. `+\r\n    //             `${girl} has ${numberS} friends that she would like to give the ${noun} to. How many ${noun} would each friend get?`\r\n    // var prob2 = `${boy} has too many ${noun} saved up. He decides to split them equally between each of his ${numberS} friends. `+\r\n    //             `How many ${noun} will each friend get?`\r\n\r\n\r\n\r\n    // var prob1 = `${boy} has ${numberL} ${noun}. He wants to split them equally into ${group}s. If ${boy} puts ${numberS} `+\r\n    //             `${noun} into each ${group}, how many ${group}s can ${boy} fill?`\r\n    // var prob2 = `${girl} wants to split their ${numberL} ${noun} into equal ${group}s. If she makes ${numberS} `+\r\n    //             `${group}s, how many ${noun}s fit in ${e} ${group}?`\r\n\r\n\r\n    // var prob1 = `${boy} has ${numberL} ${candy}. He would like to share these ${candy} equally with ${numberS} friends. How `+\r\n    //             `many ${candy} will each friend get?`\r\n    // var prob2 = `${girl} has ${numberL} ${candy}. She wants to give each friend ${numberS} ${candy}. How many friends will `+\r\n    //             `she be able to give ${candy} to?`\r\n\r\n    // var prob1 = `A ${food} company can fit ${numberS} packages of ${food} in ${e} box. How many boxes are needed to fill an `+\r\n    //             `order for ${numberL} packages of ${food}?`\r\n    // var prob2 = `A ${food} company needs to put ${numberL} packages of ${food} into boxes to fill an order. They can fit ${numberS} `+\r\n    //             `packages of ${food} in ${e} box. How many boxes will they need to fill the order?`\r\n\r\n    // var dogNameList = ['Zoey','Bowser','Spot','Snickerdoodle','Sir Fluffyboy', 'Chuggington', 'Bella', 'Max','Daisy','Bitsy','Archie','Barkley','Baxter','Chewy','Izzy','Murphy','Pippin','Waffles','Wiggleton','Ziggy']\r\n    // var prob1 = `${girl} walks her dog ${dogName} ${numberS} minutes each day they go for a walk. If they walk for a total of `+\r\n    //             `${numberL} minutes last month, how many days did she take ${dogName} for a walk?`\r\n    // var prob2 = `${boy} walks his dog ${dogName} for a total of ${numberL} minutes last month. Each time he takes ${dogName} `+\r\n    //             `on a walk for ${numberS} minutes. How many days did he take ${dogName} for a walk last month? `\r\n    // var prob3 = `${girl} took her dog ${dogName} on a walk ${numberS} times last month. They walked for a total of ${numberL} `+\r\n    //             `minutes. If each walk lasted the same amount of time, how long was each walk? `\r\n    \r\n    // var prob1 = `${dogName} the dog eats ${numberS} ounces of dog food each week. ${dogName}'s pet parent has stocked up with `+\r\n    //             `${numberL} ounces of dog food. How many weeks will the food last?`\r\n    // var prob2 = `${boy} bought a large bag of dog food so now he has ${numberL} ounces. He gives his dog ${dogName} ${numberS} `+\r\n    //             `ounces of food each week. How many weeks will the food last until he runs out?`\r\n\r\n\r\n    export const randDivWhole = (userSelection) => {\r\n        var probArray = []\r\n\r\n        if (userSelection['Algorithm']){\r\n            probArray.push(divAlg)\r\n        } if (userSelection['Application']) {\r\n            probArray.push(divWhole)\r\n            if (userSelection['3 by 1 digit'] || userSelection['4 by 1 digit']) {\r\n                probArray.push(div1dig, div1dig2)\r\n            } else  { //4 by 2\r\n                probArray.push(div2dig)\r\n            } \r\n        }\r\n        var randProb = shuffleArray(probArray)[0]\r\n        return randProb(userSelection)\r\n    }","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\multiply.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\area-perimeter.js",["344","345","346"],"import {randWhole, shuffleArray, wrongOptions, answerChoicesKey} from './general.js'\r\n\r\nimport Table from './Table';\r\nimport {multNumbers} from './multiply';\r\nimport {multNumbers as decMultNumbers } from './multiply-dec' \r\nimport {asNumbers} from './add-sub'\r\nimport {asNumbers as decAddNumbers} from './add-sub-dec'\r\nimport {\r\n  StyleSheet, View, Text\r\n} from \"@react-pdf/renderer\";\r\n// const styles = StyleSheet.create({\r\n//   page: { flexDirection: \"column\", padding: 25 },\r\n//   table: {\r\n//     fontSize: 10,\r\n//     // width: 550,\r\n//     display: \"flex\",\r\n//     flexDirection: \"column\",\r\n//     justifyContent: \"flex-start\",\r\n//     alignContent: \"stretch\",\r\n//     flexWrap: \"nowrap\",\r\n//     alignItems: \"stretch\"\r\n//   },\r\n//   row: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"space-around\",\r\n//     alignContent: \"stretch\",\r\n//     flexWrap: \"nowrap\",\r\n//     alignItems: \"stretch\",\r\n//     flexGrow: 0,\r\n//     flexShrink: 0,\r\n//     flexBasis: 35\r\n//   },\r\n//   cell: {\r\n//     borderColor: \"#cc0000\",\r\n//     borderStyle: \"solid\",\r\n//     borderWidth: 2,\r\n//     flexGrow: 1,\r\n//     flexShrink: 1,\r\n//     flexBasis: \"auto\",\r\n//     alignSelf: \"stretch\"\r\n//   },\r\n//   header: {\r\n//     backgroundColor: \"#eee\"\r\n//   },\r\n//   headerText: {\r\n//     fontSize: 11,\r\n//     fontWeight: 1200,\r\n//     color: \"#1a245c\",\r\n//     margin: 8\r\n//   },\r\n//   tableText: {\r\n//     margin: 10,\r\n//     fontSize: 10,\r\n//     color: 'blue'\r\n//   }\r\n// });\r\n\r\nconst cell_style_horizontal = (row_index, col_index, data, direction) => {\r\n  const rectHeight = Math.floor(Number(data[0][0].replace(/[^.0-9]+/g, \"\"))+1)\r\n  const rectWidth = Math.floor(Number(data[1][1].replace(/[^.0-9]+/g, \"\"))+1)\r\n  const borderLeftWidth = (col_index === 0 ||  (col_index===1 && row_index ===1)) ? 0 : 1\r\n  const borderTopWidth = (col_index === 0) ? 0 : 1\r\n  const borderRightWidth = (row_index===0 && col_index===1) ? 1 : 0\r\n  const borderBottomWidth = (row_index === 1 || col_index === 0) ? 0 : 1\r\n  const backgroundColor = (row_index === 0 && col_index === 1) ? 'white' : 'white'\r\n  console.log(rectWidth)\r\n  if (rectHeight>rectWidth){\r\n    var [maxh, maxw] = [180, 160]\r\n    // var [minh, minw] = [30, 20]\r\n  } else {\r\n    [maxh, maxw] = [160, 180]\r\n    // [minh, minw] = [20, 30]\r\n  }\r\n  const height = (row_index ===1)? 50: \r\n      (rectHeight<3 && rectWidth>3)||(rectHeight>3 && rectWidth<3) ? rectHeight*20:\r\n      (rectHeight<5 && rectWidth>5)||(rectHeight>5 && rectWidth<5) ? rectHeight*12:\r\n\r\n      (rectHeight<10 && rectWidth>10)||(rectHeight>10 && rectWidth<10) ? rectHeight*10:\r\n      (rectHeight<20 && rectWidth>20)||(rectHeight>20 && rectWidth<20) ? rectHeight*5:\r\n\r\n      (rectHeight <120 && rectHeight>20) ? rectHeight : \r\n      (rectHeight > 100) ? maxh :\r\n      (rectHeight > 5 && rectWidth>5) ? rectHeight*5: rectHeight*20\r\n  const width = (col_index=== 0) ? 60: \r\n      (rectHeight<3 && rectWidth>3)||(rectHeight>3 && rectWidth<3) ? rectWidth*20:\r\n      (rectHeight<5 && rectWidth>5)||(rectHeight>5 && rectWidth<5) ? rectWidth*12:\r\n\r\n      (rectHeight<10 && rectWidth>10)||(rectHeight>10 && rectWidth<10) ? rectWidth*10:\r\n      (rectHeight<20 && rectWidth>20)||(rectHeight>20 && rectWidth<20) ? rectWidth*5:\r\n\r\n      (rectWidth <120 && rectWidth>20) ? rectWidth : \r\n      (rectWidth > 120) ? maxw : \r\n      (rectWidth>5 && rectHeight>5)? rectWidth*5: rectWidth*20\r\n\r\n  const display = (col_index===0) ? 'flex':null\r\n  const justifyContent=(col_index===0)?'center':null\r\n  const alignItems=(col_index===0)?'center':null\r\n\r\n  return {\r\n      width, height, borderLeftWidth, borderRightWidth,\r\n      borderTopWidth, borderBottomWidth, borderStyle: \"solid\",\r\n      backgroundColor, display, justifyContent, alignItems, maxWidth:maxw, maxHeight:maxh, \r\n  }\r\n}\r\nconst cell_style_exponent = (row_index, col_index, data, direction) => {\r\n  const backgroundColor = (row_index === 0 && col_index === 1) ? 'white' : 'white'\r\n  const display = (col_index===1) ? 'flex':null\r\n  const justifyContent=(col_index===1)?'flexStart':null\r\n  const alignItems=(col_index===1)?'flexStart':null\r\n  const textAlign=(col_index===1)? 'top':null\r\n\r\n  return {\r\n      backgroundColor, display, justifyContent, alignItems, textAlign, width:50, height:50\r\n  }\r\n}\r\n\r\nconst createExponent = (num, pow) => {\r\n  return (Table([\r\n    [num, pow],\r\n    ], cell_style_exponent, tstyles, null))\r\n}\r\n\r\n// const cell_style_square = (row_index, col_index, data, direction) => {\r\n//   const borderLeftWidth = (col_index === 0) ? 1 : 0\r\n//   const borderTopWidth = (row_index === 0) ? 1 : 0\r\n//   const borderRightWidth = 1\r\n//   const borderBottomWidth = 1\r\n//   if (direction === 'vertical') {\r\n//     let backgroundColor = (row_index === 0) ? '#b6b6b6' : 'white'\r\n\r\n//   } else {\r\n//     backgroundColor = (col_index === 0) ? '#b6b6b6' : 'white'\r\n//   }\r\n\r\n//   return {\r\n//       // fontFamily: 'Arial', \r\n//       width: '33%',\r\n//       borderLeftWidth, borderRightWidth,\r\n//       borderTopWidth, borderBottomWidth,\r\n//       borderStyle: \"solid\",\r\n//       backgroundColor,\r\n//   }\r\n// }\r\nconst tstyles = StyleSheet.create({\r\n  table: {\r\n      display: \"table\",\r\n      textAlign:'center',\r\n  },\r\n  row: {\r\n      flexDirection: \"row\",\r\n  },\r\n  cell: {\r\n    // display:'flex',\r\n    // alignItems:'center',\r\n    // justifyContent:'center',\r\n    },\r\n  header: {\r\n    backgroundColor: 'grey'\r\n  }\r\n});\r\nlet measurement = ['cm','in','mm','m','ft','yd']\r\nlet areaTextArray = ['What is the area of the rectangle?', 'What would be the area of the rectangle?', 'What area does the rectangle have?']\r\nexport const area = (userSelection) => {\r\n  let numbers = []\r\n  if (userSelection['Whole Numbers']){\r\n    numbers.push(multNumbers(userSelection))\r\n  }\r\n  if (userSelection['Decimals']) {\r\n    numbers.push(decMultNumbers(userSelection))\r\n  }\r\n  let measure = shuffleArray(measurement)[0]\r\n  console.log(numbers)\r\n  let {numberS, numberL} = shuffleArray(numbers)[0]\r\n  let text = shuffleArray(areaTextArray)[0]\r\n  console.log(numberS+measure)\r\n  let rectangle1 = Table([\r\n                  [`${numberS}${measure}`, ''],\r\n                  ['', `${numberL}${measure}`]\r\n\r\n                  ], cell_style_horizontal, tstyles, text, 'horizontal')\r\n  let rectangle2 = Table([\r\n                  [`${numberL}${measure}`, ''],\r\n                  ['', `${numberS}${measure}`]\r\n                \r\n                    ], cell_style_horizontal, tstyles, text, 'horizontal')\r\n  let answer = numberS*numberL\r\n\r\n  let randProb = shuffleArray([rectangle1, rectangle2])[0]\r\n  let wrong= wrongOptions(answer, 'multiply', numberL, numberS)   \r\n  let perimeterWrong = numberS*2+numberL*2\r\n  if (perimeterWrong === answer) {\r\n    perimeterWrong = perimeterWrong+measure\r\n  } else {\r\n    perimeterWrong = perimeterWrong+measure\r\n  }\r\n  wrong.push(numberS*2+numberL*2) \r\n  let AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], measure)\r\n  // AC = [createExponent(AC[0], 2), createExponent(AC[1], 2), createExponent(AC[2], 2), createExponent(AC[3], 2), createExponent(AC[4],2), <View><Text>{AC[5]}</Text></View>]\r\n  let problem = {text: randProb,\r\n  answerChoices: AC,\r\n  correctAnswer: answer,\r\n  }\r\n    return problem\r\n}\r\nexport const area2 = (userSelection) => {\r\n  let numbers = []\r\n  if (userSelection['Whole Numbers']){\r\n    numbers.push(multNumbers(userSelection))\r\n  }\r\n  if (userSelection['Decimals']) {\r\n    numbers.push(decMultNumbers(userSelection))\r\n  }\r\n  let {numberS, numberL} = shuffleArray(numbers)[0]\r\n  let text = shuffleArray(areaTextArray)[0]\r\n  let measure = shuffleArray(measurement)[0]\r\n\r\n  let prob1 = `What is the area of a rectangle with a length of ${numberL}${measure} and a width of ${numberS}${measure}?`\r\n  let prob2 = `What is the area of a rectangle with a width of ${numberS}${measure} and a height of ${numberL}${measure}?`\r\n  let prob3 = `A rectangle has a width of ${numberS}${measure} and a length of ${numberL}${measure}. ${text}`\r\n  let prob4 = `A rectangle has a length of ${numberL}${measure} and a width of ${numberS}${measure}. ${text}`\r\n  let prob5 = `A rectangle has 2 sides that measure ${numberL}${measure} and 2 sides that measure ${numberS}${measure}. ${text}`\r\n  let prob6 = `A rectangle has 2 sides that measure ${numberS}${measure} and 2 sides that measure ${numberL}${measure}. ${text}`\r\n  let prob7 = `There is a rectangle with a length of ${numberL}${measure} and a width of ${numberS}${measure}. ${text}`\r\n  let prob8 = `There is a rectangle with a width of ${numberS}${measure} and a length of ${numberL}${measure}. ${text}`\r\n\r\n  let randProb = shuffleArray([prob1, prob2, prob3, prob4, prob5, prob6, prob7, prob8])[0]\r\n  let answer = numberS*numberL\r\n\r\n            \r\n  let wrong= wrongOptions(answer, 'multiply', numberL, numberS)    \r\n  let AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n  // let randProb = [table1, table2][randWhole(0,1)]\r\n  let problem = {text: randProb,\r\n  answerChoices: AC,\r\n  correctAnswer: answer,\r\n  }\r\n  return problem\r\n}\r\n\r\n\r\n\r\n\r\nlet perimeterTextArray = ['What is the perimeter of the rectangle?', 'How long is the entire length around the perimeter of the rectangle?', 'How long is the perimeter of the rectangle?', \"What is the length of the rectangle's perimeter?\"]\r\n\r\nexport const perimeter = (userSelection) => {\r\n  let numbers = []\r\n  if (userSelection['Whole Numbers']){\r\n    numbers.push(asNumbers(userSelection))\r\n  }\r\n  if (userSelection['Decimals']) {\r\n    numbers.push(decAddNumbers(userSelection))\r\n  }\r\n  let {numberS, numberL} = shuffleArray(numbers)[0]\r\n  let measure = shuffleArray(measurement)[0]\r\n\r\n  // [numberS, numberL] = \r\n  let [numberSF, numberLF] = [numberS.toLocaleString(), numberL.toLocaleString()]\r\n  console.log(numberSF)\r\n  let text = shuffleArray(perimeterTextArray)[0]\r\n  let rectangle1 = Table([\r\n                  [numberSF+measure, ''],\r\n                  ['', numberLF+measure]\r\n\r\n                  ], cell_style_horizontal, tstyles, text, 'horizontal')\r\n  let rectangle2 = Table([\r\n                  [numberLF+measure, ''],\r\n                  ['', numberSF+measure]\r\n                \r\n                    ], cell_style_horizontal, tstyles, text, 'horizontal')\r\n  let answer = numberS*2+numberL*2\r\n\r\n  let randProb = shuffleArray([rectangle1, rectangle2])[0]\r\n  let wrong= [numberS*numberL, answer+randWhole(1,5), numberS+numberL, numberS+numberL+numberL, numberL*2, numberS*2]\r\n  wrong = shuffleArray(wrong)\r\n  let AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], measure)\r\n  // AC = [createExponent(AC[0], 2), createExponent(AC[1], 2), createExponent(AC[2], 2), createExponent(AC[3], 2), createExponent(AC[4],2), <View><Text>{AC[5]}</Text></View>]\r\n  let problem = {text: randProb,\r\n  answerChoices: AC,\r\n  correctAnswer: answer,\r\n  }\r\n    return problem\r\n}\r\n\r\n\r\nexport const perimeter2 = (userSelection) => {\r\n  let numbers = []\r\n  if (userSelection['Whole Numbers']){\r\n    numbers.push(asNumbers(userSelection))\r\n  }\r\n  if (userSelection['Decimals']) {\r\n    numbers.push(decAddNumbers(userSelection))\r\n  }\r\n  let {numberS, numberL} = shuffleArray(numbers)[0]\r\n  let text = shuffleArray(perimeterTextArray)[0]\r\n  let measure = shuffleArray(measurement)[0]\r\n  // [numberS, numberL] = [numberS.toLocaleString(), numberL.toLocaleString()]\r\n  let [numberSF, numberLF] = [numberS.toLocaleString(), numberL.toLocaleString()]\r\n  console.log(numberSF)\r\n  let prob1 = `What is the perimeter of a rectangle with a length of ${numberLF}${measure} and a width of ${numberSF}${measure}?`\r\n  let prob2 = `What is the perimeter of a rectangle with a width of ${numberSF}${measure} and a height of ${numberLF}${measure}?`\r\n  let prob3 = `A rectangle has a width of ${numberSF}${measure} and a length of ${numberLF}${measure}. ${text}`\r\n  let prob4 = `A rectangle has a length of ${numberLF}${measure} and a width of ${numberSF}${measure}. ${text}`\r\n  let prob5 = `A rectangle has 2 sides that measure ${numberLF}${measure} and 2 sides that measure ${numberSF}${measure}. ${text}`\r\n  let prob6 = `A rectangle has 2 sides that measure ${numberSF}${measure} and 2 sides that measure ${numberLF}${measure}. ${text}`\r\n  let prob7 = `There is a rectangle with a length of ${numberLF}${measure} and a width of ${numberSF}${measure}. ${text}`\r\n  let prob8 = `There is a rectangle with a width of ${numberSF}${measure} and a length of ${numberLF}${measure}. ${text}`\r\n\r\n  let randProb = shuffleArray([prob1, prob2, prob3, prob4, prob5, prob6, prob7, prob8])[0]\r\n  let answer = numberS*2+numberL*2\r\n\r\n            \r\n  let wrong= [answer+randWhole(1,5), numberS+numberL, numberS+numberL+numberL, numberL*2, numberS*2]\r\n  if (numberS <100 && numberL < 100) {\r\n    wrong.push(numberS*numberL)\r\n  }\r\n  wrong = shuffleArray(wrong)  \r\n  let AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], measure)\r\n  // let randProb = [table1, table2][randWhole(0,1)]\r\n  let problem = {text: randProb,\r\n  answerChoices: AC,\r\n  correctAnswer: answer,\r\n  }\r\n  return problem\r\n}\r\n\r\nexport const randArea = (userSelection) => {\r\n  let probArray = [area, area2]\r\n  //area2\r\n\r\n  let randProb = shuffleArray(probArray)[0]\r\n  return randProb(userSelection)\r\n}\r\nexport const randPerimeter = (userSelection) => {\r\n  let probArray = [perimeter, perimeter2]\r\n  //perimeter2\r\n\r\n  let randProb = shuffleArray(probArray)[0]\r\n  return randProb(userSelection)\r\n}","C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\Modal.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\shared\\components\\UIElements\\Avatar.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\Table.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\components\\WorksheetData.js",["347","348","349"],"import React, { useState, useContext } from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport './WorksheetData.css';\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst WorksheetData = (props) => {\r\n  const auth = useContext(AuthContext);\r\n  const [dropdownDisplay, setDropdownDisplay] = React.useState(null);\r\n  const [expandWorksheetData, setExpandWorksheetData] = React.useState(false);\r\n\r\n  const handleClick = (e) => {\r\n    setDropdownDisplay(e.currentTarget);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    setDropdownDisplay(null);\r\n  }\r\n  const handleDelete = () => {\r\n    setDropdownDisplay(null);\r\n    props.showDeleteWarningHandler()\r\n  }\r\n  const handleClose = () => {\r\n    setDropdownDisplay(null);\r\n  }\r\n\r\n  const handleExpandWorksheetData = () => {\r\n    setExpandWorksheetData(!expandWorksheetData)\r\n  }\r\n  if (props.userSelection.length===0) {\r\n    return null\r\n  }\r\n  var displayArray = [];\r\n  let specify = [];\r\n  for (var i = 0; i < props.userSelection.length; i++) {\r\n    for (let k in props.userSelection[i]){\r\n      if (props.userSelection[k] === true) {\r\n        specify.push(props.userSelection[k])\r\n      }\r\n    }\r\n    displayArray.push(\r\n      <div className=\"ws-data__concept-container\">\r\n        <p className=\"ws-data__concept\">{props.userSelection[i].concept}</p>\r\n        <p className=\"ws-data__specify\">{specify} working on it, this could be a long list, with a few things, in it. </p>\r\n        <p className=\"ws-data__quantity\">{props.userSelection[i].quantity}</p>\r\n      </div>\r\n\r\n\r\n          \r\n    );\r\n  }\r\n  let questTotal = props.userSelection.map(concept => concept.quantity)\r\n   .reduce((a,b) => {return Number(a) + Number(b);});\r\n\r\n  var table = (\r\n    <React.Fragment>\r\n    <div className= \"ws-data__container\">\r\n      <div className= \"ws-data__title-container\">\r\n        <h3 className=\"ws-data__title\">{props.generalSelection.docTitle}<p></p></h3>\r\n        <p className=\"ws-data__totalQ\">Total Questions: {questTotal} </p>\r\n        <div className=\"ws-data__createdAt\">\r\n        <p className= \"ws-data__totalQ\">Created: {props.createdAt}</p>\r\n        </div>\r\n        <button onClick={handleClick} className=\"ws-data__dropdown\">\r\n            <MoreVertIcon />\r\n        </button>\r\n        {auth.userId === props.creatorId && (\r\n          <React.Fragment>\r\n            <Menu\r\n              id=\"simple-menu\"\r\n              key={props.key}\r\n              anchorEl={dropdownDisplay}\r\n              keepMounted\r\n              open={Boolean(dropdownDisplay)}\r\n              onClose={handleClose}\r\n              getContentAnchorEl={null}\r\n            >\r\n              <MenuItem onClick={handleEdit}>Edit</MenuItem>\r\n              <MenuItem onClick={()=>{\r\n                  props.handleDuplicate('copy',props.userSelection, props.generalSelection, props.questAnswerList)}}>Download again</MenuItem>\r\n              <MenuItem onClick={()=>{\r\n                  props.handleDuplicate('new',props.userSelection, props.generalSelection, props.questAnswerList)}}>New Version</MenuItem>\r\n              \r\n              <MenuItem onClick={handleDelete}>Delete</MenuItem>\r\n\r\n            </Menu>\r\n            </React.Fragment>\r\n            )}\r\n      \r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n      <CSSTransition \r\n      in={expandWorksheetData} \r\n      timeout={200} \r\n      classNames=\"slide-down\" \r\n      mountOnEnter\r\n      unmountOnExit\r\n    >\r\n      <div>\r\n    <div className=\"ws-data__sub-title-container\">\r\n                <p className=\"ws-data__concept\">Concept</p>\r\n                <p className=\"ws-data__specify\">Specify</p>\r\n                <p className=\"ws-data__quantity\">Quantity</p>\r\n          </div>\r\n          <div className=\"ws-data__content-container\">\r\n            {displayArray}\r\n          </div>\r\n\r\n\r\n\r\n      {/* <aside onClick={handleExpandWorksheetData}>\r\n          \r\n      </aside> */}\r\n      </div>\r\n    </CSSTransition>\r\n\r\n    <button className=\"ws-data__expandWorksheetData\" onClick={handleExpandWorksheetData}>{expandWorksheetData?<ExpandLessIcon/>:<ExpandMoreIcon/>}</button>\r\n    </div>\r\n    </React.Fragment>\r\n  );\r\n  return table;\r\n};\r\n\r\nexport default WorksheetData;","C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\vertical-align.js",[],"C:\\projects\\worksheet-creator\\front-end\\src\\worksheet\\problems\\fract-shared.js",["350"],"import {randWhole, shuffleArray} from './general.js'\r\nimport {Text,View,StyleSheet,} from \"@react-pdf/renderer\";\r\n\r\nexport const divMultFractNumbers = (userSelection) => {\r\n  let numArray= []\r\n  if (userSelection['Fractions Only']) {\r\n      let num1=randWhole(1,10)\r\n      let denom1= num1+(num1>5 ? randWhole(1,5) : randWhole(1,10))\r\n      let number1 = {num1:num1, denom1:denom1}\r\n      let num2=randWhole(1,10)\r\n      let denom2 = num2+(num2>5 ? randWhole(1,5) : randWhole(1,10))\r\n      let number2 = {num2:num2, denom2:denom2}\r\n      numArray.push({number1:number1, number2:number2})\r\n      console.log(denom2)\r\n  } if (userSelection['Fraction with Whole Numbers']){\r\n      let number1 = randWhole(2,10)\r\n      let num2= randWhole(1,10)\r\n      let denom2= num2+(num2>5 ? randWhole(1,5) : randWhole(1,10))\r\n      console.log(denom2)\r\n      let number2 = {num2:num2, denom2:denom2}\r\n      numArray.push({number1:number1, number2:number2})\r\n  } if (userSelection['Unit Fraction with Whole Numbers']) {\r\n      let number1 = randWhole(2,10)\r\n      let denom2 = randWhole(2,10)\r\n      let number2 = {num2:1, denom2:denom2}\r\n      numArray.push({number1:number1, number2:number2})\r\n  }\r\n  let fractNumbers = shuffleArray(numArray)[0]\r\n  return fractNumbers\r\n}\r\n\r\nexport const tstyles = StyleSheet.create({\r\n  table: {\r\n      display: \"table\",\r\n       width: \"200px\",\r\n       textAlign:'center',\r\n  },\r\n  row: {\r\n      flexDirection: \"row\",\r\n  },\r\n  cell: {\r\n      // padding: '3px'\r\n    },\r\n  header: {\r\n    backgroundColor: 'grey'\r\n  }\r\n});\r\nexport const styles = StyleSheet.create({\r\n\r\n  fractionProblemContainer: {\r\n      // margin:'0px 0px 0px 150px',\r\n      marginLeft: '20px',\r\n      width:'150px',\r\n      display:'flex',\r\n      justifyContent:'flexStart',\r\n      alignItems:'flexStart',\r\n      flexDirection:'row',\r\n      // borderBottom: 2,\r\n  },\r\n  problemLine: {\r\n      borderBottom:0.5,\r\n      width: '100px',\r\n      display:'flex',\r\n    //   justifyContent:'center',\r\n      flexDirection: 'row',\r\n      alignItems:'center',\r\n\r\n  },\r\n  // op: {\r\n  //     fontSize:'8px',\r\n  // },\r\n  verticalFractionContainer: {\r\n      display:'flex',\r\n      flexDirection:'column',\r\n      // width:'100px'\r\n\r\n  },\r\n  horizontalFractionContainer: {\r\n      flexDirection: 'row',\r\n      justifyContent: 'left',\r\n      alignItems: 'center',\r\n  },\r\n  fraction: {\r\n      paddingRight: '0px',\r\n      marginLeft:'10px',\r\n      width:'30px',\r\n\r\n  },\r\n\r\n});\r\n\r\nexport const verticalFractions = (fract1, fract2, op) => {\r\n  return (\r\n      <View  style={styles.fractionProblemContainer}>\r\n          <View style={styles.problemLine}>\r\n              <View >\r\n                  {op}\r\n              </View>\r\n              <View style= {styles.verticalFractionContainer}>\r\n                  {fract1}\r\n                  {fract2}\r\n              </View>\r\n          </View>\r\n      </View>\r\n  )\r\n}\r\nexport const horizontalFractions = (fract1, fract2, op) => {\r\n  return (\r\n          <View style= {styles.horizontalFractionContainer}>\r\n                  <View style= {styles.fraction}>\r\n                      {fract1}\r\n                  </View>\r\n                  <View style={styles.op} >\r\n                      {op}\r\n                  </View>\r\n                  <View style= {styles.fraction}>\r\n                      {fract2}\r\n                  </View>\r\n              <Text>\r\n                  = ________\r\n              </Text>\r\n          </View>\r\n  )\r\n}\r\n\r\n\r\n// tstyles = StyleSheet.create({\r\n//   table: {\r\n//       display: \"table\",\r\n//        width: \"10px\",\r\n//        textAlign:'center',\r\n//   },\r\n//   row: {\r\n//       flexDirection: \"row\",\r\n//   },\r\n//   cell: {\r\n//       // padding: '3px'\r\n//     },\r\n//   header: {\r\n//     backgroundColor: 'grey'\r\n//   }\r\n// });\r\n\r\nexport const cell_style_fraction = (row_index, col_index) => {\r\n  const borderLeftWidth =  0\r\n  const borderTopWidth = (row_index === 0) ? 0 : 1\r\n  const borderRightWidth = 0\r\n  const borderBottomWidth = 0\r\n  const backgroundColor = 'white'\r\n  if (col_index > 0) {\r\n\r\n  }\r\n\r\n  return {\r\n      // fontFamily: 'Arial', \r\n      width: '20px',\r\n      borderLeftWidth, borderRightWidth,\r\n      borderTopWidth, borderBottomWidth,\r\n      borderStyle: \"solid\",\r\n      backgroundColor,\r\n  }\r\n}\r\nconst cell_style_mixednumber = (row_index, col_index) => {\r\n  const borderLeftWidth =  0\r\n  const borderTopWidth = (row_index === 0 || col_index === 0) ? 0 : 1\r\n  const borderRightWidth = 0\r\n  const borderBottomWidth = 0\r\n  const backgroundColor = 'white'\r\n  const fontSize = '15px'  \r\n  return {\r\n      // fontFamily: 'Arial', \r\n      width: '20px',\r\n      borderLeftWidth, borderRightWidth,\r\n      borderTopWidth, borderBottomWidth,\r\n      borderStyle: \"solid\",\r\n      backgroundColor, fontSize,\r\n  }\r\n}",{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","replacedBy":"354"},{"ruleId":"355","severity":1,"message":"356","line":1,"column":38,"nodeType":"357","messageId":"358","endLine":1,"endColumn":44},{"ruleId":"355","severity":1,"message":"359","line":5,"column":22,"nodeType":"357","messageId":"358","endLine":5,"endColumn":28},{"ruleId":"355","severity":1,"message":"360","line":5,"column":37,"nodeType":"357","messageId":"358","endLine":5,"endColumn":41},{"ruleId":"355","severity":1,"message":"361","line":8,"column":8,"nodeType":"357","messageId":"358","endLine":8,"endColumn":28},{"ruleId":"355","severity":1,"message":"362","line":18,"column":8,"nodeType":"357","messageId":"358","endLine":18,"endColumn":23},{"ruleId":"355","severity":1,"message":"363","line":28,"column":14,"nodeType":"357","messageId":"358","endLine":28,"endColumn":19},{"ruleId":"355","severity":1,"message":"364","line":103,"column":21,"nodeType":"357","messageId":"358","endLine":103,"endColumn":33},{"ruleId":"355","severity":1,"message":"365","line":104,"column":11,"nodeType":"357","messageId":"358","endLine":104,"endColumn":20},{"ruleId":"355","severity":1,"message":"366","line":104,"column":22,"nodeType":"357","messageId":"358","endLine":104,"endColumn":27},{"ruleId":"355","severity":1,"message":"367","line":104,"column":42,"nodeType":"357","messageId":"358","endLine":104,"endColumn":52},{"ruleId":"368","severity":1,"message":"369","line":122,"column":6,"nodeType":"370","endLine":122,"endColumn":8,"suggestions":"371"},{"ruleId":"368","severity":1,"message":"369","line":130,"column":6,"nodeType":"370","endLine":130,"endColumn":8,"suggestions":"372"},{"ruleId":"355","severity":1,"message":"373","line":11,"column":11,"nodeType":"357","messageId":"358","endLine":11,"endColumn":15},{"ruleId":"355","severity":1,"message":"365","line":13,"column":12,"nodeType":"357","messageId":"358","endLine":13,"endColumn":21},{"ruleId":"355","severity":1,"message":"366","line":13,"column":23,"nodeType":"357","messageId":"358","endLine":13,"endColumn":28},{"ruleId":"355","severity":1,"message":"374","line":13,"column":30,"nodeType":"357","messageId":"358","endLine":13,"endColumn":41},{"ruleId":"355","severity":1,"message":"367","line":13,"column":43,"nodeType":"357","messageId":"358","endLine":13,"endColumn":53},{"ruleId":"368","severity":1,"message":"375","line":22,"column":8,"nodeType":"370","endLine":22,"endColumn":37,"suggestions":"376"},{"ruleId":"368","severity":1,"message":"375","line":30,"column":8,"nodeType":"370","endLine":30,"endColumn":29,"suggestions":"377"},{"ruleId":"368","severity":1,"message":"375","line":28,"column":6,"nodeType":"370","endLine":28,"endColumn":27,"suggestions":"378"},{"ruleId":"355","severity":1,"message":"379","line":8,"column":8,"nodeType":"357","messageId":"358","endLine":8,"endColumn":13},{"ruleId":"355","severity":1,"message":"380","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"381","line":4,"column":8,"nodeType":"357","messageId":"358","endLine":4,"endColumn":21},{"ruleId":"355","severity":1,"message":"379","line":15,"column":8,"nodeType":"357","messageId":"358","endLine":15,"endColumn":13},{"ruleId":"355","severity":1,"message":"382","line":20,"column":3,"nodeType":"357","messageId":"358","endLine":20,"endColumn":20},{"ruleId":"355","severity":1,"message":"383","line":25,"column":10,"nodeType":"357","messageId":"358","endLine":25,"endColumn":20},{"ruleId":"355","severity":1,"message":"384","line":25,"column":22,"nodeType":"357","messageId":"358","endLine":25,"endColumn":35},{"ruleId":"355","severity":1,"message":"385","line":33,"column":11,"nodeType":"357","messageId":"358","endLine":33,"endColumn":20},{"ruleId":"386","severity":1,"message":"387","line":384,"column":13,"nodeType":"357","messageId":"388","endLine":384,"endColumn":18},{"ruleId":"355","severity":1,"message":"389","line":2,"column":20,"nodeType":"357","messageId":"358","endLine":2,"endColumn":30},{"ruleId":"390","severity":1,"message":"391","line":102,"column":18,"nodeType":"392","messageId":"393","endLine":102,"endColumn":22},{"ruleId":"355","severity":1,"message":"394","line":228,"column":7,"nodeType":"357","messageId":"358","endLine":228,"endColumn":8},{"ruleId":"355","severity":1,"message":"395","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":27},{"ruleId":"355","severity":1,"message":"396","line":1,"column":29,"nodeType":"357","messageId":"358","endLine":1,"endColumn":39},{"ruleId":"355","severity":1,"message":"389","line":4,"column":3,"nodeType":"357","messageId":"358","endLine":4,"endColumn":13},{"ruleId":"355","severity":1,"message":"397","line":100,"column":7,"nodeType":"357","messageId":"358","endLine":100,"endColumn":29},{"ruleId":"355","severity":1,"message":"398","line":5,"column":8,"nodeType":"357","messageId":"358","endLine":5,"endColumn":15},{"ruleId":"355","severity":1,"message":"360","line":2,"column":10,"nodeType":"357","messageId":"358","endLine":2,"endColumn":14},{"ruleId":"355","severity":1,"message":"399","line":8,"column":8,"nodeType":"357","messageId":"358","endLine":8,"endColumn":19},{"ruleId":"368","severity":1,"message":"400","line":110,"column":4,"nodeType":"370","endLine":110,"endColumn":14,"suggestions":"401"},{"ruleId":"355","severity":1,"message":"402","line":4,"column":9,"nodeType":"357","messageId":"358","endLine":4,"endColumn":12},{"ruleId":"355","severity":1,"message":"403","line":1,"column":9,"nodeType":"357","messageId":"358","endLine":1,"endColumn":13},{"ruleId":"355","severity":1,"message":"404","line":2,"column":3,"nodeType":"357","messageId":"358","endLine":2,"endColumn":7},{"ruleId":"355","severity":1,"message":"405","line":4,"column":3,"nodeType":"357","messageId":"358","endLine":4,"endColumn":7},{"ruleId":"368","severity":1,"message":"375","line":38,"column":6,"nodeType":"370","endLine":38,"endColumn":35,"suggestions":"406"},{"ruleId":"355","severity":1,"message":"380","line":1,"column":39,"nodeType":"357","messageId":"358","endLine":1,"endColumn":48},{"ruleId":"355","severity":1,"message":"407","line":3,"column":8,"nodeType":"357","messageId":"358","endLine":3,"endColumn":14},{"ruleId":"355","severity":1,"message":"408","line":10,"column":10,"nodeType":"357","messageId":"358","endLine":10,"endColumn":20},{"ruleId":"355","severity":1,"message":"409","line":10,"column":22,"nodeType":"357","messageId":"358","endLine":10,"endColumn":35},{"ruleId":"355","severity":1,"message":"365","line":11,"column":11,"nodeType":"357","messageId":"358","endLine":11,"endColumn":20},{"ruleId":"355","severity":1,"message":"366","line":11,"column":22,"nodeType":"357","messageId":"358","endLine":11,"endColumn":27},{"ruleId":"355","severity":1,"message":"374","line":11,"column":29,"nodeType":"357","messageId":"358","endLine":11,"endColumn":40},{"ruleId":"355","severity":1,"message":"367","line":11,"column":42,"nodeType":"357","messageId":"358","endLine":11,"endColumn":52},{"ruleId":"355","severity":1,"message":"410","line":233,"column":9,"nodeType":"357","messageId":"358","endLine":233,"endColumn":17},{"ruleId":"390","severity":1,"message":"391","line":252,"column":56,"nodeType":"392","messageId":"393","endLine":252,"endColumn":60},{"ruleId":"390","severity":1,"message":"391","line":287,"column":16,"nodeType":"392","messageId":"393","endLine":287,"endColumn":20},{"ruleId":"355","severity":1,"message":"411","line":348,"column":19,"nodeType":"357","messageId":"358","endLine":348,"endColumn":26},{"ruleId":"355","severity":1,"message":"411","line":374,"column":19,"nodeType":"357","messageId":"358","endLine":374,"endColumn":26},{"ruleId":"355","severity":1,"message":"412","line":465,"column":9,"nodeType":"357","messageId":"358","endLine":465,"endColumn":13},{"ruleId":"355","severity":1,"message":"413","line":466,"column":9,"nodeType":"357","messageId":"358","endLine":466,"endColumn":14},{"ruleId":"355","severity":1,"message":"389","line":4,"column":9,"nodeType":"357","messageId":"358","endLine":4,"endColumn":19},{"ruleId":"386","severity":1,"message":"414","line":71,"column":13,"nodeType":"357","messageId":"388","endLine":71,"endColumn":25},{"ruleId":"415","severity":1,"message":"416","line":153,"column":38,"nodeType":"417","messageId":"418","endLine":153,"endColumn":40},{"ruleId":"415","severity":1,"message":"416","line":153,"column":111,"nodeType":"417","messageId":"418","endLine":153,"endColumn":113},{"ruleId":"355","severity":1,"message":"419","line":239,"column":20,"nodeType":"357","messageId":"358","endLine":239,"endColumn":30},{"ruleId":"420","severity":1,"message":"421","line":256,"column":27,"nodeType":"357","messageId":"422","endLine":256,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":264,"column":27,"nodeType":"357","messageId":"422","endLine":264,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":272,"column":27,"nodeType":"357","messageId":"422","endLine":272,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":280,"column":27,"nodeType":"357","messageId":"422","endLine":280,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":289,"column":27,"nodeType":"357","messageId":"422","endLine":289,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":298,"column":27,"nodeType":"357","messageId":"422","endLine":298,"endColumn":31},{"ruleId":"355","severity":1,"message":"423","line":318,"column":44,"nodeType":"357","messageId":"358","endLine":318,"endColumn":52},{"ruleId":"355","severity":1,"message":"419","line":376,"column":20,"nodeType":"357","messageId":"358","endLine":376,"endColumn":30},{"ruleId":"355","severity":1,"message":"424","line":379,"column":7,"nodeType":"357","messageId":"358","endLine":379,"endColumn":15},{"ruleId":"355","severity":1,"message":"425","line":380,"column":7,"nodeType":"357","messageId":"358","endLine":380,"endColumn":16},{"ruleId":"420","severity":1,"message":"421","line":396,"column":27,"nodeType":"357","messageId":"422","endLine":396,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":404,"column":27,"nodeType":"357","messageId":"422","endLine":404,"endColumn":31},{"ruleId":"355","severity":1,"message":"426","line":405,"column":7,"nodeType":"357","messageId":"358","endLine":405,"endColumn":17},{"ruleId":"420","severity":1,"message":"421","line":413,"column":27,"nodeType":"357","messageId":"422","endLine":413,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":421,"column":27,"nodeType":"357","messageId":"422","endLine":421,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":429,"column":27,"nodeType":"357","messageId":"422","endLine":429,"endColumn":31},{"ruleId":"355","severity":1,"message":"423","line":448,"column":49,"nodeType":"357","messageId":"358","endLine":448,"endColumn":57},{"ruleId":"355","severity":1,"message":"424","line":451,"column":7,"nodeType":"357","messageId":"358","endLine":451,"endColumn":15},{"ruleId":"355","severity":1,"message":"419","line":497,"column":27,"nodeType":"357","messageId":"358","endLine":497,"endColumn":37},{"ruleId":"355","severity":1,"message":"425","line":502,"column":7,"nodeType":"357","messageId":"358","endLine":502,"endColumn":16},{"ruleId":"355","severity":1,"message":"427","line":503,"column":7,"nodeType":"357","messageId":"358","endLine":503,"endColumn":16},{"ruleId":"386","severity":1,"message":"428","line":558,"column":7,"nodeType":"357","messageId":"388","endLine":558,"endColumn":11},{"ruleId":"355","severity":1,"message":"404","line":5,"column":14,"nodeType":"357","messageId":"358","endLine":5,"endColumn":18},{"ruleId":"355","severity":1,"message":"389","line":5,"column":19,"nodeType":"357","messageId":"358","endLine":5,"endColumn":29},{"ruleId":"355","severity":1,"message":"429","line":40,"column":9,"nodeType":"357","messageId":"358","endLine":40,"endColumn":14},{"ruleId":"386","severity":1,"message":"430","line":56,"column":13,"nodeType":"357","messageId":"388","endLine":56,"endColumn":18},{"ruleId":"355","severity":1,"message":"429","line":69,"column":9,"nodeType":"357","messageId":"358","endLine":69,"endColumn":14},{"ruleId":"355","severity":1,"message":"389","line":6,"column":19,"nodeType":"357","messageId":"358","endLine":6,"endColumn":29},{"ruleId":"431","severity":1,"message":"432","line":24,"column":19,"nodeType":"357","messageId":"433","endLine":24,"endColumn":26},{"ruleId":"355","severity":1,"message":"389","line":6,"column":19,"nodeType":"357","messageId":"358","endLine":6,"endColumn":29},{"ruleId":"431","severity":1,"message":"432","line":22,"column":17,"nodeType":"357","messageId":"433","endLine":22,"endColumn":24},{"ruleId":"355","severity":1,"message":"402","line":2,"column":66,"nodeType":"357","messageId":"358","endLine":2,"endColumn":69},{"ruleId":"355","severity":1,"message":"404","line":9,"column":15,"nodeType":"357","messageId":"358","endLine":9,"endColumn":19},{"ruleId":"355","severity":1,"message":"403","line":9,"column":21,"nodeType":"357","messageId":"358","endLine":9,"endColumn":25},{"ruleId":"355","severity":1,"message":"434","line":118,"column":7,"nodeType":"357","messageId":"358","endLine":118,"endColumn":21},{"ruleId":"355","severity":1,"message":"435","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":25},{"ruleId":"355","severity":1,"message":"360","line":2,"column":9,"nodeType":"357","messageId":"358","endLine":2,"endColumn":13},{"ruleId":"355","severity":1,"message":"436","line":9,"column":8,"nodeType":"357","messageId":"358","endLine":9,"endColumn":18},{"ruleId":"355","severity":1,"message":"437","line":163,"column":7,"nodeType":"357","messageId":"358","endLine":163,"endColumn":29},"no-native-reassign",["438"],"no-negated-in-lhs",["439"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Link' is defined but never used.","'DisplayUserSelection' is defined but never used.","'DraftBackground' is defined but never used.","'Image' is defined but never used.","'setCopyState' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'clearError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["440"],["441"],"'auth' is assigned a value but never used.","'sendRequest' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["442"],["443"],["444"],"'Input' is defined but never used.","'useEffect' is defined but never used.","'ArrowBackIcon' is defined but never used.","'VALIDATOR_REQUIRE' is defined but never used.","'errorState' is assigned a value but never used.","'setErrorState' is assigned a value but never used.","'arrayList' is assigned a value but never used.","no-redeclare","'whole' is already defined.","redeclared","'StyleSheet' is defined but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'E' is assigned a value but never used.","'useContext' is defined but never used.","'useHistory' is defined but never used.","'questionAnswerViewList' is assigned a value but never used.","'Teacher' is defined but never used.","'ImageUpload' is defined but never used.","React Hook useEffect has a missing dependency: 'switchModeHandler'. Either include it or remove the dependency array.",["445"],"'cap' is defined but never used.","'Text' is defined but never used.","'View' is defined but never used.","'Font' is defined but never used.",["446"],"'Avatar' is defined but never used.","'loadedUser' is assigned a value but never used.","'setLoadedUser' is assigned a value but never used.","'dividend' is assigned a value but never used.","'numberM' is assigned a value but never used.","'name' is assigned a value but never used.","'sport' is assigned a value but never used.","'randDecimal2' is already defined.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'patternNum' is assigned a value but never used.","no-use-before-define","'text' was used before it was defined.","usedBeforeDefined","'tablNum2' is assigned a value but never used.","'wrongNum' is assigned a value but never used.","'wrongNum2' is assigned a value but never used.","'randAddend' is assigned a value but never used.","'wrongNum3' is assigned a value but never used.","'text' is already defined.","'whole' is assigned a value but never used.","'prob1' is already defined.","no-self-assign","'number1' is assigned to itself.","selfAssignment","'createExponent' is assigned a value but never used.","'useState' is defined but never used.","'DeleteIcon' is defined but never used.","'cell_style_mixednumber' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"447","fix":"448"},{"desc":"447","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},"Update the dependencies array to be: [history]",{"range":"460","text":"461"},{"range":"462","text":"461"},"Update the dependencies array to be: [props, props.createdWorksheetState]",{"range":"463","text":"464"},"Update the dependencies array to be: [props, props.userSelection]",{"range":"465","text":"466"},"Update the dependencies array to be: [props, sendRequest, userId]",{"range":"467","text":"468"},"Update the dependencies array to be: [location, switchModeHandler]",{"range":"469","text":"470"},"Update the dependencies array to be: [id, value, isValid, onInput, props]",{"range":"471","text":"472"},[3611,3613],"[history]",[3772,3774],[744,773],"[props, props.createdWorksheetState]",[967,988],"[props, props.userSelection]",[1008,1029],"[props, sendRequest, userId]",[3370,3380],"[location, switchModeHandler]",[1046,1075],"[id, value, isValid, onInput, props]"]
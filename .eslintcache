[{"C:\\projects\\worksheet-creator\\src\\index.js":"1","C:\\projects\\worksheet-creator\\src\\reportWebVitals.js":"2","C:\\projects\\worksheet-creator\\src\\App.js":"3","C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js":"4","C:\\projects\\worksheet-creator\\src\\app-files\\general.js":"5","C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js":"6","C:\\projects\\worksheet-creator\\src\\create-worksheet.js":"7","C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js":"8"},{"size":3789,"mtime":1608475342108,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":11901,"mtime":1608738904662,"results":"12","hashOfConfig":"10"},{"size":10147,"mtime":1608689942962,"results":"13","hashOfConfig":"10"},{"size":3196,"mtime":1608690026098,"results":"14","hashOfConfig":"10"},{"size":7055,"mtime":1608689942967,"results":"15","hashOfConfig":"10"},{"size":6178,"mtime":1608695866058,"results":"16","hashOfConfig":"10"},{"size":12309,"mtime":1608690069384,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ahlkum",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\projects\\worksheet-creator\\src\\index.js",[],["38","39"],"C:\\projects\\worksheet-creator\\src\\reportWebVitals.js",[],"C:\\projects\\worksheet-creator\\src\\App.js",["40","41","42","43","44","45","46","47","48","49"],"C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js",["50","51","52","53","54"],"// import * as gen from './general.js'\r\nimport {randWhole, shuffleArray, wrongOptions, answerChoicesKey,\r\n        boyList, girlList, nameList, sportList, candyList, forestAnimal, lakeAnimal, desertAnimal} from './general.js'\r\n\r\nexport const addWhole = (Options) => {\r\n    var boy = shuffleArray(boyList)\r\n    var sport = sportList[randWhole(0, sportList.length)]\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n\r\n    } else if (Options.level ===\"3\") {\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    } \r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    \r\n    var problem = {questionText:    (`${boy[0]} played ${sport} for ${(numberS).toLocaleString()} minutes last year. ${boy[1]}\r\n                 played ${sport} for ${(numberL).toLocaleString()} minutes last year. How many minutes did \r\n                 ${boy[0]} and ${boy[1]} play altogether?`),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    \r\n\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\nexport const subWhole2 = (Options) => {\r\n    var name = nameList[randWhole(0, nameList.length)]\r\n    var randCandy = shuffleArray(candyList)\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n\r\n    if (Options === \"2\") {\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n    } else if (Options ===\"3\") {\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    } \r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    \r\n    var prob1 = (`In a jar there are three different types of candies. There are ${numberS} ${randCandy[0]} \r\n        , ${numberS} ${randCandy[1]}, and ${numberL} ${randCandy[2]}. What is the difference between \r\n        the number of ${randCandy[0]} and the number of ${randCandy[2]} in the jar?`)\r\n    var prob2 = (`${name} has a basket of candies. There are ${numberS}) ${randCandy[0]}, \r\n        ${numberS} ${randCandy[1]}, and ${numberL} ${randCandy[2]}. How many more \r\n        ${randCandy[2]} are in the basket than ${randCandy[0]} ?`)\r\n    var randProb = [prob1, prob2][Math.floor(Math.random())]\r\n    var problem = {questionText: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n\r\n            \r\n}\r\nexport const addWhole2 = (Options) => {\r\n    var name = nameList[randWhole(0, nameList.length)]\r\n    var randCandy = shuffleArray(candyList)\r\n    var [numberS, numberM, numberL] = [randWhole(100, 300), randWhole(300, 500), randWhole(500, 999)];\r\n\r\n    if (Options === \"2\") {\r\n    [numberS, numberM, numberL] = [randWhole(1000, 3000), randWhole(3000, 5000), randWhole(5001, 9999)];\r\n\r\n    } else if (Options ===\"3\") {\r\n    [numberS, numberM, numberL] = [randWhole(1000, 3000), randWhole(3000, 5000), randWhole(5001, 9999)];\r\n    } \r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`There are three different types of candies in a jar. There are ${numberM} ${randCandy[0]}\r\n    , ${numberL} ${randCandy[1]}, and ${numberL} ${randCandy[2]}\r\n    . How many total ${randCandy[0]} and ${randCandy[2]} are in the jar?`)\r\n    var prob2 = (`${name} has a jar with three different types of candies inside. There are ${numberS} \r\n    ${randCandy[0]},  ${numberM} ${randCandy[1]}, and ${numberL} ${randCandy[2]} \r\n    \". How many ${randCandy[2]} and ${randCandy[1]} are in the jar altogether?`)\r\n    var randProb = [prob1, prob2][Math.floor(Math.random())]\r\n    var problem = {questionText: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole3 = (Options) => {\r\n    var randForestAnimal = shuffleArray(forestAnimal)\r\n    var randDesertAnimal = shuffleArray(desertAnimal)\r\n    var randLakeAnimal = shuffleArray(lakeAnimal)\r\n    var randAnimal = shuffleArray([randDesertAnimal, randForestAnimal, randLakeAnimal])\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n    var place\r\n    if (randAnimal === randDesertAnimal) {\r\n        place = 'desert'\r\n    }else if (randAnimal === randForestAnimal) {\r\n        place = 'forest'\r\n    }else if (randAnimal === randLakeAnimal) {\r\n        place = 'lake'\r\n    }\r\n    if (Options === \"2\") {\r\n    var [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n    } else if (Options ===\"3\") {\r\n    var [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    } \r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`There are ${numberL} ${randAnimal[0]}s and ${randAnimal[1]}s in the \r\n        place. If there are ${numberS} ${randAnimal[1]}s in the ${place} \r\n        , how many ${randAnimal[0]}s are in the ${place}?`)\r\n    var prob2 = (`In the ${place} there are ${numberS} ${randAnimal[1]}s and \r\n        ${numberL} ${randAnimal[0]}s. What is the difference beween the number of \r\n        ${randAnimal[0]}s and ${randAnimal[1]}s in the ${place}?`)\r\n    var prob3 = (`Researchers are surveying the ${place}. They found a total of ${numberL} \r\n        ${randAnimal[1]}s, and a total of ${numberS} ${randAnimal[0]}s. How many more\r\n        ${randAnimal[1]}s are there in the ${place} than ${randAnimal[0]}s?`)\r\n    var randProb = [prob1, prob2, prob3][Math.floor(Math.random()*3)]\r\n    var problem = {questionText: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n        \r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n\r\n            \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const addDec = (Options) => {\r\n    var boy = shuffleArray(boyList)\r\n    var sport = sportList[randWhole(0, sportList.length)]\r\n    var [numberS, numberL] = [(Math.random()*49999+10011).toFixed(1),  (Math.random()*999999+500011).toFixed(2)];\r\n    // var f = 'format'\r\n    var answer= (numberL + numberS);\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var wrong = gen.shuffleArray(gen.wrongOptions(answer, 'add', numberL, numberS))\r\n    // var tempAC = [answer, wrong[0], wrong[1], wrong[2]]\r\n    // var AC = gen.shuffleArray(tempAC)\r\n    var problem = { questionText: (`${boy[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${boy[1]} \r\n                played ${sport} for${(numberL).toString()} minutes last year. How many minutes did \r\n                ${boy[0]} and ${boy[1]} play altogether?`),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n\r\n    console.log(problem)\r\n    return problem\r\n    \r\n}\r\n\r\nexport const subDec = (Options) => {\r\n    var boy = shuffleArray(boyList)\r\n    var sport = sportList[randWhole(sportList.length, 0)]\r\n    // var f = 'format'\r\n    var [numberS, numberL] = [(Math.random()*49999+10011).toFixed(1),  (Math.random()*999999+500011).toFixed(2)];\r\n\r\n    var answer= (numberL - numberS);\r\n    var wrong = shuffleArray(wrongOptions(answer, 'sub', numberL, numberS))\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var sub1 = (`${boy[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${boy[1]} \r\n    played ${sport} for ${(numberL).toString()} minutes last month. How many more minutes did \r\n     ${boy[1]} play than ${boy[0]}?`)\r\n    var sub2 = (`${boy[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${boy[1]} \r\n     played ${sport} for ${(numberL).toString()} minutes last month. What is the difference between \r\n    the number of minutes ${boy[1]} played and the number of minutes ${boy[0]} played?`)\r\n    var randSub = [sub1, sub2][Math.floor(Math.random())]\r\n    var problem = {questionText: randSub,\r\n                answerChoices: AC,\r\n                correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const subWhole = (Options) => {\r\n    var boy = shuffleArray(boyList)\r\n    var sport = sportList[randWhole(sportList.length, 0)]\r\n    // var f = 'format'\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n\r\n    if (Options.level === \"2\") {\r\n        [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    \r\n    } else if (Options.level === \"3\") {\r\n        [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n    }\r\n    var answer= (numberL - numberS);\r\n    var wrong = shuffleArray(wrongOptions(answer, 'sub', numberL, numberS))\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (boy[0] + \" played \" + sport + \" for \" + (numberS).toString() + \" minutes last year. \" + boy[1] +\r\n    \" played \" + sport + \" for \" + (numberL).toString() + \" minutes last month. How many more minutes did \"\r\n    + boy[1] + \" play than \" + boy[0] + \"?\")\r\n    var prob2 = (boy[0] + \" played \" + sport + \" for \" + (numberS).toString() + \" minutes last year. \" + boy[1] +\r\n    \" played \" + sport + \" for \" + (numberL).toString() + \" minutes last month. What is the difference between \" +\r\n    \"the number of minutes \" + boy[1] + \" played and the number of minutes \" + boy[0] + \" played?\")\r\n    var randProb = [prob1, prob2][Math.floor(Math.random())]\r\n    var problem = {questionText: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n\r\n}","C:\\projects\\worksheet-creator\\src\\app-files\\general.js",[],"C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js",["55","56","57","58","59"],"import {randWhole, shuffleArray, wrongOptions, answerChoicesKey,\r\n    boyList, boyList2, sportList} from './general.js'\r\n// var simpleQArray = ['What is the value of the expression? \\n',\r\n// 'An expression is shown below, what value is equivalent to the expression?\\n',\r\n// 'Which value is equivalent to the expression below? \\n']\r\nvar simpleQArray = shuffleArray(['What is the value of the expression? \\n',\r\n                  'An expression is shown below, what value is equivalent to the expression?\\n',\r\n                  'Which value is equivalent to the expression below? \\n'])\r\nexport const orderOps = (Options) => {\r\n\r\n\r\n    if (Options.specify === \"whole\") {\r\n        var [numberL, numberL2, numberM] = [randWhole(10, 20), randWhole(10, 20), randWhole(2, 11)];\r\n        var [numberS, numberS2, numberM2] = [randWhole(2, 8), randWhole(2, 8), randWhole(2, 11)];\r\n\r\n      if (Options.level === \"2\") {\r\n        [numberL, numberL2, numberM] = [randWhole(20, 50), randWhole(20, 50), randWhole(10, 19)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 9), randWhole(2, 9), randWhole(10, 19)];\r\n      } else if (Options.level === \"3\") {\r\n        [numberL, numberL2, numberM] = [randWhole(50, 200), randWhole(50, 200), randWhole(20, 100)];\r\n        [numberS, numberS2, numberM2] = [randWhole(7, 19), randWhole(7, 19), randWhole(20, 100)];\r\n      }\r\n    }\r\n    else if (Options.specify === \"decimal\") {\r\n        var DecimalH = (Math.random()).toFixed(2)\r\n        // var [f, r] = ['roundFormat', 2]\r\n\r\n\r\n\r\n        // var DecimalOT = (Math.random()*9 + 1).toFixed(1) \r\n        // var DecimalT = (Math.random()*9 + 1).toFixed(1)\r\n                // var decTwoDigit =  gen.shuffleArray[DecimalOT, DecimalH]\r\n        // var decTwoDigit =  [DecimalOT, DecimalH] \r\n        var DecimalHTOT = (Math.random()*99 + 10).toFixed(2)\r\n        var DecimalTOTH = (Math.random()*99 + 10).toFixed(2)\r\n        // var decLarge = gen.shuffleArray[DecimalHTOT, DecimalTOTH]\r\n        var decLarge = [DecimalHTOT, DecimalTOTH]\r\n\r\n        [numberL, numberL2, numberM] = [randWhole(2, 7), randWhole(2, 11), randWhole(10, 20)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 6), DecimalH, randWhole(10, 20)];\r\n\r\n      if (Options.level === \"2\") {\r\n        [numberL, numberL2, numberM] = [randWhole(12, 17), decLarge[0], randWhole(20, 50)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 2), DecimalH, randWhole(20, 50)];\r\n      } else if (Options.level === \"3\") {\r\n        [numberL, numberL2, numberM] = [randWhole(7, 19), randWhole(20, 100), randWhole(50, 200)];\r\n        [numberS, numberS2, numberM2] = [randWhole(12, 39), DecimalH, decLarge[0]];\r\n      }\r\n    }\r\n    //100 + (40÷8 - 9) × 11)\r\n  \r\n    var OoOA = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberL} + (${numberS * numberL2} ÷ ${numberS} - ${numberS2}) × ${numberM2}`\r\n\r\n    var OoOB = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberM} × (${numberL} - ${numberS*numberM2} ÷ ${numberS}) + ${numberL2}`\r\n    \r\n    var OoOC = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberS}(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})`\r\n    \r\n    var OoOD = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           [${numberL2} + (${numberS2} × ${numberM} - ${numberS})] × ${numberM2}`\r\n    \r\n    var OoOE = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberL2}[${numberL} + ${numberM}(${numberM2+numberS} - ${numberS})]`\r\n    var problems = [OoOA, OoOB, OoOC, OoOD, OoOE]\r\n    var randomProblem = problems[randWhole(problems.length, 0)]\r\n    // console.log(randomProblem)\r\n    var answer = \"\"\r\n    var wrong = \"\"\r\n        //100 + (40÷8 - 9) × 11)\r\n    if  (randomProblem === OoOA) {\r\n        answer = numberL+((numberS*numberL2/numberS-numberS2)*numberM2)\r\n        wrong = [Math.abs(numberL+(numberS*numberL2)/numberS-numberS2*numberM2),        (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2,\r\n            ((((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2, Math.abs(numberL+(numberS*numberL2)/numberS-(numberS2*numberM2))]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer/10, numberL+((numberS*numberL2/numberS-numberS2*10)*numberM2)))\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n        }\r\n        // console.log(wrong)\r\n//40 x ( 100 - 50 ÷ 5 ) + 100\r\n    }else if  (randomProblem === OoOB) {\r\n        answer = numberM*(numberL-(numberS*numberM2/numberS)+numberL2)\r\n        wrong = [numberM*numberL-numberS*numberM2/numberS+numberL2, numberM*numberL-(numberS*numberM2/numberS)+numberL2,\r\n            Math.floor((((numberM*numberL)-numberS)*numberM2)/numberS)+numberL2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer/10))\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n\r\n        }\r\n        // console.log(wrong)\r\n\r\n//10(100 - 8) + 40(100 + 40)\r\n    }else if  (randomProblem === OoOC) {\r\n        answer = numberS*(numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberS*numberL-numberS2+numberM*numberL2+numberM2, (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer*100, answer/10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1, answer-2, answer+3))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }\r\n        // console.log(wrong)\r\n\r\n  //[100+(8x40-10)]x40\r\n    }else if  (randomProblem === OoOD) {\r\n        answer = (numberL2+(numberS2*numberM-numberS))*numberM2\r\n        wrong = [(numberL2+(numberS2*numberM-numberS))*numberM2+1, (numberL2+numberS2)*numberM-numberS,\r\n                 numberL2+Math.abs(numberS2*numberM-numberS*numberM2),   (((numberL2+numberS2)*numberM)-numberS)*numberM2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }\r\n        // console.log(wrong)\r\n\r\n//[100+(8x40-10)]x40\r\n    }else if  (randomProblem === OoOE) {\r\n        answer = numberL2*(numberL+numberM*(numberM2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2+numberM2+numberM2)), numberL2*(numberL+numberM*(numberM2)),\r\n                numberL2*numberL + numberM*numberM2, (numberL2*numberL+numberM)*numberM2+numberS-numberS]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }       \r\n    }else {\r\n        answer = 0\r\n        wrong = [0, 0, 0]\r\n    }\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText: randomProblem,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n\r\n}\r\n\r\n\r\n","C:\\projects\\worksheet-creator\\src\\create-worksheet.js",["60","61","62"],"C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js",["63","64","65","66"],"import {randWhole, randDec, roundDec, shuffleArray, wrongOptions, answerChoicesKey} from './general.js'\r\n\r\nexport const divideDec = (Options) => {\r\n    var answer = randDec(1, 9, 2)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = roundDec(answer*divisor, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 2)\r\n    divisor = randWhole(2, 11)\r\n    dividend = roundDec(answer*divisor, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(1, 9, 2)\r\n        divisor = randWhole(12, 50)\r\n        dividend = roundDec(answer*divisor, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec = (Options) => {\r\n    var numberS = randDec(1, 9, 2)\r\n    var numberL = randWhole(1, 9)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, 2)\r\n    numberL = randWhole(11, 99)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        numberS = randDec(1, 9, 2)\r\n        numberL = randWhole(13,99)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {questionText:    (`${numberS} x ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec2 = (Options) => {\r\n    var pv = randWhole(1, 2)\r\n    var numberS = randDec(1, 9, pv)\r\n    var numberL = randDec(0, 1, pv)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, pv)\r\n    numberL = randDec(11, 99, pv)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        numberS = randDec(1, 9, pv)\r\n        numberL = randDec(13, 99, pv)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {questionText:    (`${numberS} x ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const divideDec2 = (Options) => {\r\n    var answer = randDec(0, 1, 3)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(3)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 3)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(3)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(1, 9, 3)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(3)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const divideDec3 = (Options) => {\r\n    var answer = randDec(10, 90, 1)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(1)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(100, 900, 1)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(1)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(100, 900, 1)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(1)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const divideDecOLD = (Options) => {\r\n    var [dec1, dec2, dec3] = [randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)]\r\n    var x\r\n    // var shuffleDecimals = shuffleArray([randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)])\r\n    var shuffleDecimals = shuffleArray([dec1, dec2, dec3])\r\n    if (shuffleDecimals[0] === dec1){\r\n        x = 2\r\n    } else if (shuffleDecimals[1] === dec2) {\r\n        x = 3\r\n    } else {\r\n        x = 1\r\n    }\r\n    var answer = shuffleDecimals[0] \r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(x)\r\n\r\n    if (Options === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    var shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n    answer = shuffleDecimals[0]\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(x)\r\n\r\n    } else if (Options ===\"3\") {\r\n        var shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n        answer = shuffleDecimals[0]\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(x)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\n\r\n\r\n\r\n\r\nexport const addDecPV = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        var w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(5, 9, y)},\r\n                {numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                {numberS:randDec(10, 90, x), numberL: randDec(90, 300, y)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, w)\r\n    // console.log(numberL+numberS)\r\n    // console.log(answer)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const addDecWhole = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                {numberS:randWhole(1, 9), numberL: randDec(9,15, x)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n                {numberS:randWhole(10, 90), numberL: randDec(90,300, x)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n                {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n                {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\n\r\nexport const subDecWhole = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                    {numberS:randWhole(1, 9), numberL: randDec(10,15, x)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n            {numberS:randWhole(10, 90), numberL: randDec(91,300, x)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n            {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n            {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = randNums.numberS\r\n    var numberL = randNums.numberL\r\n    var answer = roundDec(numberL-numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const subDecPV = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        var w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(6, 11, y)},\r\n                    {numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n            {numberS:randDec(10, 90, x), numberL: randDec(91,300, y)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL-numberS, w)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":6,"column":13,"nodeType":"73","messageId":"74","endLine":6,"endColumn":19},{"ruleId":"71","severity":1,"message":"75","line":7,"column":13,"nodeType":"73","messageId":"74","endLine":7,"endColumn":14},{"ruleId":"71","severity":1,"message":"76","line":8,"column":13,"nodeType":"73","messageId":"74","endLine":8,"endColumn":16},{"ruleId":"71","severity":1,"message":"77","line":9,"column":13,"nodeType":"73","messageId":"74","endLine":9,"endColumn":17},{"ruleId":"71","severity":1,"message":"78","line":25,"column":3,"nodeType":"73","messageId":"74","endLine":25,"endColumn":18},{"ruleId":"71","severity":1,"message":"79","line":27,"column":10,"nodeType":"73","messageId":"74","endLine":27,"endColumn":19},{"ruleId":"71","severity":1,"message":"80","line":186,"column":9,"nodeType":"73","messageId":"74","endLine":186,"endColumn":24},{"ruleId":"71","severity":1,"message":"81","line":213,"column":9,"nodeType":"73","messageId":"74","endLine":213,"endColumn":21},{"ruleId":"71","severity":1,"message":"82","line":234,"column":9,"nodeType":"73","messageId":"74","endLine":234,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":264,"column":5,"nodeType":"85","messageId":"86","endLine":264,"endColumn":21},{"ruleId":"71","severity":1,"message":"87","line":3,"column":18,"nodeType":"73","messageId":"74","endLine":3,"endColumn":26},{"ruleId":"88","severity":1,"message":"89","line":111,"column":10,"nodeType":"73","messageId":"90","endLine":111,"endColumn":17},{"ruleId":"88","severity":1,"message":"91","line":111,"column":19,"nodeType":"73","messageId":"90","endLine":111,"endColumn":26},{"ruleId":"88","severity":1,"message":"89","line":114,"column":10,"nodeType":"73","messageId":"90","endLine":114,"endColumn":17},{"ruleId":"88","severity":1,"message":"91","line":114,"column":19,"nodeType":"73","messageId":"90","endLine":114,"endColumn":26},{"ruleId":"71","severity":1,"message":"92","line":1,"column":34,"nodeType":"73","messageId":"74","endLine":1,"endColumn":46},{"ruleId":"71","severity":1,"message":"93","line":2,"column":5,"nodeType":"73","messageId":"74","endLine":2,"endColumn":12},{"ruleId":"71","severity":1,"message":"94","line":2,"column":14,"nodeType":"73","messageId":"74","endLine":2,"endColumn":22},{"ruleId":"71","severity":1,"message":"95","line":2,"column":24,"nodeType":"73","messageId":"74","endLine":2,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":39,"column":17,"nodeType":"98","messageId":"99","endLine":39,"endColumn":18},{"ruleId":"100","severity":1,"message":"101","line":68,"column":17,"nodeType":"102","messageId":"103","endLine":68,"endColumn":22},{"ruleId":"71","severity":1,"message":"104","line":71,"column":9,"nodeType":"73","messageId":"74","endLine":71,"endColumn":31},{"ruleId":"105","severity":1,"message":"106","line":190,"column":3,"nodeType":"107","messageId":"108","endLine":192,"endColumn":4},{"ruleId":"88","severity":1,"message":"109","line":166,"column":9,"nodeType":"73","messageId":"90","endLine":166,"endColumn":24},{"ruleId":"88","severity":1,"message":"109","line":172,"column":13,"nodeType":"73","messageId":"90","endLine":172,"endColumn":28},{"ruleId":"88","severity":1,"message":"110","line":198,"column":13,"nodeType":"73","messageId":"90","endLine":198,"endColumn":14},{"ruleId":"88","severity":1,"message":"110","line":304,"column":13,"nodeType":"73","messageId":"90","endLine":304,"endColumn":14},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'addsub' is defined but never used.","Identifier","unusedVar","'o' is defined but never used.","'alg' is defined but never used.","'docx' is defined but never used.","'PDFDownloadLink' is defined but never used.","'randWhole' is defined but never used.","'handleSelectOLD' is assigned a value but never used.","'handlePDFOLD' is assigned a value but never used.","'handlePDF2' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'girlList' is defined but never used.","no-redeclare","'numberS' is already defined.","redeclared","'numberL' is already defined.","'wrongOptions' is defined but never used.","'boyList' is defined but never used.","'boyList2' is defined but never used.","'sportList' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'createAnswerChoicesPDF' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'shuffleDecimals' is already defined.","'w' is already defined.","no-global-assign","no-unsafe-negation"]
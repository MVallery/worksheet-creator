[{"C:\\projects\\worksheet-creator\\src\\index.js":"1","C:\\projects\\worksheet-creator\\src\\reportWebVitals.js":"2","C:\\projects\\worksheet-creator\\src\\App.js":"3","C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js":"4","C:\\projects\\worksheet-creator\\src\\app-files\\general.js":"5","C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js":"6","C:\\projects\\worksheet-creator\\src\\create-worksheet.js":"7","C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js":"8","C:\\projects\\worksheet-creator\\src\\app-files\\tables.js":"9","C:\\projects\\worksheet-creator\\src\\app-files\\add-sub-fract.js":"10","C:\\projects\\worksheet-creator\\src\\app-files\\multiply.js":"11","C:\\projects\\worksheet-creator\\src\\components\\display-user-selection.js":"12","C:\\projects\\worksheet-creator\\src\\components\\user-inputs.js":"13","C:\\projects\\worksheet-creator\\src\\components\\input.js":"14","C:\\projects\\worksheet-creator\\src\\app-files\\divide.js":"15"},{"size":3789,"mtime":1608475342108,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":5376,"mtime":1610413753115,"results":"19","hashOfConfig":"17"},{"size":24432,"mtime":1609816705404,"results":"20","hashOfConfig":"17"},{"size":7471,"mtime":1610416476885,"results":"21","hashOfConfig":"17"},{"size":16709,"mtime":1610299317432,"results":"22","hashOfConfig":"17"},{"size":11281,"mtime":1610416416309,"results":"23","hashOfConfig":"17"},{"size":13550,"mtime":1610295391630,"results":"24","hashOfConfig":"17"},{"size":6826,"mtime":1610414823498,"results":"25","hashOfConfig":"17"},{"size":1013,"mtime":1609297303386,"results":"26","hashOfConfig":"17"},{"size":13655,"mtime":1609689214319,"results":"27","hashOfConfig":"17"},{"size":1548,"mtime":1609451057741,"results":"28","hashOfConfig":"17"},{"size":3629,"mtime":1610247650113,"results":"29","hashOfConfig":"17"},{"size":1013,"mtime":1609477038359,"results":"30","hashOfConfig":"17"},{"size":10764,"mtime":1609688316288,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"ahlkum",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"C:\\projects\\worksheet-creator\\src\\index.js",[],["70","71"],"C:\\projects\\worksheet-creator\\src\\reportWebVitals.js",[],"C:\\projects\\worksheet-creator\\src\\App.js",["72","73","74"],"C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js",["75","76","77","78","79","80","81"],"// import * as gen from './general.js'\r\nimport {randWhole, shuffleArray, wrongOptions, answerChoicesKey,\r\n        boyList, girlList, nameList, cityList, disasterList, sportList, candyList, forestAnimal, lakeAnimal, desertAnimal} from './general.js'\r\n\r\n\r\nexport const subWhole = (Options) => { //sport\r\n    var name = shuffleArray(nameList)\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    // var f = 'format'\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n\r\n    if (Options.level === \"2\") {\r\n        [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    \r\n    } else if (Options.level === \"3\") {\r\n        [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n    }\r\n    var answer= (numberL - numberS);\r\n    var wrong = shuffleArray(wrongOptions(answer, 'sub', numberL, numberS))\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${name[0]} played ${sport} for ${numberS.toLocaleString()} minutes last year. ${name[1]} ` +\r\n    `played ${sport} for ${numberL.toLocaleString()} minutes last year. How many more minutes did `+\r\n    `${name[1]} play than ${name[0]}?`)\r\n    var prob2 = (`${name[0]} played ${sport} for ${numberS.toLocaleString()} minutes last year. ${name[1]} `+\r\n    `played ${sport} for ${numberL.toLocaleString()} minutes last year. What is the difference between ` +\r\n    `the number of minutes ${name[1]} played and the number of minutes ${name[0]} played?`)\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n\r\n}\r\nexport const addWhole = (Options) => { //sports\r\n    var name = shuffleArray(nameList)\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n\r\n    } else if (Options.level ===\"3\") {\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    } \r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    \r\n    var problem = {text:    (`${name[0]} played ${sport} for ${(numberS).toLocaleString()} minutes last year. ${name[1]} `+\r\n                 `played ${sport} for ${(numberL).toLocaleString()} minutes last year. How many minutes did ` +\r\n                 `${name[0]} and ${name[1]} play altogether?`),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    \r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\nexport const subWhole2 = (Options) => { //candy\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var disaster = disasterList[randWhole(0, disasterList.length-1)]\r\n    var girl = shuffleArray(girlList)\r\n    var boy = shuffleArray(boyList)\r\n\r\n    var candy = shuffleArray(candyList)\r\n    var [numberS, numberM, numberL] = [randWhole(100, 500), randWhole(500, 699), randWhole(700, 999)];\r\n\r\n    if (Options === \"2\") {\r\n    [numberS, numberM, numberL] = [randWhole(1000, 4000), randWhole(4000, 7000), randWhole(7001, 9999)];\r\n\r\n    } else if (Options ===\"3\") {\r\n    [numberS, numberM, numberL] = [randWhole(1000, 4000), randWhole(4000, 7000), randWhole(7001, 9999)];\r\n    } \r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    \r\n    var prob1 = (`In a jar there are three different types of candies. There are ${numberS.toLocaleString()} ${candy[0]} `+\r\n        `, ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. What is the difference between `+ \r\n        `the number of ${candy[0]} and the number of ${candy[2]} in the jar?`)\r\n    var prob2 = (`${name} has a basket of candies. There are ${numberS} ${candy[0]}, `+\r\n        `${numberS.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. How many more `+\r\n        `${candy[2]} are in the basket than ${candy[0]} ?`)\r\n    var prob3 = (`${girl[0]} loves ${candy[0]} so much that she ate ${numberS.toLocaleString()} in the past month. `+\r\n        `This brought her total number of ${candy[0]} eaten in her life to ${numberL.toLocaleString()}. How much was `+\r\n        `her total ${candy[0]} eaten before this past month?`)\r\n    var prob4 = (`${boy[0]} is obsessed with ${candy[0]} so he decides to stock up in case of a ${disaster} coming soon.`+\r\n        `He buys ${numberL.toLocaleString()} ${candy[0]} but then on the way home he got really hungry so he ate `+\r\n        `${numberS.toLocaleString()} of the ${candy[0]}. How many ${candy[0]} does he have now?`)\r\n    var prob5 = (`${boy[0]} is obsessed with ${candy[0]} so he decides to stock up by purchasing ${numberL.toLocaleString()} in case of `+\r\n        `a ${disaster} coming soon.He decided that he had way too many and ended up giving ${numberS.toLocaleString()} of the ${candy[0]} `+\r\n        `to his friend ${boy[1]}. How many ${candy[0]} does he have left?`)\r\n    var randProb = [prob1, prob2, prob3, prob4, prob5][randWhole(0, 4)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n        console.log(problem)\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n            \r\n\r\n\r\n}\r\nexport const addWhole2 = (Options) => { //candy\r\n    var name = shuffleArray(nameList)\r\n    var girl = shuffleArray(girlList)\r\n    var boy = shuffleArray(boyList)\r\n    var disaster = disasterList[randWhole(0, disasterList.length-1)]\r\n\r\n    var candy = shuffleArray(candyList)\r\n    var [numberS, numberM, numberL] = [randWhole(100, 300), randWhole(300, 500), randWhole(500, 999)];\r\n\r\n    if (Options === \"2\") {\r\n    [numberS, numberM, numberL] = [randWhole(1000, 3000), randWhole(3000, 5000), randWhole(5001, 9999)];\r\n\r\n    } else if (Options ===\"3\") {\r\n    [numberS, numberM, numberL] = [randWhole(1000, 3000), randWhole(3000, 5000), randWhole(5001, 9999)];\r\n    } \r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`There are three different types of candies in a jar. There are ${numberS.toLocaleString()} ${candy[0]}`+\r\n    `, ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. How many total ${candy[0]} and ${candy[2]} are in the jar?`)\r\n    var prob2 = (`${name[0]} has a jar with three different types of candies inside. There are ${numberS.toLocaleString()} `+\r\n    `${candy[0]},  ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. `+\r\n    ` How many ${candy[2]} and ${candy[1]} are in the jar altogether?`)\r\n    var prob3 = (`${girl[0]} loves ${candy[0]} so much that she has already eaten ${numberL.toLocaleString()} in her life. `+\r\n    `If she eats ${numberS.toLocaleString()} more by the end of the year, how many total ${candy[0]} will she have eaten?`)\r\n    var prob4 = (`${boy[0]} is obsessed with ${candy[0]} so he already has ${numberS.toLocaleString()} in his pantry at home. `+\r\n    `He begins to worry about a ${disaster} coming soon, so he decides`+\r\n    `to stock up by purchasing ${numberL.toLocaleString()} ${candy[0]} just in case. How many ${candy[0]} does he have now?`)\r\n    var randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole3 = (Options) => { //animals\r\n    var randForestAnimal = shuffleArray(forestAnimal)\r\n    var randDesertAnimal = shuffleArray(desertAnimal)\r\n    var randLakeAnimal = shuffleArray(lakeAnimal)\r\n    var randAnimal = shuffleArray([randDesertAnimal, randForestAnimal, randLakeAnimal])\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n    var place\r\n    if (randAnimal[0] === randDesertAnimal) {\r\n        place = 'desert'\r\n    }else if (randAnimal[0] === randForestAnimal) {\r\n        place = 'forest'\r\n    }else if (randAnimal[0] === randLakeAnimal) {\r\n        place = 'lake'\r\n    }\r\n    if (Options === \"2\") {\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n    } else if (Options ===\"3\") {\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    } \r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`There are ${numberL.toLocaleString()} ${randAnimal[0][0]}s and ${randAnimal[0][1]}s in the `+\r\n        `${place}. If there are ${numberS.toLocaleString()} ${randAnimal[0][0]}s in the ${place}, `+\r\n        `how many ${randAnimal[0][1]}s are in the ${place}?`)\r\n    var prob2 = (`In the ${place} there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s and `+\r\n        `${numberL.toLocaleString()} ${randAnimal[0][0]}s. What is the difference beween the number of `+\r\n        `${randAnimal[0][0]}s and ${randAnimal[0][1]}s in the ${place}?`)\r\n    var prob3 = (`Researchers are surveying the ${place}. They found a total of ${numberL.toLocaleString()} `+ \r\n        `${randAnimal[0][1]}s, and a total of ${numberS.toLocaleString()} ${randAnimal[0][0]}s. How many more `+\r\n        `${randAnimal[0][1]}s are there in the ${place} than ${randAnimal[0][0]}s?`)\r\n    var randProb = [prob1, prob2, prob3][Math.floor(Math.random()*2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n\r\n            \r\n}\r\nexport const addWhole3 = (Options) => { //animals\r\n    var randForestAnimal = shuffleArray(forestAnimal)\r\n    var randDesertAnimal = shuffleArray(desertAnimal)\r\n    var randLakeAnimal = shuffleArray(lakeAnimal)\r\n    var randAnimal = shuffleArray([randDesertAnimal, randForestAnimal, randLakeAnimal])\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n    var place\r\n    if (randAnimal[0] === randDesertAnimal) {\r\n        place = 'desert'\r\n    }else if (randAnimal[0] === randForestAnimal) {\r\n        place = 'forest'\r\n    }else if (randAnimal[0] === randLakeAnimal) {\r\n        place = 'lake'\r\n    }\r\n    if (Options === \"2\") {\r\n        [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n    } else if (Options ===\"3\") {\r\n        [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    } \r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`There are ${numberL.toLocaleString()} ${randAnimal[0][0]}s in the ${place}. If there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s `+\r\n        `in the ${place} , how many total ${randAnimal[0][0]}s and ${randAnimal[0][1]} are in the ${place}?`)\r\n    var prob2 = (`In the ${place} there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s and ${numberL.toLocaleString()} ${randAnimal[0][0]}s. `+ \r\n        `How many ${randAnimal[0][0]}s and ${randAnimal[0][1]}s are in the ${place} combined?`)\r\n    var prob3 = (`Researchers are surveying the ${place}. They found a total of ${numberL.toLocaleString()} `+\r\n        `${randAnimal[0][1]}s, and a total of ${numberS.toLocaleString()} ${randAnimal[0][0]}s. How many animals did the researchers `+\r\n        `find at the ${place} combined?`)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n\r\n            \r\n}\r\n\r\n\r\nexport const addWhole4 = (Options) => { //youtube\r\n    var boy = shuffleArray(boyList)\r\n    var girl = shuffleArray(girlList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), randWhole(30000, 50000), randWhole(50000, 99900)];\r\n\r\n    if (Options === \"2\") {\r\n    [numberS, numberM, numberL] = [randWhole(100000, 300000), randWhole(300000, 500000), randWhole(500100, 999900)];\r\n\r\n    } else if (Options ===\"3\") {\r\n    [numberS, numberM, numberL] = [randWhole(1000000, 3000000), randWhole(3000000, 5000000), randWhole(5001000, 9999000)];\r\n    } \r\n    var videoAdj = ['hilarious', 'funny', 'silly', 'popular', 'viral'][randWhole(0,4)]\r\n    var videoTopic = ['dog', 'fashion', 'cat', 'music', 'tutorial', 'cooking' ][randWhole(0,6)]\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${boy[0]} had ${numberL.toLocaleString()} subscribers on his youtube channel as of last month. This month so far he has gained `+\r\n                `${numberS.toLocaleString()} subscribers after making a ${videoAdj} video. How many subscribers does his channel have?`)\r\n    var prob2 = (`${girl[0]} had ${numberL.toLocaleString()} subscribers on her youtube channel as of last month. This month her subscriber count has increased by `+\r\n                `${numberS.toLocaleString()} after she made a very popular ${videoTopic} video. How many subscribers does her channel have now?`)\r\n    var prob3 = (`${boy[0]} got ${numberL.toLocaleString()} views on his latest ${videoTopic} video. His previous video got ${numberS.toLocaleString()} views. How `+\r\n                `many combined views did the two videos get?`)\r\n    var prob4 = (`${girl[0]} currently has ${numberS.toLocaleString()} subscribers on her channel. Her goal is to reach ${numberL.toLocaleString()} subscribers by `+\r\n                `the end of the year. How many more subscribers will she need to get in order to reach her goal?`)\r\n    var randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole4 = (Options) => { //youtube\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var boy = shuffleArray(boyList)\r\n    var girl = shuffleArray(girlList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), randWhole(30000, 50000), randWhole(50000, 99900)];\r\n\r\n    if (Options === \"2\") {\r\n    [numberS, numberM, numberL] = [randWhole(10000, 300000), randWhole(300000, 500000), randWhole(500100, 999900)];\r\n\r\n    } else if (Options ===\"3\") {\r\n    [numberS, numberM, numberL] = [randWhole(1000000, 3000000), randWhole(3000000, 5000000), randWhole(5001000, 9999000)];\r\n    } \r\n    var reason = [`hasn't been making new videos`, `hasn't been actively making videos`, \r\n                `has been inactive recently`, `made a video that the subscribers did not like`][randWhole(0,3)]\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${boy[0]} had ${numberL.toLocaleString()} subscribers on his youtube channel as of last month. This month so far he has lost `+\r\n                `${numberS.toLocaleString()} subscribers because he ${reason}. How many subscribers does his channel have now?`)\r\n    var prob2 = (`${girl[0]} had ${numberL.toLocaleString()} subscribers on her youtube channel as of last month. This month she has lost `+\r\n                `${numberS.toLocaleString()} subscribers because she ${reason}. How many subscribers does her channel have?`)\r\n    var prob3 = (`${boy[0]} got ${numberL.toLocaleString()} views on his latest video. His previous video got ${numberS.toLocaleString()} views. How `+\r\n                `many more views did his latest video get than his previous video?`)\r\n    var prob4 = (`${girl[0]} got ${numberS.toLocaleString()} views on her latest video. Her other video went viral last week and got ${numberL.toLocaleString()} views. How `+\r\n                `many more views did her viral video get than her latest video?`)\r\n    var randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\nexport const addWhole5 = (Options) => { //population\r\n    // var name = nameList[randWhole(0, nameList.length-1)]\r\n    var city = shuffleArray(cityList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), city[1].pop, city[0].pop];\r\n    if (Options === \"2\") {\r\n        [numberS, numberM, numberL] = [randWhole(100000, 300000), randWhole(300000, 500000), city[0].pop];\r\n    \r\n        }\r\n    var year = randWhole(2015,2019)\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${city[0].city} had a population of ${numberL.toLocaleString()} as of the end of the year ${year}. Since `+\r\n                `then the city has increased in population by ${numberS.toLocaleString()}. What is the current population of ${city[0].city}?`)\r\n    var prob2 = (`The population of ${city[0].city} has increased by ${numberS.toLocaleString()} since the end of the year ${year}. `+\r\n                `the population before then was ${numberL.toLocaleString()}. What is the new population of ${city[0].city}?`)\r\n    var prob3 = (`Since the beginning of the year ${year} the population of ${city[0].city} has increased by ${numberS.toLocaleString()}. `+\r\n                `If the population started off ${year} at ${numberL.toLocaleString()}, how much is the current population?`)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole5 = (Options) => { //population\r\n    // var name = nameList[randWhole(0, nameList.length-1)]\r\n    var city = shuffleArray(cityList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), city[1].pop, city[0].pop];\r\n    if (Options === \"2\") {\r\n        [numberS, numberM, numberL] = [randWhole(100000, 300000), randWhole(300000, 500000), city[0].pop];\r\n    \r\n        }\r\n    var year = randWhole(2015,2019)\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${city[0].city} had a population of ${numberL.toLocaleString()} as of the end of the year ${year}. Since `+\r\n                `then the city has decreased in population by ${numberS.toLocaleString()}. What is the current population of ${city[0].city}?`)\r\n    var prob2 = (`The population of ${city[0].city} has decreased by ${numberS.toLocaleString()} since the end of the year ${year}. `+\r\n                `the population before then was ${numberL.toLocaleString()}. What is the new population of ${city[0].city}`)\r\n    var prob3 = (`Since the beginning of the year ${year} the population of ${city[0].city} has decreased by ${numberS.toLocaleString()}. `+\r\n                `If the population started off ${year} at ${numberL.toLocaleString()}, how much is the current population?`)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole6 = (Options) => { //space distances, elves army of goblins invades, \r\n    // var name = nameList[randWhole(0, nameList.length-1)]\r\n    var city = shuffleArray(cityList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), city[1].pop, city[0].pop];\r\n    if (Options === \"2\") {\r\n        [numberS, numberM, numberL] = [randWhole(100000, 300000), city[1].pop, city[0].pop];\r\n    \r\n        }\r\n    var year = randWhole(2015,2019)\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (``)\r\n    var prob2 = (``)\r\n    var prob3 = (``)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\n//Problem ideas: space distance? elves army of goblins, factory producing products, movies making money, tourists that visit a city/country, city = smaller numbers, country = larger. \r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const addDec = (Options) => { //sport\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    var [numberS, numberL] = [(Math.random()*49999+10011).toFixed(1),  (Math.random()*999999+500011).toFixed(2)];\r\n    // var f = 'format'\r\n    var answer= (numberL + numberS);\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var wrong = gen.shuffleArray(gen.wrongOptions(answer, 'add', numberL, numberS))\r\n    // var tempAC = [answer, wrong[0], wrong[1], wrong[2]]\r\n    // var AC = gen.shuffleArray(tempAC)\r\n    var problem = { text: (`${name[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${name[1]} `+\r\n                `played ${sport} for${(numberL).toString()} minutes last year. How many minutes did `+\r\n                `${name[0]} and ${name[1]} play altogether?`),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n\r\n    // console.log(problem)\r\n    return problem\r\n    \r\n}\r\n\r\nexport const subDec = (Options) => { //sport\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    // var f = 'format'\r\n    var [numberS, numberL] = [(Math.random()*49999+10011).toFixed(1),  (Math.random()*999999+500011).toFixed(2)];\r\n\r\n    var answer= (numberL - numberS);\r\n    var wrong = shuffleArray(wrongOptions(answer, 'sub', numberL, numberS))\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var sub1 = (`${name[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${name[1]} `+\r\n    `played ${sport} for ${(numberL).toString()} minutes last month. How many more minutes did `+\r\n     `${name[1]} play than ${name[0]}?`)\r\n    var sub2 = (`${name[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${name[1]} `+\r\n     `played ${sport} for ${(numberL).toString()} minutes last month. What is the difference between `+\r\n    `the number of minutes ${name[1]} played and the number of minutes ${name[0]} played?`)\r\n\r\n    var randSub = [sub1, sub2][Math.floor(Math.random())]\r\n    var problem = {text: randSub,\r\n                answerChoices: AC,\r\n                correctAnswer: answer}\r\n    return problem\r\n}\r\nexport const randAddWhole = (options) => {\r\n    var probArray = [addWhole, addWhole2, addWhole3, addWhole4, addWhole5]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\nexport const randSubWhole = (options) => {\r\n    var probArray = [subWhole, subWhole2, subWhole3, subWhole4, subWhole5, subWhole6]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}","C:\\projects\\worksheet-creator\\src\\app-files\\general.js",["82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],"C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js",["111","112","113","114","115","116","117","118","119","120","121"],"import {randWhole, shuffleArray, answerChoicesKey, randDec\r\n    } from './general.js'\r\n// var simpleQArray = ['What is the value of the expression? \\n',\r\n// 'An expression is shown below, what value is equivalent to the expression?\\n',\r\n// 'Which value is equivalent to the expression below? \\n']\r\nvar simpleQArray = shuffleArray(['What is the value of the expression? \\n',\r\n                  'An expression is shown below, what value is equivalent to the expression?\\n',\r\n                  'Which value is equivalent to the expression below? \\n'])\r\n\r\nconst orderOpsNumbers = (options) => {\r\n    var smallDec = [randDec(1,9,1), randDec(1,9,2), randDec(0.01,2), randDec(0.01,1,1), randDec(0.01,0.1,2) ]\r\n    var largeDec = [[randDec(10, 20,1), randDec(10,20,2)]]\r\n    if (options.specify === 'wholeS'){\r\n        var numList = [randWhole(2,5), randWhole(2,5), randWhole(2,9), randWhole(2,9),randWhole(6,9),randWhole(6,9)]\r\n    } else if (options.specify === 'wholeM') {\r\n        numList = [randWhole(2,9), randWhole(2,9),randWhole(10,20),randWhole(10,20),randWhole(21,30),randWhole(21,30)]\r\n    } else if (options.specify === 'wholeL') {\r\n        numList = [randWhole(20,50), randWhole(20,50), randWhole(30,70), randWhole(30,70), randWhole(51,70), randWhole(51,70)]\r\n    } else if (options.specify === 'wholeXL') {\r\n        numList = [randWhole(50,70), randWhole(50,70),randWhole(70,100),randWhole(70,100),randWhole(100,300),randWhole(100,300)]\r\n    } else if (options.specify === 'decimalS') {\r\n        numList = [smallDec[randWhole(0, smallDec.length-1)], smallDec[randWhole(0, smallDec.length-1)], \r\n        randWhole(2,9),randWhole(2,9),randWhole(2,9),randWhole(2,9)]\r\n    } else if (options.specify === 'decimalL') {\r\n        numList = [largeDec[randWhole(0, largeDec.length-1)], largeDec[randWhole(0, smallDec.length-1)],\r\n        randWhole(10,19), randWhole(10,19),randWhole(10,30),randWhole(10,30),randWhole(20,30),randWhole(20,30)]\r\n    } else if (options.specify === 'negativeS'){\r\n        numList = [randWhole(-9,-1), randWhole(-9,-1), randWhole(-9, 9), randWhole(-9,9), randWhole(1,10),randWhole(1,10)]\r\n    } else {\r\n        numList = [5, 5, 5, 5, 5, 5]\r\n    }\r\n\r\n    // var numList = [{\r\n    //   sWhole: [randWhole(2,9), randWhole(2,9), randWhole(2,9), randWhole(2,9),randWhole(2,9),randWhole(2,9)],\r\n    //   mWhole:[randWhole(10,30), randWhole(10,30),randWhole(10,30),randWhole(10,30),randWhole(10,30),randWhole(10,30)],\r\n    //   lWhole:[randWhole(30,70), randWhole(30,70), randWhole(30,70), randWhole(30,70), randWhole(30,70), randWhole(30,70)],\r\n    //   xlWhole: [randWhole(70,200), randWhole(70,200),randWhole(70,200),randWhole(70,200),randWhole(70,200),randWhole(70,200)],\r\n    //   sDecimal: [randDec(1,9,1), randDec(1,9,2), randDec(0,1,2), randDec(0,1,1), randDec(0,0.1,2) ],\r\n    //                 //     OT           OTH             TH                  T                   H     \r\n    //   lDecimal: [randDec(10, 20,1), randDec(10,20,2)],\r\n    //   sNegative:[randWhole(-9,-1), randWhole(-9,-1), randWhole(-9,-1), randWhole(-9,-1), randWhole(-9,-1), randWhole(-9,-1)],\r\n    // //   mNegative:[randWhole]\r\n    // }]\r\n\r\n\r\nreturn numList\r\n}                  \r\nexport const orderOps = (options) => { //oooA\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(options) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberL2*numberS\r\n    if (options.steps === \"3\") {\r\n        var OoOA = `${numberL} + (${dividend} ÷ ${numberS} - ${numberS2})` //10 + (40÷8 - 2)\r\n        var OoOB = `(${dividend} ÷ ${numberS} - ${numberS2}) + ${numberL} ` //(40÷8 - 9) +10\r\n        var OoOC = `${numberL} + ${dividend} ÷ ${numberS} - ${numberS2}` //10 + 40÷8 - 2\r\n        var answer = numberL+(numberS*numberL2/numberS-numberS2)\r\n        var wrong = [Math.abs(numberL+dividend/numberS-numberS2),        \r\n            Math.floor(((numberL+dividend)/numberS)-numberS2), answer*-1,\r\n            Math.floor((numberL+dividend)/(numberS-numberS2)), answer+1]\r\n\r\n      } else if (options.steps === '4') {\r\n        OoOA = `${numberL} + (${dividend} ÷ ${numberS} - ${numberS2}) × ${numberM2}` //10 + (40÷8 - 9) × 10\r\n        OoOB = `${numberL} + ${numberM2}(${dividend} ÷ ${numberS} - ${numberS2}) `   //10 + 10(40÷8 - 9)\r\n        OoOC = `${numberM2}(${dividend} ÷ ${numberS} - ${numberS2}) + ${numberL} `  //10(40÷8 - 9)+10\r\n        answer = numberL+((dividend/numberS-numberS2)*numberM2)\r\n        wrong = [Math.abs(numberL+(dividend)/numberS-numberS2*numberM2),        \r\n            (Math.floor(((numberL+dividend))/numberS)-numberS2)*numberM2,\r\n            (((numberL+dividend)/numberS)-numberS2)*numberM2,\r\n            Math.abs(numberL+dividend/numberS-(numberS2*numberM2))]\r\n\r\n      } else  { //no selection/5\r\n        OoOA = `${numberM2} + (${dividend} ÷ ${numberS} - ${numberS2}) × ${numberL} - ${numberM}` //10 + (40÷8-9) x 10 - 2 \r\n        OoOB = `${numberM2} + ${numberL}(${dividend} ÷ ${numberS} - ${numberS2}) - ${numberM}` //10 + 10(40÷8-9) - 2 \r\n        OoOC = `${numberL}(${dividend} ÷ ${numberS} - ${numberS2}) - ${numberM} + ${numberM2}` //10(40÷8-9) - 2 + 10\r\n        answer = numberM2+((dividend/numberS-numberS2)*numberL)-numberM\r\n        wrong = [Math.abs((numberL+dividend)/numberS-numberS2*numberL-numberM),        \r\n            (Math.floor(((numberM2+numberL)*dividend)/numberS)-numberS2-numberM),\r\n            (((numberM2+dividend)/numberS)-numberS2)*numberL-numberM,\r\n            Math.abs((numberM2+dividend/numberS-numberS2)*numberL-numberM+1)]\r\n\r\n    }\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps2 = (options) => { //oooB\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(options) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberM2*numberS2\r\n    if (options.steps === \"3\") { // 8 x (9- 40/5)\r\n        var OoOA = `${numberM} × (${numberL}-${dividend} ÷ ${numberM2})`\r\n        var OoOB = `(${numberL} - ${dividend} ÷ ${numberM2}) × ${numberM}`\r\n        var OoOC = `${numberM}(${numberL}-${dividend} ÷ ${numberM2})`\r\n        var answer = numberM*(numberL-(dividend/numberM2))\r\n        var wrong = [numberM*numberL-numberS2*numberM2/numberM2, \r\n            numberM*numberL-(numberS2*numberM2/numberM2), answer*-1,\r\n            Math.floor((((numberM*numberL)-numberS2)*numberM2)/numberM2)]\r\n\r\n      } else if (options.steps === '4') { //8(9 - 40/5) + 9\r\n        OoOA = `${numberM}(${numberL}-${dividend} ÷ ${numberM2}) + ${numberL2}`\r\n        OoOB = `(${numberL} - ${dividend} ÷ ${numberM2}) × ${numberM} + ${numberL2}`\r\n        OoOC = `${numberL2} + (${numberL}-${dividend} ÷ ${numberM2}) × ${numberM}`\r\n        answer = numberM*(numberL-(dividend/numberM2)+numberL2)\r\n        wrong = [numberM*numberL-numberS2*numberM2/numberM2+numberL2, answer*-1,\r\n                numberM*numberL-(numberS2*numberM2/numberM2)+numberL2,\r\n                Math.floor((((numberM*numberL)-numberS2)*numberM2)/numberM2)+numberL2]\r\n\r\n      } else { //8 (5 x 9-40/5) + 9\r\n        OoOA = `${numberM} (${numberS} × ${numberL} - ${dividend} ÷ ${numberM2}) + ${numberL2}`\r\n        OoOB = `${numberM} (${numberL} × ${numberS} - ${dividend} ÷ ${numberM2}) + ${numberL2}`\r\n        OoOC = `${numberL2} + ${numberM} (${numberS} × ${numberL} - ${dividend} ÷ ${numberM2})`\r\n\r\n        answer = numberM*(numberS*numberL-(dividend/numberM2))+numberL2\r\n        wrong = [numberM*numberS*numberL-numberS2*numberM2/numberM2+numberL2, \r\n                numberM*numberS*(numberL-(numberS2*numberM2/numberM2)+numberL2),\r\n                Math.floor((((numberM*numberS*numberL)-numberS2)*numberM2))+numberL2,\r\n                answer*-1]\r\n    }        \r\n\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps3 = (options) => { //oooC\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(options) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberM2*numberS2\r\n    if (options.steps === \"3\") { //(9-2)+(8+5)\r\n        var OoOA = `(${numberL} - ${numberS2}) + (${numberL2} + ${numberM2})`\r\n        var OoOB = `(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2})`\r\n        var OoOC = `(${numberM2} + ${numberL2}) + (${numberL} - ${numberS2})`\r\n        var answer = (numberL-numberS2)+(numberL2+numberM2)\r\n        var wrong = [numberL-numberS2+numberL2-numberM2, \r\n            answer+3, answer*-1,\r\n            (numberL+numberS2)+numberL2+numberM2\r\n        ]\r\n\r\n      } else if (options.steps === '4') { // (9-4) + 5(8+2)  or 5(8+2) + (9-4) or (8+2)x5 + (9-4)\r\n        OoOA = `(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})`\r\n        OoOB = `${numberM}(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2})`\r\n        OoOC = `(${numberM2} + ${numberL2}) × ${numberM} + (${numberL} - ${numberS2})`\r\n        answer = (numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberL-numberS2+numberM*numberL2+numberM2, \r\n            (numberL-numberS2+numberM)*(numberL2+numberM2),\r\n            ((numberL-numberS2+numberM)*numberL2)+numberM2\r\n        ]\r\n      } else  { // 2(9-4) + 5(8+2)\r\n        OoOA = `${numberS}(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})`\r\n        OoOB = `${numberM}(${numberL2} + ${numberM2}) + ${numberS}(${numberL} - ${numberS2}) `\r\n        OoOC = `${numberM}(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2}) × ${numberS} `\r\n\r\n\r\n        answer = numberS*(numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberS*numberL-numberS2+numberM*numberL2+numberM2, \r\n            (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2,\r\n            (((numberS*numberL-numberS2)+numberM)*numberL2)+numberM2, answer*-1\r\n        ]\r\n    }        \r\n\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps4 = (options) => { //oooD\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(options) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberM2*numberS2\r\n    if (options.steps === \"3\") { //[10+(40-10)]x40\r\n        var OoOA = `[${numberL2} + (${numberL} - ${numberS})] × ${numberM2}`\r\n        var OoOB = `${numberM2}[${numberL2} + (${numberL} - ${numberS})]`\r\n        var OoOC = `${numberM2}(${numberL} - ${numberS} + ${numberL2})`\r\n        var answer = (numberL2+(numberL-numberS))*numberM2\r\n        var wrong = [(numberL2+(numberL-numberS))*numberM2+1, \r\n                    (numberL2)*numberL-numberS,\r\n                    numberL2+Math.abs(numberL-numberS*numberM2),   \r\n                    (((numberL2)*numberL)-numberS)*numberM2, answer*-1]\r\n\r\n      } else if (options.steps === '4') { // [100+(8x40-10)]x40\r\n        OoOA = `[${numberL2} + (${numberS2} × ${numberL} - ${numberS})] × ${numberM2}`\r\n        OoOB = `${numberM2}[${numberL2} + (${numberS2} × ${numberL} - ${numberS})]`\r\n        OoOC = `${numberM2}[(${numberS2} × ${numberL} - ${numberS}) + ${numberL2}]`\r\n        answer = (numberL2+(numberS2*numberL-numberS))*numberM2\r\n        wrong = [(numberL2+(numberS2*numberL-numberS))*numberM2+1, \r\n                (numberL2+numberS2)*numberL-numberS,\r\n                 numberL2+Math.abs(numberS2*numberL-numberS*numberM2),   \r\n                 (((numberL2+numberS2)*numberL)-numberS)*numberM2, answer*-1]\r\n      } else  { //\r\n        OoOA = `${numberM2}[${numberL2} + (${numberM} + ${numberS2} × ${numberL} - ${numberS})]`\r\n        OoOB = `${numberM2}[${numberL2} + (${numberS2} × ${numberL} - ${numberS} + ${numberM})]`\r\n        OoOC = `[${numberL2} + (${numberS2} × ${numberL} - ${numberS} + ${numberM})] × ${numberM2} `\r\n        answer = (numberL2+(numberM+numberS2*numberL-numberS))*numberM2\r\n        wrong = [(numberL2+(numberM+numberS2*numberL-numberS))*numberM2+1, \r\n                (Math.floor(numberL2+numberM+numberS2)*numberL-numberS),\r\n                 Math.floor(numberL2+numberM+Math.abs(numberS2*numberL-numberS*numberM2)),   \r\n                 Math.floor((((numberL2+numberS2+numberM)*numberL)-numberS)*numberM2),\r\n                answer*-1] \r\n    }        \r\n\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps5 = (options) => { //oooE\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(options) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberM2*numberS2\r\n    if (options.steps === \"3\") { //5[9+(7-2)]\r\n        var OoOA = `${numberL2}[${numberL} + (${numberM2} - ${numberS2})]`\r\n        var OoOA = `${numberL2}[(${numberM2} - ${numberS2}) + ${numberL}]`\r\n        var OoOA = `[${numberL} + (${numberM2} - ${numberS2})] × ${numberL2}`\r\n        var answer = numberL2*(numberL+(numberM2-numberS2))\r\n        var wrong = [numberL2+(numberL+(numberM2+numberM2+numberM2-numberS2)), \r\n                    numberL2*(numberL+(numberM2-numberS2)),\r\n                    numberL2*numberL + numberM2, \r\n                    (numberL2*numberL)*numberM2-numberS2]\r\n\r\n      } else if (options.steps === '4') { // 5[9+6(7-2)]\r\n        OoOA = `${numberL2}[${numberL} + ${numberM}(${numberM2} - ${numberS2})]`\r\n        OoOA = `${numberL2}[${numberM}(${numberM2} - ${numberS2}) + ${numberL}]`\r\n        OoOA = `${numberL2} × [${numberL} + ${numberM}(${numberM2} - ${numberS2})]`\r\n        answer = numberL2*(numberL+numberM*(numberM2-numberS2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2-numberS2)), \r\n                numberL2*(numberL+numberM)*(numberM2-numberS2),\r\n                numberL2*numberL + (numberM*numberM2-numberS2), \r\n                ((numberL2*numberL+numberM)*numberM2)-numberS2]\r\n      } else { // 5[9+6(7x3-2)]\r\n        OoOA = `${numberL2}[${numberL} + ${numberM}(${numberM2} × ${numberS} - ${numberS2})]`\r\n        OoOA = `${numberL2}[${numberM}(${numberM2} × ${numberS} - ${numberS2}) + ${numberL}]`\r\n        OoOA = `${numberL2} × [${numberM}(${numberS} × ${numberM2} - ${numberS2}) + ${numberL}]`\r\n        answer = numberL2*(numberL+numberM*(numberM2*numberS-numberS2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2*numberS-numberS2)), \r\n                numberL2*(numberL+numberM)*(numberM2*numberS-numberS2),\r\n                numberL2*numberL + (numberM*numberM2*numberS-numberS2), \r\n                ((numberL2*numberL+numberM)*numberM2*numberS)-numberS2]\r\n    }        \r\n\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\n\r\n\r\nexport const randOrderOps = (options) => {\r\n    var probArray = [orderOps, orderOps2, orderOps3, orderOps4, orderOps5]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n//ideas: \r\n//make order of op problems the answer choices and have them select the one that is or is not the same as a given answer. \r\n\r\n// give two problems asking if the given problems have the same answer. (make it 50/50)\r\n\r\n//make it show student solving and they identify what step was messed up.\r\n\r\n","C:\\projects\\worksheet-creator\\src\\create-worksheet.js",["122","123","124","125","126","127"],"C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js",["128"],"import {randWhole, randDec, roundDec, shuffleArray, wrongOptions, answerChoicesKey} from './general.js'\r\n\r\nexport const divideDec = (Options) => {\r\n    var answer = randDec(1, 9, 2)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = roundDec(answer*divisor, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 2)\r\n    divisor = randWhole(2, 11)\r\n    dividend = roundDec(answer*divisor, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(1, 9, 2)\r\n        divisor = randWhole(12, 50)\r\n        dividend = roundDec(answer*divisor, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec = (Options) => {\r\n    var numberS = randDec(1, 9, 2)\r\n    var numberL = randWhole(1, 9)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, 2)\r\n    numberL = randWhole(11, 99)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        numberS = randDec(1, 9, 2)\r\n        numberL = randWhole(13,99)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {text:    (`${numberS} x ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec2 = (Options) => {\r\n    var pv = randWhole(1, 2)\r\n    var numberS = randDec(1, 9, pv)\r\n    var numberL = randDec(0, 1, pv)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, pv)\r\n    numberL = randDec(11, 99, pv)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        numberS = randDec(1, 9, pv)\r\n        numberL = randDec(13, 99, pv)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {text:    (`${numberS} x ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const randMultDec = (options) => {\r\n    var probArray = [multDec, multDec2]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n\r\nexport const divideDec2 = (Options) => {\r\n    var answer = randDec(0, 1, 3)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(3)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 3)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(3)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(1, 9, 3)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(3)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const divideDec3 = (Options) => {\r\n    var answer = randDec(10, 90, 1)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(1)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(100, 900, 1)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(1)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(100, 900, 1)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(1)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\nexport const randDivDec = (options) => {\r\n    var probArray = [divideDec, divideDec2, divideDec3]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const divideDecOLD = (Options) => {\r\n    var [dec1, dec2, dec3] = [randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)]\r\n    var x\r\n    // var shuffleDecimals = shuffleArray([randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)])\r\n    var shuffleDecimals = shuffleArray([dec1, dec2, dec3])\r\n    if (shuffleDecimals[0] === dec1){\r\n        x = 2\r\n    } else if (shuffleDecimals[1] === dec2) {\r\n        x = 3\r\n    } else {\r\n        x = 1\r\n    }\r\n    var answer = shuffleDecimals[0] \r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(x)\r\n\r\n    if (Options === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n    answer = shuffleDecimals[0]\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(x)\r\n\r\n    } else if (Options ===\"3\") {\r\n        shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n        answer = shuffleDecimals[0]\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(x)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\n\r\n\r\n\r\n\r\nexport const addDecPV = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(5, 9, y)},\r\n                {numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                {numberS:randDec(10, 90, x), numberL: randDec(90, 300, y)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length-1)]\r\n\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, w)\r\n    // console.log(numberL+numberS)\r\n    // console.log(answer)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const addDecWhole = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                {numberS:randWhole(1, 9), numberL: randDec(9,15, x)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n                {numberS:randWhole(10, 90), numberL: randDec(90,300, x)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n                {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n                {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length-1)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const randAddDec = (options) => {\r\n    var probArray = [addDecWhole, addDecPV]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n\r\nexport const subDecWhole = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                    {numberS:randWhole(1, 9), numberL: randDec(10,15, x)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n            {numberS:randWhole(10, 90), numberL: randDec(91,300, x)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n            {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n            {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length-1)]\r\n    var numberS = randNums.numberS\r\n    var numberL = randNums.numberL\r\n    var answer = roundDec(numberL-numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const subDecPV = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        var w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(6, 11, y)},\r\n                    {numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n            {numberS:randDec(10, 90, x), numberL: randDec(91,300, y)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length-1)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL-numberS, w)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const randSubDec = (options) => {\r\n    var probArray = [subDecPV, subDecWhole]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n","C:\\projects\\worksheet-creator\\src\\app-files\\tables.js",["129","130","131","132"],"C:\\projects\\worksheet-creator\\src\\app-files\\add-sub-fract.js",["133"],"import {Fraction} from 'fraction.js'\r\nimport {randWhole} from './general.js'\r\n// import * as math from 'mathjs'\r\nconst { create, all } = require('mathjs')\r\n\r\nconst config = {\r\n    // Default type of number\r\n    // Available options: 'number' (default), 'BigNumber', or 'Fraction'\r\n    number: 'Fraction'\r\n  }\r\nconst math = create(all, config)\r\n\r\nexport const addFract = () => {\r\n    var fract1 = math.fraction('1/2')\r\n    var fract2 = math.fraction('3/4')\r\n    var answer = math.format(math.add(fract1, fract2))\r\n    console.log(fract1)\r\n    console.log(math.fraction('1/2'))\r\n\r\n    // var f = 'format'\r\n    var AC = [answer, 'this is wrong', 'this is wrong2', 'this is wrong3']\r\n    var prob1 = (`${math.format(fract1)}+${math.format(fract2)}`)\r\n    var prob2 = (`${math.format(fract2)}+${math.format(fract1)}`)\r\n    var randProb = [prob1.toString(), prob2.toString()][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\n","C:\\projects\\worksheet-creator\\src\\app-files\\multiply.js",["134","135","136","137","138","139"],"import * as g from \"./general\";\r\nimport {randWhole, shuffleArray, answerChoicesKey, wrongOptions, cap} from './general'\r\n\r\nconst multNumbers = (options) =>{\r\n    if (options.specify === '1') { //4 by 1\r\n        var [numberS, numberM, numberL] = [randWhole(2, 9), randWhole(12, 67), randWhole(1000, 9999)];\r\n\r\n    }else if (options.specify === \"2\") { // 2 by 2\r\n    [numberS, numberM, numberL] = [randWhole(12, 49), randWhole(12, 67), randWhole(50, 99)];\r\n\r\n    } else if (options.specify ===\"3\") { // 3 by 2\r\n    [numberS, numberM, numberL] = [randWhole(20, 99), randWhole(20, 90), randWhole(102, 999)];\r\n    } else{\r\n        [numberS, numberM, numberL] = [randWhole(20, 99), randWhole(20, 90), randWhole(102, 999)];\r\n\r\n        // var randQ = [[randWhole(2,9), randWhole(1000,9999)] //error cannot read property (random number) of undefined\r\n        //             [randWhole(20,99), randWhole(102,999)]\r\n        //             [randWhole(12,49), randWhole(50,99)]]\r\n        // var randArr = shuffleArray(randQ)\r\n        // // [numberS, numberM, numberL] = [randArr[0][0],randWhole(12,90), randArr[0][1]]\r\n\r\n    }\r\n    return [numberS, numberM, numberL]\r\n}\r\n\r\nexport const multWhole = (options) => { //basic product/sum/difference\r\n    var numberList = multNumbers(options)\r\n    var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    if (options.level === '1') {\r\n        var prob1 = (`What is the product of ${numberS} and ${numberL}?`)\r\n        var prob2 = (`What is the product of ${numberL} and ${numberS}?`)\r\n        var prob3 = (`A number is ${numberL} times as large as ${numberS}. What is the number?`)\r\n        var prob4 = (`A number is ${numberS} times as large as ${numberL}. What is the number?`)\r\n        var randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n        var answer = numberS*numberL\r\n\r\n    } else if (options.level === '2') {\r\n        prob1 = (`What is the sum of ${numberM} and the product of ${numberL} and ${numberS}?`)\r\n        prob2 = (`What is the sum of ${numberM} and the product of ${numberS} and ${numberL}?`)\r\n        prob3 = (`What is the difference when ${numberM} is subtracted from the product of ${numberS} and ${numberL}?`)\r\n        prob4 = (`What is the difference when ${numberM} is subtracted from the product of ${numberL} and ${numberS}?`)\r\n        randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n        if (randProb === (prob1 || prob2)){ //maybe better to make problems into objects with answer \r\n            answer = numberM+numberL*numberS\r\n        } else {\r\n            answer = numberL*numberS-numberM\r\n        }\r\n    } else {\r\n        var numberL2 = randWhole(111,99) //not going to change based on specify\r\n        var numberS2 = randWhole(12,99)\r\n        prob1 = (`What is the difference between the product of ${numberL} and ${numberS} and the product of ${numberS2} and ${numberL2}?`)\r\n        prob2 = (`What is the sum of the product of ${numberL} and ${numberS} and the product of ${numberS2} and ${numberL2}?`)\r\n        prob3 = (`A number is ${numberS} times as much as the sum of ${numberM} and ${numberS2}and ${numberS}. What is the number?`)\r\n        randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n\r\n        if (randProb === prob1){\r\n            answer = numberL*numberS - numberS2*numberL2\r\n        } else if (randProb === prob2){\r\n            answer = numberL*numberS + numberS2*numberL2\r\n        } else {\r\n            answer = numberS*(numberM+numberS2+numberS)\r\n        }\r\n    }\r\n    \r\n    var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n\r\n\r\n\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem     \r\n\r\n}\r\n\r\n\r\nexport const multWhole2 = (options) => { //mass\r\n    var [group, item, mass] = [shuffleArray(g.groupList), shuffleArray(g.itemList)]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    var numberList = multNumbers(options)\r\n    var [numberS, numberM, numberL, numberL2] = [numberList[0], numberList[1], numberList[2], randWhole(12, 55)]\r\n\r\n\r\n    if (options.level === '1') {\r\n        var prob1 = `${cap(e)} ${group[0]} of ${item[0]} has a mass of ${numberS} grams. What is the mass of `+\r\n        `${numberL} ${group[0]}s of ${item[0]} in grams?`\r\n        var prob2 = `There are ${numberL} ${group[0]}s of ${item[0]}. If ${e} ${group[0]} of ${item[0]} `+\r\n        `has a mass of ${numberS} grams, what is the mass of all these ${item[0]}s?`\r\n    } else {\r\n        var prob1 = `${cap(e)} ${group[0]} of ${item[0]} has a mass of ${numberS} grams. ${cap(e)} ${group[0]} of `+\r\n        `${item[1]} has a mass of ${numberM} grams. What is the mass of ${numberL} ${group[0]}s of ${item[0]} in grams?`\r\n        var prob2 = `There are ${numberL} ${group[0]}s of ${item[0]} and there are ${numberM} ${group[0]}s of `+\r\n        `${item[1]}. What is the mass of all the ${group[0]}s of ${item[0]} if ${e} has a mass of ${numberS} grams? `\r\n    }\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var answer = numberS*numberL\r\n    var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], 'grams')\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem   \r\n}\r\n\r\nexport const multWhole3 = (options) => { //simple buying items\r\n    var [expItem, girl] = [shuffleArray(g.itemList2060), shuffleArray(g.girlList)]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    var numberList = multNumbers(options)\r\n    var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n    var prob1 = `${cap(e)} ${expItem[0]} costs $${numberS}. How much would it cost to buy ${numberL} ${expItem[0]}s?`\r\n    var prob2 = `${girl[0]} buys ${numberL} ${expItem[0]}s which cost $${numberS} each. How much would it cost her to buy \r\n                ${numberL} ${expItem[0]}s?`\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var answer =numberS*numberL\r\n    var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem   \r\n}\r\nexport const multWholeby1 = (options) => { //by1 digit only Disaster\r\n    var [food, boy, girl, disaster] = [shuffleArray(g.disasterFoodList)[0], shuffleArray(g.boyList)[0], shuffleArray(g.girlList)[0],shuffleArray(g.disasterList)[0]]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    var numberList = multNumbers(options)\r\n    var [numberS, numberM, numberL] = [randWhole(2,7), numberList[1], numberList[2]]\r\n    var prob1 = (`${boy} is preparing for a ${disaster}. He wants to buy a lot of his favorite food so that he does not `+\r\n    `run out. ${cap(e)} box of ${food} costs $${numberS}. How much would it cost him to buy `+\r\n    `${numberL} boxes?`)\r\n    var prob2 = (`${girl} is getting ready in case of a ${disaster}. She wants stock up on ${food} so she purchases `+\r\n    `${numberL} boxes. ${cap(e)} box of ${food} costs $${numberS}. How much would it cost her to buy `+\r\n    `all the boxes?`)\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var answer =numberS*numberL\r\n    var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem   \r\n}\r\n// export const multWhole5 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole6 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole7 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole8 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole9 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole10 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole11 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n\r\n\r\n\r\n  \r\n\r\n    // problem = (`${randGirl} 's ${randPetBig} weighs ${numberL} pounds. ${randBoy}'s ${randPetBig} weighs ${NumberS}`\r\n    // ` times as much as ${randGirl}'s ${randPetBig}. What does ${randBoy}'s ${randPetBig} weigh in pounds?`) //2 by 2 only\r\n\r\n\r\n\r\n    // problem = (`${randBoy} buys ${numberL} large bags of ${randCandy} for Halloween. It costs `\r\n    // `${numberS}$ for each bag of ${randCandy}. How much would it cost him to buy all the bags?`)\r\n\r\n    // problem = (`${randSchool} ordered ${numberL} cases of ${randSubject} textbooks. ${cap(e)} case holds ${numberS}`\r\n    // ` textbooks. How many textbooks did the school buy?`)\r\n\r\n    // problem = (`A ${randSize} bag of ${randFood}'s contains ${numberL} calories. How many calories are in ` \r\n    // `${numberS} ${randSize} bags of ${randFood}s?`)\r\n\r\n\r\n\r\n\r\n    export const randMultWhole = (options) => {\r\n        var probArray = [multWhole, multWhole2, multWhole3]\r\n        if (options.specify === '3by1' || '4by1') {\r\n            probArray.push(multWholeby1)\r\n        } //else if (options.specify === '2by2') {\r\n\r\n        // } else {//3by2\r\n\r\n        // }\r\n        var randProb = shuffleArray(probArray)[0]\r\n        return randProb(options)\r\n    }","C:\\projects\\worksheet-creator\\src\\components\\display-user-selection.js",[],"C:\\projects\\worksheet-creator\\src\\components\\user-inputs.js",["140","141","142"],"C:\\projects\\worksheet-creator\\src\\components\\input.js",["143","144","145"],"import {defaultProps, PropTypes, React, Fragment} from 'react'\r\nconst Input = ({\r\n  name,\r\n  type,\r\n  placeholder,\r\n  onChange,\r\n  className,\r\n  value,\r\n  error,\r\n  children,\r\n  label,\r\n  min,\r\n  max,\r\n  ...props\r\n}) => {\r\n  \r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        id={name}\r\n        name={name}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        onChange={onChange}\r\n        value={value}\r\n        className={className}\r\n        style={error && {border: 'solid 1px red'}}\r\n        min= {min}\r\n        max={max}\r\n      />\r\n      { error && <p>{ error }</p>}\r\n    </div>\r\n  )\r\n}\r\n\r\nInput.defaultProps = {\r\n  type: \"text\",\r\n  className: \"\"\r\n}\r\n\r\n// Input.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   type: PropTypes.string,\r\n//   type: PropTypes.oneOf(['text', 'number', 'password', 'checkbox']),\r\n//   className: PropTypes.string,\r\n//   value: PropTypes.any,\r\n//   onChange: PropTypes.func.isRequired\r\n// }\r\n\r\n\r\nexport default Input","C:\\projects\\worksheet-creator\\src\\app-files\\divide.js",["146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170"],"import { to } from \"mathjs\";\r\nimport * as g from \"./general\";\r\nimport {randWhole, shuffleArray, answerChoicesKey, wrongOptions, cap} from './general'\r\nvar e = ['one', 'a', 'each'][randWhole(0,2)]\r\n\r\n\r\nconst divNumbers = (options) => {\r\n    if (options.specify === '1') { //4 by 1\r\n        var numArray = [[randWhole(50, 99), randWhole(2, 9)],\r\n        [randWhole(25, 50), randWhole(5, 9)],\r\n        [randWhole(101, 166), randWhole(2, 6)],\r\n        [randWhole(166, 249), randWhole(2, 4)]]\r\n        var num = shuffleArray(numArray)\r\n        var answer = num[0][0]\r\n        var numberS = num[0][1]\r\n        var numberL = answer*numberS\r\n\r\n\r\n    }else { // 2 by 2\r\n        var numArray = [\r\n            [randWhole(15, 24), randWhole(11, 20)],\r\n            [randWhole(15, 28), randWhole(21, 35)],\r\n            [randWhole(13, 25), randWhole(36, 50)],\r\n            [randWhole(15, 25), randWhole(15, 28)]\r\n        ]\r\n        var num = shuffleArray(numArray)\r\n        var answer = num[0][0]\r\n        var numberS = num[0][1]\r\n        var numberL = answer*numberS\r\n    } \r\n    return [answer, numberS, numberL]\r\n}\r\nconst divideWhole = (options) => {\r\n    \r\n\r\n\r\n\r\n\r\n}\r\nexport const div1dig = (options) => { // 1 digit divisor only\r\n    var numberList = divNumbers(options)\r\n    var girl = shuffleArray(g.girlList)[0]\r\n    var store = shuffleArray(g.storeList)[0]\r\n    var item = shuffleArray(g.packageItemList)[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n\r\n\r\n    var [answer, numberS, numberL] = [numberList[0], randWhole(2,6), numberList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = `${girl} is going to ${store} to buy some ${item} for a party. It costs $${numberS} for ${e} `+\r\n    `package of ${item}. After the cashier rang up her items, she had to give the cashier a total `+\r\n    `of $${numberL}. How many packages of ${item} did she buy?`\r\n    var prob2 = `${girl} wants to buy some ${item} at ${store} to prepare for a large family gathering.`+\r\n    ` She ended up purchasing ${numberS} packages of ${item} which cost `+\r\n    `$${numberL} altogether. How much does ${e} package of ${item} cost?`\r\n    \r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    if (randProb === prob2) {\r\n        AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    }\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const div2dig= (options) => { //playing sports 2 digit only\r\n    var numberList = divNumbers(options)\r\n    var boy = shuffleArray(g.boyList)[0]\r\n    var sport = shuffleArray(g.sportList)[0]\r\n    var [answer, numberS, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = `${boy} plays ${sport} for a total of ${numberL} minutes last year. He played ${sport} `+\r\n    `for ${numberS} minutes each day. How many days did ${boy} play ${sport} last year? `\r\n    var prob2 = `${boy} plays ${sport} for a total of ${numberL} minutes last year. He played ${sport} `+\r\n    `for ${numberS} days last year for an equal amount of time each day. How many minutes did ${boy} play ${sport} each day last year? `\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const divWhole = (options) => { //simple purchase items\r\n    var numberList = divNumbers(options)\r\n    var item = shuffleArray(g.itemList1020)[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    if (options.specify === '2by1') { //4 by 1\r\n        var [answer, numberS] = [randWhole(2,9), randWhole(5,8)];\r\n       var numberL= answer*numberS\r\n   }else if (options.specify === '3by1'){\r\n       var [answer, numberS] = [randWhole(23,40), randWhole(6,9)];\r\n       var numberL = answer*numberS\r\n   } else if (options.specify === '4by1'){\r\n        var [answer, numberS] = [randWhole(167,250), randWhole(6,9)];\r\n        var numberL = answer*numberS\r\n    } else{\r\n        var [answer, numberS] = [randWhole(23,89), randWhole(20,40)];\r\n        var numberL = answer*numberS\r\n        var item = shuffleArray(g.itemList2060)[0]\r\n    } \r\n    var [answer, numberS, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var prob1 = `It costs $${numberL} to buy ${numberS} ${item}s. How much would it cost to buy one `+\r\n    `${item}?`\r\n    var prob2 = `How much would it cost to buy ${e} ${item} if it costs $${numberL} to buy ${numberS} ${item}s?`\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const div1dig2 = (options) => { //teacher buying items\r\n    var teacher = shuffleArray(g.teacherList)[0]\r\n    var theme = shuffleArray(g.themeList)[0]\r\n    var item = shuffleArray(['pencil','marker','pen','journal','notebook','decoration'])[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    if (options.specify === '2by1') { \r\n         var [answer, numberS] = [randWhole(2,9), randWhole(5,8)];\r\n        var numberL= answer*numberS\r\n    }else { //3by1\r\n        var [answer, numberS] = [randWhole(15,15), randWhole(6,9)];\r\n        var numberL = answer*numberS\r\n    } \r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS)\r\n    var prob1 = `${teacher} bought ${numberS} ${theme} ${item}s for a total of $${numberL} `+\r\n    `. If each ${item} costs the same amount, how much did ${teacher} spend on each ${theme} ${item}? `\r\n    var prob2 = `${teacher} has a total of $${numberL} to spend on ${item}s. She wants to buy ${theme} `+\r\n        ` ${item}s for her classroom. If ${e} package of ${theme} ${item}s costs $${numberS}, how many packagess can she buy?`\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    if (randProb === prob1) {\r\n        AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    } \r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\n// export const randDivideWhole = () => {\r\n//     var randProb = shuffleArray([\r\n    \r\n//     ])[0]\r\n// }\r\n\r\n\r\n    // var prob1 = `${girl} has ${numberL} ${theme} themed ${schoolItem}. She wants to split them equally `+\r\n    //             ` between her friends. If she has ${numberS} friends, how many ${schoolItem} can each friend get?`\r\n    // var prob2 = `${boy} has ${numberL} ${theme} themed ${schoolItem}. If he gives each friend ${numberS} `+\r\n    //             `${schoolItem}, how many friends can he give them to?`\r\n\r\n    // var prob1 = `${girl} has ${numberL} ${noun} saved up. She decides that she has way too many ${noun} and she `+\r\n    //             `$wants to give them all away to her friends. She wants to give each friend the same amount of ${noun}. `+\r\n    //             `${girl} has ${numberS} friends that she would like to give the ${noun} to. How many ${noun} would each friend get?`\r\n    // var prob2 = `${boy} has too many ${noun} saved up. He decides to split them equally between each of his ${numberS} friends. `+\r\n    //             `How many ${noun} will each friend get?`\r\n\r\n\r\n\r\n    // var prob1 = `${boy} has ${numberL} ${noun}. He wants to split them equally into ${group}s. If ${boy} puts ${numberS} `+\r\n    //             `${noun} into each ${group}, how many ${group}s can ${boy} fill?`\r\n    // var prob2 = `${girl} wants to split their ${numberL} ${noun} into equal ${group}s. If she makes ${numberS} `+\r\n    //             `${group}s, how many ${noun}s fit in ${e} ${group}?`\r\n\r\n\r\n    // var prob1 = `${boy} has ${numberL} ${candy}. He would like to share these ${candy} equally with ${numberS} friends. How `+\r\n    //             `many ${candy} will each friend get?`\r\n    // var prob2 = `${girl} has ${numberL} ${candy}. She wants to give each friend ${numberS} ${candy}. How many friends will `+\r\n    //             `she be able to give ${candy} to?`\r\n\r\n    // var prob1 = `A ${food} company can fit ${numberS} packages of ${food} in ${e} box. How many boxes are needed to fill an `+\r\n    //             `order for ${numberL} packages of ${food}?`\r\n    // var prob2 = `A ${food} company needs to put ${numberL} packages of ${food} into boxes to fill an order. They can fit ${numberS} `+\r\n    //             `packages of ${food} in ${e} box. How many boxes will they need to fill the order?`\r\n\r\n    // var dogNameList = ['Zoey','Bowser','Spot','Snickerdoodle','Sir Fluffyboy', 'Chuggington', 'Bella', 'Max','Daisy','Bitsy','Archie','Barkley','Baxter','Chewy','Izzy','Murphy','Pippin','Waffles','Wiggleton','Ziggy']\r\n    // var prob1 = `${girl} walks her dog ${dogName} ${numberS} minutes each day they go for a walk. If they walk for a total of `+\r\n    //             `${numberL} minutes last month, how many days did she take ${dogName} for a walk?`\r\n    // var prob2 = `${boy} walks his dog ${dogName} for a total of ${numberL} minutes last month. Each time he takes ${dogName} `+\r\n    //             `on a walk for ${numberS} minutes. How many days did he take ${dogName} for a walk last month? `\r\n    // var prob3 = `${girl} took her dog ${dogName} on a walk ${numberS} times last month. They walked for a total of ${numberL} `+\r\n    //             `minutes. If each walk lasted the same amount of time, how long was each walk? `\r\n    \r\n    // var prob1 = `${dogName} the dog eats ${numberS} ounces of dog food each week. ${dogName}'s pet parent has stocked up with `+\r\n    //             `${numberL} ounces of dog food. How many weeks will the food last?`\r\n    // var prob2 = `${boy} bought a large bag of dog food so now he has ${numberL} ounces. He gives his dog ${dogName} ${numberS} `+\r\n    //             `ounces of food each week. How many weeks will the food last until he runs out?`\r\n\r\n\r\n    export const randDivWhole = (options) => {\r\n        var probArray = [divWhole]\r\n        if (options.specify === ('3by1' || '4by1')) {\r\n            probArray.push(div1dig, div1dig2)\r\n        } else  { //4 by 2\r\n            probArray.push(div2dig)\r\n        } //else {//3by2\r\n\r\n        // }\r\n        var randProb = shuffleArray(probArray)[0]\r\n        return randProb(options)\r\n    }",{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":8,"column":8,"nodeType":"177","messageId":"178","endLine":8,"endColumn":19},{"ruleId":"175","severity":1,"message":"179","line":9,"column":8,"nodeType":"177","messageId":"178","endLine":9,"endColumn":13},{"ruleId":"175","severity":1,"message":"180","line":202,"column":1,"nodeType":"177","messageId":"178","endLine":202,"endColumn":10},{"ruleId":"175","severity":1,"message":"181","line":243,"column":15,"nodeType":"177","messageId":"178","endLine":243,"endColumn":22},{"ruleId":"175","severity":1,"message":"182","line":269,"column":9,"nodeType":"177","messageId":"178","endLine":269,"endColumn":13},{"ruleId":"175","severity":1,"message":"181","line":278,"column":15,"nodeType":"177","messageId":"178","endLine":278,"endColumn":22},{"ruleId":"175","severity":1,"message":"181","line":307,"column":19,"nodeType":"177","messageId":"178","endLine":307,"endColumn":26},{"ruleId":"175","severity":1,"message":"181","line":335,"column":19,"nodeType":"177","messageId":"178","endLine":335,"endColumn":26},{"ruleId":"175","severity":1,"message":"181","line":363,"column":19,"nodeType":"177","messageId":"178","endLine":363,"endColumn":26},{"ruleId":"175","severity":1,"message":"183","line":366,"column":9,"nodeType":"177","messageId":"178","endLine":366,"endColumn":13},{"ruleId":"175","severity":1,"message":"184","line":3,"column":3,"nodeType":"177","messageId":"178","endLine":3,"endColumn":7},{"ruleId":"175","severity":1,"message":"185","line":6,"column":3,"nodeType":"177","messageId":"178","endLine":6,"endColumn":8},{"ruleId":"175","severity":1,"message":"186","line":7,"column":3,"nodeType":"177","messageId":"178","endLine":7,"endColumn":11},{"ruleId":"175","severity":1,"message":"187","line":9,"column":3,"nodeType":"177","messageId":"178","endLine":9,"endColumn":7},{"ruleId":"175","severity":1,"message":"188","line":13,"column":3,"nodeType":"177","messageId":"178","endLine":13,"endColumn":18},{"ruleId":"189","severity":1,"message":"190","line":59,"column":3,"nodeType":"191","messageId":"192","endLine":59,"endColumn":9},{"ruleId":"175","severity":1,"message":"193","line":106,"column":9,"nodeType":"177","messageId":"178","endLine":106,"endColumn":16},{"ruleId":"194","severity":1,"message":"195","line":128,"column":12,"nodeType":"177","messageId":"196","endLine":128,"endColumn":13},{"ruleId":"194","severity":1,"message":"197","line":128,"column":15,"nodeType":"177","messageId":"196","endLine":128,"endColumn":19},{"ruleId":"194","severity":1,"message":"195","line":130,"column":12,"nodeType":"177","messageId":"196","endLine":130,"endColumn":13},{"ruleId":"194","severity":1,"message":"197","line":130,"column":15,"nodeType":"177","messageId":"196","endLine":130,"endColumn":19},{"ruleId":"198","severity":1,"message":"199","line":139,"column":9,"nodeType":"177","messageId":"200","endLine":139,"endColumn":22},{"ruleId":"198","severity":1,"message":"199","line":141,"column":7,"nodeType":"177","messageId":"200","endLine":141,"endColumn":20},{"ruleId":"198","severity":1,"message":"199","line":143,"column":7,"nodeType":"177","messageId":"200","endLine":143,"endColumn":20},{"ruleId":"198","severity":1,"message":"199","line":145,"column":7,"nodeType":"177","messageId":"200","endLine":145,"endColumn":20},{"ruleId":"194","severity":1,"message":"201","line":148,"column":11,"nodeType":"177","messageId":"196","endLine":148,"endColumn":12},{"ruleId":"194","severity":1,"message":"202","line":149,"column":11,"nodeType":"177","messageId":"196","endLine":149,"endColumn":12},{"ruleId":"194","severity":1,"message":"203","line":150,"column":11,"nodeType":"177","messageId":"196","endLine":150,"endColumn":12},{"ruleId":"194","severity":1,"message":"204","line":151,"column":11,"nodeType":"177","messageId":"196","endLine":151,"endColumn":12},{"ruleId":"194","severity":1,"message":"205","line":152,"column":11,"nodeType":"177","messageId":"196","endLine":152,"endColumn":12},{"ruleId":"175","severity":1,"message":"206","line":152,"column":11,"nodeType":"177","messageId":"178","endLine":152,"endColumn":12},{"ruleId":"198","severity":1,"message":"199","line":154,"column":9,"nodeType":"177","messageId":"200","endLine":154,"endColumn":22},{"ruleId":"198","severity":1,"message":"199","line":156,"column":7,"nodeType":"177","messageId":"200","endLine":156,"endColumn":20},{"ruleId":"198","severity":1,"message":"199","line":158,"column":7,"nodeType":"177","messageId":"200","endLine":158,"endColumn":20},{"ruleId":"198","severity":1,"message":"199","line":160,"column":7,"nodeType":"177","messageId":"200","endLine":160,"endColumn":20},{"ruleId":"194","severity":1,"message":"201","line":168,"column":11,"nodeType":"177","messageId":"196","endLine":168,"endColumn":12},{"ruleId":"194","severity":1,"message":"202","line":169,"column":11,"nodeType":"177","messageId":"196","endLine":169,"endColumn":12},{"ruleId":"194","severity":1,"message":"203","line":170,"column":11,"nodeType":"177","messageId":"196","endLine":170,"endColumn":12},{"ruleId":"194","severity":1,"message":"204","line":171,"column":11,"nodeType":"177","messageId":"196","endLine":171,"endColumn":12},{"ruleId":"175","severity":1,"message":"207","line":121,"column":9,"nodeType":"177","messageId":"178","endLine":121,"endColumn":13},{"ruleId":"175","severity":1,"message":"208","line":122,"column":9,"nodeType":"177","messageId":"178","endLine":122,"endColumn":13},{"ruleId":"175","severity":1,"message":"209","line":145,"column":9,"nodeType":"177","messageId":"178","endLine":145,"endColumn":17},{"ruleId":"175","severity":1,"message":"207","line":167,"column":9,"nodeType":"177","messageId":"178","endLine":167,"endColumn":13},{"ruleId":"175","severity":1,"message":"208","line":168,"column":9,"nodeType":"177","messageId":"178","endLine":168,"endColumn":13},{"ruleId":"175","severity":1,"message":"209","line":192,"column":9,"nodeType":"177","messageId":"178","endLine":192,"endColumn":17},{"ruleId":"175","severity":1,"message":"207","line":214,"column":9,"nodeType":"177","messageId":"178","endLine":214,"endColumn":13},{"ruleId":"175","severity":1,"message":"208","line":215,"column":9,"nodeType":"177","messageId":"178","endLine":215,"endColumn":13},{"ruleId":"175","severity":1,"message":"209","line":238,"column":9,"nodeType":"177","messageId":"178","endLine":238,"endColumn":17},{"ruleId":"194","severity":1,"message":"210","line":241,"column":13,"nodeType":"177","messageId":"196","endLine":241,"endColumn":17},{"ruleId":"194","severity":1,"message":"210","line":242,"column":13,"nodeType":"177","messageId":"196","endLine":242,"endColumn":17},{"ruleId":"175","severity":1,"message":"185","line":14,"column":3,"nodeType":"177","messageId":"178","endLine":14,"endColumn":8},{"ruleId":"175","severity":1,"message":"188","line":21,"column":3,"nodeType":"177","messageId":"178","endLine":21,"endColumn":18},{"ruleId":"175","severity":1,"message":"211","line":76,"column":8,"nodeType":"177","messageId":"178","endLine":76,"endColumn":9},{"ruleId":"212","severity":1,"message":"213","line":76,"column":17,"nodeType":"214","messageId":"215","endLine":76,"endColumn":22},{"ruleId":"175","severity":1,"message":"216","line":138,"column":7,"nodeType":"177","messageId":"178","endLine":138,"endColumn":31},{"ruleId":"217","severity":1,"message":"218","line":277,"column":3,"nodeType":"219","messageId":"220","endLine":279,"endColumn":4},{"ruleId":"194","severity":1,"message":"221","line":341,"column":13,"nodeType":"177","messageId":"196","endLine":341,"endColumn":14},{"ruleId":"175","severity":1,"message":"185","line":5,"column":5,"nodeType":"177","messageId":"178","endLine":5,"endColumn":10},{"ruleId":"175","severity":1,"message":"222","line":14,"column":7,"nodeType":"177","messageId":"178","endLine":14,"endColumn":13},{"ruleId":"175","severity":1,"message":"223","line":127,"column":7,"nodeType":"177","messageId":"178","endLine":127,"endColumn":19},{"ruleId":"194","severity":1,"message":"224","line":226,"column":7,"nodeType":"177","messageId":"196","endLine":226,"endColumn":11},{"ruleId":"175","severity":1,"message":"225","line":1,"column":9,"nodeType":"177","messageId":"178","endLine":1,"endColumn":17},{"ruleId":"175","severity":1,"message":"226","line":83,"column":23,"nodeType":"177","messageId":"178","endLine":83,"endColumn":27},{"ruleId":"175","severity":1,"message":"227","line":86,"column":37,"nodeType":"177","messageId":"178","endLine":86,"endColumn":45},{"ruleId":"194","severity":1,"message":"228","line":95,"column":13,"nodeType":"177","messageId":"196","endLine":95,"endColumn":18},{"ruleId":"194","severity":1,"message":"229","line":97,"column":13,"nodeType":"177","messageId":"196","endLine":97,"endColumn":18},{"ruleId":"175","severity":1,"message":"181","line":117,"column":19,"nodeType":"177","messageId":"178","endLine":117,"endColumn":26},{"ruleId":"175","severity":1,"message":"181","line":139,"column":19,"nodeType":"177","messageId":"178","endLine":139,"endColumn":26},{"ruleId":"175","severity":1,"message":"230","line":1,"column":9,"nodeType":"177","messageId":"178","endLine":1,"endColumn":21},{"ruleId":"175","severity":1,"message":"231","line":1,"column":23,"nodeType":"177","messageId":"178","endLine":1,"endColumn":32},{"ruleId":"232","severity":1,"message":"233","line":14,"column":21,"nodeType":"234","endLine":14,"endColumn":54},{"ruleId":"175","severity":1,"message":"230","line":1,"column":9,"nodeType":"177","messageId":"178","endLine":1,"endColumn":21},{"ruleId":"175","severity":1,"message":"231","line":1,"column":23,"nodeType":"177","messageId":"178","endLine":1,"endColumn":32},{"ruleId":"175","severity":1,"message":"235","line":1,"column":41,"nodeType":"177","messageId":"178","endLine":1,"endColumn":49},{"ruleId":"175","severity":1,"message":"236","line":1,"column":10,"nodeType":"177","messageId":"178","endLine":1,"endColumn":12},{"ruleId":"175","severity":1,"message":"237","line":3,"column":66,"nodeType":"177","messageId":"178","endLine":3,"endColumn":69},{"ruleId":"175","severity":1,"message":"238","line":4,"column":5,"nodeType":"177","messageId":"178","endLine":4,"endColumn":6},{"ruleId":"194","severity":1,"message":"239","line":20,"column":13,"nodeType":"177","messageId":"196","endLine":20,"endColumn":21},{"ruleId":"194","severity":1,"message":"240","line":26,"column":13,"nodeType":"177","messageId":"196","endLine":26,"endColumn":16},{"ruleId":"194","severity":1,"message":"241","line":27,"column":13,"nodeType":"177","messageId":"196","endLine":27,"endColumn":19},{"ruleId":"194","severity":1,"message":"242","line":28,"column":13,"nodeType":"177","messageId":"196","endLine":28,"endColumn":20},{"ruleId":"194","severity":1,"message":"243","line":29,"column":13,"nodeType":"177","messageId":"196","endLine":29,"endColumn":20},{"ruleId":"175","severity":1,"message":"244","line":33,"column":7,"nodeType":"177","messageId":"178","endLine":33,"endColumn":18},{"ruleId":"194","severity":1,"message":"241","line":96,"column":13,"nodeType":"177","messageId":"196","endLine":96,"endColumn":19},{"ruleId":"194","severity":1,"message":"242","line":96,"column":21,"nodeType":"177","messageId":"196","endLine":96,"endColumn":28},{"ruleId":"194","severity":1,"message":"243","line":97,"column":12,"nodeType":"177","messageId":"196","endLine":97,"endColumn":19},{"ruleId":"194","severity":1,"message":"241","line":99,"column":14,"nodeType":"177","messageId":"196","endLine":99,"endColumn":20},{"ruleId":"194","severity":1,"message":"242","line":99,"column":22,"nodeType":"177","messageId":"196","endLine":99,"endColumn":29},{"ruleId":"194","severity":1,"message":"243","line":100,"column":13,"nodeType":"177","messageId":"196","endLine":100,"endColumn":20},{"ruleId":"194","severity":1,"message":"241","line":102,"column":14,"nodeType":"177","messageId":"196","endLine":102,"endColumn":20},{"ruleId":"194","severity":1,"message":"242","line":102,"column":22,"nodeType":"177","messageId":"196","endLine":102,"endColumn":29},{"ruleId":"194","severity":1,"message":"243","line":103,"column":13,"nodeType":"177","messageId":"196","endLine":103,"endColumn":20},{"ruleId":"194","severity":1,"message":"245","line":104,"column":13,"nodeType":"177","messageId":"196","endLine":104,"endColumn":17},{"ruleId":"194","severity":1,"message":"241","line":106,"column":10,"nodeType":"177","messageId":"196","endLine":106,"endColumn":16},{"ruleId":"194","severity":1,"message":"242","line":106,"column":18,"nodeType":"177","messageId":"196","endLine":106,"endColumn":25},{"ruleId":"194","severity":1,"message":"243","line":106,"column":27,"nodeType":"177","messageId":"196","endLine":106,"endColumn":34},{"ruleId":"194","severity":1,"message":"241","line":129,"column":14,"nodeType":"177","messageId":"196","endLine":129,"endColumn":20},{"ruleId":"194","severity":1,"message":"242","line":129,"column":22,"nodeType":"177","messageId":"196","endLine":129,"endColumn":29},{"ruleId":"194","severity":1,"message":"243","line":130,"column":13,"nodeType":"177","messageId":"196","endLine":130,"endColumn":20},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'html2canvas' is defined but never used.","Identifier","unusedVar","'jsPDF' is defined but never used.","'tableSnap' is assigned a value but never used.","'numberM' is assigned a value but never used.","'name' is assigned a value but never used.","'year' is assigned a value but never used.","'Page' is defined but never used.","'Image' is defined but never used.","'Document' is defined but never used.","'Font' is defined but never used.","'PDFDownloadLink' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'tstyles' is assigned a value but never used.","no-redeclare","'$' is already defined.","redeclared","'unit' is already defined.","no-use-before-define","'correctAnswer' was used before it was defined.","usedBeforeDefined","'A' is already defined.","'B' is already defined.","'C' is already defined.","'D' is already defined.","'E' is already defined.","'E' is assigned a value but never used.","'OoOB' is assigned a value but never used.","'OoOC' is assigned a value but never used.","'dividend' is assigned a value but never used.","'OoOA' is already defined.","'n' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'createQAListTableAnswers' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'w' is already defined.","'styles' is assigned a value but never used.","'tableNumbers' is assigned a value but never used.","'text' is already defined.","'Fraction' is defined but never used.","'mass' is assigned a value but never used.","'numberL2' is assigned a value but never used.","'prob1' is already defined.","'prob2' is already defined.","'defaultProps' is defined but never used.","'PropTypes' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Fragment' is defined but never used.","'to' is defined but never used.","'cap' is defined but never used.","'e' is assigned a value but never used.","'numArray' is already defined.","'num' is already defined.","'answer' is already defined.","'numberS' is already defined.","'numberL' is already defined.","'divideWhole' is assigned a value but never used.","'item' is already defined.","no-global-assign","no-unsafe-negation"]
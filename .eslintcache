[{"C:\\projects\\worksheet-creator\\src\\index.js":"1","C:\\projects\\worksheet-creator\\src\\reportWebVitals.js":"2","C:\\projects\\worksheet-creator\\src\\App.js":"3","C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js":"4","C:\\projects\\worksheet-creator\\src\\app-files\\general.js":"5","C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js":"6","C:\\projects\\worksheet-creator\\src\\create-worksheet.js":"7","C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":12561,"mtime":1607916761556,"results":"12","hashOfConfig":"10"},{"size":6568,"mtime":1607395255808,"results":"13","hashOfConfig":"10"},{"size":2705,"mtime":1607918304330,"results":"14","hashOfConfig":"10"},{"size":7052,"mtime":1607312009811,"results":"15","hashOfConfig":"10"},{"size":4492,"mtime":1607660946043,"results":"16","hashOfConfig":"10"},{"size":12279,"mtime":1607918304350,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ahlkum",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"C:\\projects\\worksheet-creator\\src\\index.js",[],["37","38"],"C:\\projects\\worksheet-creator\\src\\reportWebVitals.js",[],"C:\\projects\\worksheet-creator\\src\\App.js",[],"C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js",[],"C:\\projects\\worksheet-creator\\src\\app-files\\general.js",[],"C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js",["39"],"import {randWhole, shuffleArray, wrongOptions, answerChoicesKey,\r\n    boyList, boyList2, sportList} from './general.js'\r\n// var simpleQArray = ['What is the value of the expression? \\n',\r\n// 'An expression is shown below, what value is equivalent to the expression?\\n',\r\n// 'Which value is equivalent to the expression below? \\n']\r\nvar simpleQArray = gen.shuffleArray(['What is the value of the expression? \\n',\r\n                  'An expression is shown below, what value is equivalent to the expression?\\n',\r\n                  'Which value is equivalent to the expression below? \\n'])\r\nexport const orderOps = (Options) => {\r\n\r\n\r\n    if (Options.specify === \"whole\") {\r\n        var [numberL, numberL2, numberM] = [randWhole(10, 20), randWhole(10, 20), randWhole(2, 11)];\r\n        var [numberS, numberS2, numberM2] = [randWhole(2, 8), randWhole(2, 8), randWhole(2, 11)];\r\n\r\n      if (Options.level === \"2\") {\r\n        [numberL, numberL2, numberM] = [randWhole(20, 50), randWhole(20, 50), randWhole(10, 19)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 9), randWhole(2, 9), randWhole(10, 19)];\r\n      } else if (Options.level === \"3\") {\r\n        [numberL, numberL2, numberM] = [randWhole(50, 200), randWhole(50, 200), randWhole(20, 100)];\r\n        [numberS, numberS2, numberM2] = [randWhole(7, 19), randWhole(7, 19), randWhole(20, 100)];\r\n      }\r\n    }\r\n    else if (Options.specify === \"decimal\") {\r\n        var DecimalH = (Math.random()).toFixed(2)\r\n        // var [f, r] = ['roundFormat', 2]\r\n\r\n\r\n\r\n        // var DecimalOT = (Math.random()*9 + 1).toFixed(1) \r\n        // var DecimalT = (Math.random()*9 + 1).toFixed(1)\r\n                // var decTwoDigit =  gen.shuffleArray[DecimalOT, DecimalH]\r\n        // var decTwoDigit =  [DecimalOT, DecimalH] \r\n        var DecimalHTOT = (Math.random()*99 + 10).toFixed(2)\r\n        var DecimalTOTH = (Math.random()*99 + 10).toFixed(2)\r\n        // var decLarge = gen.shuffleArray[DecimalHTOT, DecimalTOTH]\r\n        var decLarge = [DecimalHTOT, DecimalTOTH]\r\n\r\n        [numberL, numberL2, numberM] = [randWhole(2, 7), randWhole(2, 11), randWhole(10, 20)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 6), DecimalH, randWhole(10, 20)];\r\n\r\n      if (Options.level === \"2\") {\r\n        [numberL, numberL2, numberM] = [randWhole(12, 17), decLarge[0], randWhole(20, 50)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 2), DecimalH, randWhole(20, 50)];\r\n      } else if (Options.level === \"3\") {\r\n        [numberL, numberL2, numberM] = [randWhole(7, 19), randWhole(20, 100), randWhole(50, 200)];\r\n        [numberS, numberS2, numberM2] = [randWhole(12, 39), DecimalH, decLarge[0]];\r\n      }\r\n    }\r\n    //100 + (40÷8 - 9) × 11)\r\n  \r\n    var OoOA = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberL} + (${numberS * numberL2} ÷ ${numberS} - ${numberS2}) × ${numberM2}`\r\n\r\n    var OoOB = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberM} × (${numberL} - ${numberS*numberM2} ÷ ${numberS}) + ${numberL2}`\r\n    \r\n    var OoOC = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberS}(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})`\r\n    \r\n    var OoOD = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           [${numberL2} + (${numberS2} × ${numberM} - ${numberS})] × ${numberM2}`\r\n    \r\n    var OoOE = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberL2}[${numberL} + ${numberM}(${numberM2+numberS} - ${numberS})]`\r\n    var problems = [OoOA, OoOB, OoOC, OoOD, OoOE]\r\n    var randomProblem = problems[randWhole(problems.length, 0)]\r\n    console.log(randomProblem)\r\n    var answer = \"\"\r\n    var wrong = \"\"\r\n        //100 + (40÷8 - 9) × 11)\r\n    if  (randomProblem === OoOA) {\r\n        answer = numberL+((numberS*numberL2/numberS-numberS2)*numberM2)\r\n        wrong = [Math.abs(numberL+(numberS*numberL2)/numberS-numberS2*numberM2),        (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2,\r\n            ((((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2, Math.abs(numberL+(numberS*numberL2)/numberS-(numberS2*numberM2))]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer/10, numberL+((numberS*numberL2/numberS-numberS2*10)*numberM2)))\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n        }\r\n        // console.log(wrong)\r\n//40 x ( 100 - 50 ÷ 5 ) + 100\r\n    }else if  (randomProblem === OoOB) {\r\n        answer = numberM*(numberL-(numberS*numberM2/numberS)+numberL2)\r\n        wrong = [numberM*numberL-numberS*numberM2/numberS+numberL2, numberM*numberL-(numberS*numberM2/numberS)+numberL2,\r\n            Math.floor((((numberM*numberL)-numberS)*numberM2)/numberS)+numberL2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer/10))\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n\r\n        }\r\n        // console.log(wrong)\r\n\r\n//10(100 - 8) + 40(100 + 40)\r\n    }else if  (randomProblem === OoOC) {\r\n        answer = numberS*(numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberS*numberL-numberS2+numberM*numberL2+numberM2, (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer*100, answer/10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1, answer-2, answer+3))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }\r\n        // console.log(wrong)\r\n\r\n  //[100+(8x40-10)]x40\r\n    }else if  (randomProblem === OoOD) {\r\n        answer = (numberL2+(numberS2*numberM-numberS))*numberM2\r\n        wrong = [(numberL2+(numberS2*numberM-numberS))*numberM2+1, (numberL2+numberS2)*numberM-numberS,\r\n                 numberL2+Math.abs(numberS2*numberM-numberS*numberM2),   (((numberL2+numberS2)*numberM)-numberS)*numberM2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }\r\n        // console.log(wrong)\r\n\r\n//[100+(8x40-10)]x40\r\n    }else if  (randomProblem === OoOE) {\r\n        answer = numberL2*(numberL+numberM*(numberM2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2+numberM2+numberM2)), numberL2*(numberL+numberM*(numberM2)),\r\n                numberL2*numberL + numberM*numberM2, (numberL2*numberL+numberM)*numberM2+numberS-numberS]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }       \r\n    }else {\r\n        answer = 0\r\n        wrong = [0, 0, 0]\r\n    }\r\n    var AC = gen.answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText: randomProblem,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n\r\n}\r\n\r\n\r\n","C:\\projects\\worksheet-creator\\src\\create-worksheet.js",["40"],"C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js",["41","42","43","44"],"import {randWhole, randDec, roundDec, shuffleArray, wrongOptions, answerChoicesKey} from './general.js'\r\n\r\nexport const divideDec = (Options) => {\r\n    var answer = randDec(1, 9, 2)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = roundDec(answer*divisor, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 2)\r\n    divisor = randWhole(2, 11)\r\n    dividend = roundDec(answer*divisor, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(1, 9, 2)\r\n        divisor = randWhole(12, 50)\r\n        dividend = roundDec(answer*divisor, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec = (Options) => {\r\n    var numberS = randDec(1, 9, 2)\r\n    var numberL = randWhole(1, 9)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, 2)\r\n    numberL = randWhole(11, 99)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        numberS = randDec(1, 9, 2)\r\n        numberL = randWhole(13,99)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {questionText:    (`${numberS} x ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec2 = (Options) => {\r\n    var pv = randWhole(1, 2)\r\n    var numberS = randDec(1, 9, pv)\r\n    var numberL = randDec(0, 1, pv)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, pv)\r\n    numberL = randDec(11, 99, pv)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        numberS = randDec(1, 9, pv)\r\n        numberL = randDec(13, 99, pv)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {questionText:    (`${numberS} x ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const divideDec2 = (Options) => {\r\n    var answer = randDec(0, 1, 3)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(3)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 3)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(3)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(1, 9, 3)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(3)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const divideDec3 = (Options) => {\r\n    var answer = randDec(10, 90, 1)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(1)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(100, 900, 1)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(1)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(100, 900, 1)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(1)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const divideDecOLD = (Options) => {\r\n    var [dec1, dec2, dec3] = [randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)]\r\n    var x\r\n    // var shuffleDecimals = shuffleArray([randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)])\r\n    var shuffleDecimals = shuffleArray([dec1, dec2, dec3])\r\n    if (shuffleDecimals[0] === dec1){\r\n        x = 2\r\n    } else if (shuffleDecimals[1] === dec2) {\r\n        x = 3\r\n    } else {\r\n        x = 1\r\n    }\r\n    var answer = shuffleDecimals[0] \r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(x)\r\n\r\n    if (Options === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    var shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n    answer = shuffleDecimals[0]\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(x)\r\n\r\n    } else if (Options ===\"3\") {\r\n        var shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n        answer = shuffleDecimals[0]\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(x)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\n\r\n\r\n\r\n\r\nexport const addDecPV = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        var w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(5, 9, y)},\r\n                {numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                {numberS:randDec(10, 90, x), numberL: randDec(90, 300, y)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, w)\r\n    // console.log(numberL+numberS)\r\n    // console.log(answer)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const addDecWhole = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                {numberS:randWhole(1, 9), numberL: randDec(9,15, x)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n                {numberS:randWhole(10, 90), numberL: randDec(90,300, x)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n                {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n                {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\n\r\nexport const subDecWhole = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                    {numberS:randWhole(1, 9), numberL: randDec(10,15, x)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n            {numberS:randWhole(10, 90), numberL: randDec(91,300, x)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n            {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n            {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = randNums.numberS\r\n    var numberL = randNums.numberL\r\n    var answer = roundDec(numberL-numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const subDecPV = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        var w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(6, 11, y)},\r\n                    {numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n            {numberS:randDec(10, 90, x), numberL: randDec(91,300, y)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL-numberS, w)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":38,"column":17,"nodeType":"51","messageId":"52","endLine":38,"endColumn":18},{"ruleId":"53","severity":1,"message":"54","line":152,"column":3,"nodeType":"55","messageId":"56","endLine":154,"endColumn":4},{"ruleId":"57","severity":1,"message":"58","line":166,"column":9,"nodeType":"59","messageId":"60","endLine":166,"endColumn":24},{"ruleId":"57","severity":1,"message":"58","line":172,"column":13,"nodeType":"59","messageId":"60","endLine":172,"endColumn":28},{"ruleId":"57","severity":1,"message":"61","line":198,"column":13,"nodeType":"59","messageId":"60","endLine":198,"endColumn":14},{"ruleId":"57","severity":1,"message":"61","line":304,"column":13,"nodeType":"59","messageId":"60","endLine":304,"endColumn":14},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-redeclare","'shuffleDecimals' is already defined.","Identifier","redeclared","'w' is already defined.","no-global-assign","no-unsafe-negation"]
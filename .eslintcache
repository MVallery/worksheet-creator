[{"C:\\projects\\worksheet-creator\\src\\index.js":"1","C:\\projects\\worksheet-creator\\src\\reportWebVitals.js":"2","C:\\projects\\worksheet-creator\\src\\App.js":"3","C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js":"4","C:\\projects\\worksheet-creator\\src\\app-files\\general.js":"5","C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js":"6","C:\\projects\\worksheet-creator\\src\\create-worksheet.js":"7","C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js":"8","C:\\projects\\worksheet-creator\\src\\app-files\\tables.js":"9"},{"size":3789,"mtime":1608475342108,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":13577,"mtime":1609119173335,"results":"13","hashOfConfig":"11"},{"size":23209,"mtime":1609089630912,"results":"14","hashOfConfig":"11"},{"size":3780,"mtime":1609110055276,"results":"15","hashOfConfig":"11"},{"size":7055,"mtime":1608689942967,"results":"16","hashOfConfig":"11"},{"size":12130,"mtime":1609119173365,"results":"17","hashOfConfig":"11"},{"size":12309,"mtime":1608690069384,"results":"18","hashOfConfig":"11"},{"size":5269,"mtime":1609015921957,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ahlkum",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projects\\worksheet-creator\\src\\index.js",[],["42","43"],"C:\\projects\\worksheet-creator\\src\\reportWebVitals.js",[],"C:\\projects\\worksheet-creator\\src\\App.js",["44","45","46","47","48","49","50","51","52","53","54","55"],"C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js",["56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"C:\\projects\\worksheet-creator\\src\\app-files\\general.js",[],"C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js",["74","75","76","77","78"],"import {randWhole, shuffleArray, wrongOptions, answerChoicesKey,\r\n    boyList, boyList2, sportList} from './general.js'\r\n// var simpleQArray = ['What is the value of the expression? \\n',\r\n// 'An expression is shown below, what value is equivalent to the expression?\\n',\r\n// 'Which value is equivalent to the expression below? \\n']\r\nvar simpleQArray = shuffleArray(['What is the value of the expression? \\n',\r\n                  'An expression is shown below, what value is equivalent to the expression?\\n',\r\n                  'Which value is equivalent to the expression below? \\n'])\r\nexport const orderOps = (Options) => {\r\n\r\n\r\n    if (Options.specify === \"whole\") {\r\n        var [numberL, numberL2, numberM] = [randWhole(10, 20), randWhole(10, 20), randWhole(2, 11)];\r\n        var [numberS, numberS2, numberM2] = [randWhole(2, 8), randWhole(2, 8), randWhole(2, 11)];\r\n\r\n      if (Options.level === \"2\") {\r\n        [numberL, numberL2, numberM] = [randWhole(20, 50), randWhole(20, 50), randWhole(10, 19)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 9), randWhole(2, 9), randWhole(10, 19)];\r\n      } else if (Options.level === \"3\") {\r\n        [numberL, numberL2, numberM] = [randWhole(50, 200), randWhole(50, 200), randWhole(20, 100)];\r\n        [numberS, numberS2, numberM2] = [randWhole(7, 19), randWhole(7, 19), randWhole(20, 100)];\r\n      }\r\n    }\r\n    else if (Options.specify === \"decimal\") {\r\n        var DecimalH = (Math.random()).toFixed(2)\r\n        // var [f, r] = ['roundFormat', 2]\r\n\r\n\r\n\r\n        // var DecimalOT = (Math.random()*9 + 1).toFixed(1) \r\n        // var DecimalT = (Math.random()*9 + 1).toFixed(1)\r\n                // var decTwoDigit =  gen.shuffleArray[DecimalOT, DecimalH]\r\n        // var decTwoDigit =  [DecimalOT, DecimalH] \r\n        var DecimalHTOT = (Math.random()*99 + 10).toFixed(2)\r\n        var DecimalTOTH = (Math.random()*99 + 10).toFixed(2)\r\n        // var decLarge = gen.shuffleArray[DecimalHTOT, DecimalTOTH]\r\n        var decLarge = [DecimalHTOT, DecimalTOTH]\r\n\r\n        [numberL, numberL2, numberM] = [randWhole(2, 7), randWhole(2, 11), randWhole(10, 20)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 6), DecimalH, randWhole(10, 20)];\r\n\r\n      if (Options.level === \"2\") {\r\n        [numberL, numberL2, numberM] = [randWhole(12, 17), decLarge[0], randWhole(20, 50)];\r\n        [numberS, numberS2, numberM2] = [randWhole(2, 2), DecimalH, randWhole(20, 50)];\r\n      } else if (Options.level === \"3\") {\r\n        [numberL, numberL2, numberM] = [randWhole(7, 19), randWhole(20, 100), randWhole(50, 200)];\r\n        [numberS, numberS2, numberM2] = [randWhole(12, 39), DecimalH, decLarge[0]];\r\n      }\r\n    }\r\n    //100 + (40÷8 - 9) × 11)\r\n  \r\n    var OoOA = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberL} + (${numberS * numberL2} ÷ ${numberS} - ${numberS2}) × ${numberM2}`\r\n\r\n    var OoOB = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberM} × (${numberL} - ${numberS*numberM2} ÷ ${numberS}) + ${numberL2}`\r\n    \r\n    var OoOC = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberS}(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})`\r\n    \r\n    var OoOD = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           [${numberL2} + (${numberS2} × ${numberM} - ${numberS})] × ${numberM2}`\r\n    \r\n    var OoOE = `${simpleQArray[randWhole(simpleQArray.length, 0)]}           ${numberL2}[${numberL} + ${numberM}(${numberM2+numberS} - ${numberS})]`\r\n    var problems = [OoOA, OoOB, OoOC, OoOD, OoOE]\r\n    var randomProblem = problems[randWhole(problems.length, 0)]\r\n    // console.log(randomProblem)\r\n    var answer = \"\"\r\n    var wrong = \"\"\r\n        //100 + (40÷8 - 9) × 11)\r\n    if  (randomProblem === OoOA) {\r\n        answer = numberL+((numberS*numberL2/numberS-numberS2)*numberM2)\r\n        wrong = [Math.abs(numberL+(numberS*numberL2)/numberS-numberS2*numberM2),        (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2,\r\n            ((((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2, Math.abs(numberL+(numberS*numberL2)/numberS-(numberS2*numberM2))]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer/10, numberL+((numberS*numberL2/numberS-numberS2*10)*numberM2)))\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n        }\r\n        // console.log(wrong)\r\n//40 x ( 100 - 50 ÷ 5 ) + 100\r\n    }else if  (randomProblem === OoOB) {\r\n        answer = numberM*(numberL-(numberS*numberM2/numberS)+numberL2)\r\n        wrong = [numberM*numberL-numberS*numberM2/numberS+numberL2, numberM*numberL-(numberS*numberM2/numberS)+numberL2,\r\n            Math.floor((((numberM*numberL)-numberS)*numberM2)/numberS)+numberL2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer/10))\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n\r\n        }\r\n        // console.log(wrong)\r\n\r\n//10(100 - 8) + 40(100 + 40)\r\n    }else if  (randomProblem === OoOC) {\r\n        answer = numberS*(numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberS*numberL-numberS2+numberM*numberL2+numberM2, (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10, answer*100, answer/10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1, answer-2, answer+3))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }\r\n        // console.log(wrong)\r\n\r\n  //[100+(8x40-10)]x40\r\n    }else if  (randomProblem === OoOD) {\r\n        answer = (numberL2+(numberS2*numberM-numberS))*numberM2\r\n        wrong = [(numberL2+(numberS2*numberM-numberS))*numberM2+1, (numberL2+numberS2)*numberM-numberS,\r\n                 numberL2+Math.abs(numberS2*numberM-numberS*numberM2),   (((numberL2+numberS2)*numberM)-numberS)*numberM2]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }\r\n        // console.log(wrong)\r\n\r\n//[100+(8x40-10)]x40\r\n    }else if  (randomProblem === OoOE) {\r\n        answer = numberL2*(numberL+numberM*(numberM2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2+numberM2+numberM2)), numberL2*(numberL+numberM*(numberM2)),\r\n                numberL2*numberL + numberM*numberM2, (numberL2*numberL+numberM)*numberM2+numberS-numberS]\r\n        if (Options.specify === 'decimal') {\r\n            wrong.push((answer*10))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        } else {\r\n            wrong.push((answer+1, answer-2))\r\n            // wrong = gen.shuffleArray(wrong)\r\n        }       \r\n    }else {\r\n        answer = 0\r\n        wrong = [0, 0, 0]\r\n    }\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText: randomProblem,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n\r\n}\r\n\r\n\r\n","C:\\projects\\worksheet-creator\\src\\create-worksheet.js",["79","80","81","82","83","84","85","86","87","88","89"],"import './App.css';\r\nimport * as as from \"./app-files/add-sub\";\r\nimport * as o from \"./app-files/order-of-ops\";\r\nimport * as alg from './app-files/algorithms';\r\nimport * as tb from './app-files/tables';\r\nimport {randWhole, shuffleArray} from './app-files/general';\r\nimport {\r\n  Page,\r\n  Text,\r\n  View,\r\n  Image,\r\n  Document,\r\n  StyleSheet,\r\n  // PDFViewer,\r\n  // ReactPDF,\r\n  PDFDownloadLink,\r\n} from \"@react-pdf/renderer\";\r\n// import PropTypes from 'prop-types';\r\nimport React, { \r\n  // Component\r\n } from 'react';\r\n\r\n// import cw from './App.js'\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  body: {\r\n    marginTop:10,\r\n    paddingTop: 10,\r\n    paddingBottom: 10,\r\n    paddingHorizontal: 35,\r\n  },\r\n  title: {\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n    // fontFamily: 'arial'\r\n  },\r\n  author: {\r\n    fontSize: 12,\r\n    textAlign: 'center',\r\n    marginBottom: 40,\r\n  },\r\n  subtitle: {\r\n    fontSize: 18,\r\n    margin: 12,\r\n    // fontFamily: 'arial'\r\n  },\r\n  text: {\r\n    margin: 0,\r\n    fontSize: 14,\r\n    textAlign: 'justify',\r\n    // fontFamily: 'arial'\r\n\r\n  },\r\n  ac: {\r\n    margin: 5,\r\n    marginLeft: 40,\r\n    fontSize: 14,\r\n\r\n    // fontFamily: 'arial'\r\n\r\n  },\r\n  questionAnswer: {\r\n    flexDirection:'row',\r\n    marginTop: 10,\r\n    marginRight:10,\r\n    fontSize: 14,\r\n    textAlign: 'justify',\r\n  },\r\n  question: {\r\n    margin: 5,\r\n    marginLeft: 20,\r\n    fontSize: 14,\r\n    // fontFamily: 'arial'\r\n  },\r\n  answerKey: {\r\n    flexDirection:'row',\r\n    marginTop: 10,\r\n  }\r\n});\r\nexport const handleCreateWorksheet = (userSelection, order) => {\r\n  var answerKey = [];\r\n  var [n,i,x] = [0,,];\r\n  var [questionListOLD, question, questionArray] = [[],'','']\r\n  var questionList = []\r\n  const createAnswerChoices = (question) => { //For PDF\r\n    questionList.push({\r\n              question:<View ><Text style={styles.text}>{question.questionText} </Text> \r\n                          <Text>{question.answerChoices[0]} </Text> \r\n                          <Text>{question.answerChoices[1]} </Text> \r\n                          <Text>{question.answerChoices[2]} </Text> \r\n                          <Text>{question.answerChoices[3]} </Text>\r\n                      </View>,\r\n              answer: <Text>{question.answerChoices[4]}</Text>\r\n    });\r\n    console.log(questionList)\r\n\r\n    //works but doesn't align with answer choices\r\n    // questionList.push(<View wrap={false} ><Text style={styles.text}>{n + \") \" + question.questionText} </Text> \r\n    // <Text>{question.answerChoices[0]} </Text> \r\n    //   <Text>{question.answerChoices[1]} </Text> \r\n    //     <Text>{question.answerChoices[2]} </Text> \r\n    //       <Text>{question.answerChoices[3]} </Text>\r\n    // </View>\r\n    // );\r\n\r\n\r\n    // answerKey.push(<Text style={styles.ac}>{n + \") \" + question.answerChoices[4]}</Text>);\r\n  };\r\n  const createACTable = (question) => {\r\n    questionList.push(<Text style={styles.text}>{n + \") \" + question.questionText}\r\n      <Image src={question.img} defer style={{}} /></Text>\r\n    \r\n    );\r\n  }\r\n  const createAnswerChoicesOLD1224 = (question) => {\r\n    questionList.push(\r\n      <p>{n+ ') ' + question.questionText}</p>);\r\n      for (var m = 0; m<4; m++) {\r\n        questionList.push(<p>{question.answerChoices[m]}</p>);\r\n      }\r\n      answerKey.push(<p>{n + ') ' + question.answerChoices[4]}</p>);\r\n  };\r\n  const createAnswerChoicesTrypagedisplaypagebreak = (question) => {\r\n      if ((questionList.length-1)%4 ===0 && questionList.length !== 0) {\r\n        questionList.push(\r\n          <p>{n+ ') ' + question.questionText}</p>);\r\n          for (var m = 0; m<4; m++) {\r\n            if (m<3){\r\n              questionList.push(<p>{question.answerChoices[m]}</p>);\r\n  \r\n            } else {\r\n              questionList.push(<p style={{pageBreakAfter:'always'}}>{question.answerChoices[m]}</p>);\r\n  \r\n            }\r\n          }\r\n          answerKey.push(<p>{n + ') ' + question.answerChoices[4]}</p>);\r\n\r\n      }else {\r\n        questionList.push(\r\n          <p>{n+ ') ' + question.questionText}</p>);\r\n          for (var m = 0; m<4; m++) {\r\n            questionList.push(<p>{question.answerChoices[m]}</p>);\r\n          }\r\n          answerKey.push(<p>{n + ') ' + question.answerChoices[4]}</p>);\r\n      }\r\n\r\n    \r\n\r\n    // if (questionList.length % 4 === 0) {\r\n    //   questionList.push(\r\n    //     <p>{n+ ') ' + question.questionText}</p>);\r\n    //     for (var m = 0; m<4; m++) {\r\n    //       if (m<3){\r\n    //         questionList.push(<p>{question.answerChoices[m]}</p>);\r\n\r\n    //       } else {\r\n    //         questionList.push(<p style={{pageBreakAfter:'always'}}>{question.answerChoices[m]}</p>);\r\n\r\n    //       }\r\n    //     }\r\n    //     answerKey.push(<p>{n + ') ' + question.answerChoices[4]}</p>);\r\n    // } else {\r\n    //   questionList.push(\r\n    //     <p>{n+ ') ' + question.questionText}</p>);\r\n    //     for (var m = 0; m<4; m++) {\r\n    //       questionList.push(<p>{question.answerChoices[m]}</p>);\r\n    //     }\r\n    //     answerKey.push(<p>{n + ') ' + question.answerChoices[4]}</p>);\r\n    // }\r\n\r\n  };\r\n  \r\n  for (i = 0; i < userSelection.length; i++) {\r\n    if (userSelection[i].concept === \"add-whole\") {\r\n      questionArray = [as.addWhole, as.addWhole2, as.addWhole3, as.addWhole4, as.addWhole5]\r\n      for (x = 0; x < userSelection[i].quantity; x++) {\r\n        n += 1;\r\n        question = questionArray[randWhole(0, questionArray.length-1)]({level:userSelection[i].level})\r\n        createAnswerChoices(question);\r\n      }\r\n      }else if (userSelection[i].concept === \"sub-whole\") {\r\n        questionArray = [as.subWhole, as.subWhole2, as.subWhole3, as.subWhole4, as.subWhole5]\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          question = questionArray[randWhole(0, questionArray.length-1)]({level:userSelection[i].level})\r\n          createAnswerChoices(question);\r\n        }\r\n      }else if (userSelection[i].concept === \"order-ops-whole\") {\r\n          for (x = 0; x < userSelection[i].quantity; x++) {\r\n            n += 1;\r\n            question = o.orderOps({\r\n              level: userSelection[i].level,\r\n              specify: \"whole\",\r\n            });\r\n            createAnswerChoices(question);\r\n          }\r\n      }else if (userSelection[i].concept === \"order-ops-dec\") {\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          question = o.orderOps({\r\n            level: userSelection[i].level,\r\n            specify: \"decimal\",\r\n          });\r\n          createAnswerChoices(question);\r\n        }\r\n      }else if (userSelection[i].concept === \"div-dec-alg\") {\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          question = alg.divideDec({\r\n            level: userSelection[i].level,\r\n          });\r\n          createAnswerChoices(question);\r\n        }\r\n      }else if (userSelection[i].concept === \"mult-dec-alg\") {\r\n        questionArray = [alg.multDec, alg.multDec2];\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          question = questionArray[randWhole(0, questionArray.length-1)]({level:userSelection[i].level})\r\n\r\n          createAnswerChoices(question);\r\n       }\r\n      }else if (userSelection[i].concept === \"add-dec-alg\") {\r\n        questionArray = [alg.addDecWhole, alg.addDecPV]\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          question = questionArray[randWhole(0, questionArray.length-1)]({level:userSelection[i].level})\r\n\r\n          // question = alg.divideDec({\r\n          //   level: userSelection[i].level,\r\n          // });\r\n          createAnswerChoices(question);\r\n        }\r\n      }else if (userSelection[i].concept === \"sub-dec-alg\") {\r\n        questionArray = [alg.subDecPV, alg.subDecWhole]\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          question = questionArray[randWhole(0, questionArray.length-1)]({level:userSelection[i].level})\r\n\r\n          createAnswerChoices(question);\r\n        }\r\n      }else if (userSelection[i].concept === \"table\") {\r\n        questionArray = [tb.table]\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          question = questionArray[randWhole(0, questionArray.length-1)]({level:userSelection[i].level})\r\n\r\n          // question = alg.divideDec({\r\n          //   level: userSelection[i].level,\r\n          // });\r\n          createACTable(question);\r\n        }\r\n      }else if (userSelection[i].concept === \"tablev1\") {\r\n        questionArray = [tb.table]\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          // question = questionArray[randWhole(0, questionArray.length)]({level:userSelection[i].level})\r\n          // createAnswerChoices(question);\r\n          // testing out trying to create react-pdf <text within the actual question to create the table\r\n          // questionList.push(question.questionText)\r\n          // answerKey.push(question.answerChoices[4])\r\n          var dolphinImg = <Image src=\"https://images2.minutemediacdn.com/image/upload/c_crop,h_1778,w_3155,x_0,y_843/v1554928552/shape/mentalfloss/540093-istock-514343279.jpg?itok=isS-TJcM\"/>;\r\n          var probTextOnly = <Text>Hello this is react-pdf text from table</Text> //type mismatch\r\n          var prob1 = `This is question stufffs and this is a pic: ${dolphinImg}` //shows up as [object:object]\r\n          var prob2 = <Text>This is question stufffs and this is a pic: <Image src=\"https://images2.minutemediacdn.com/image/upload/c_crop,h_1778,w_3155,x_0,y_843/v1554928552/shape/mentalfloss/540093-istock-514343279.jpg?itok=isS-TJcM\"/>answer choices</Text>// error mismatch type append child? \r\n          var prob = \"hello this is working\" //now this also gives type mismatch?\r\n      \r\n          var problem = {questionText: prob,\r\n              answerChoices: \"no answers yet\",\r\n              correctAnswer: 'correct answer'}\r\n          questionList.push(prob2)\r\n        }\r\n        \r\n      }else if (userSelection[i].concept === \"tablev2\") {\r\n        questionArray = [tb.table]\r\n        for (x = 0; x < userSelection[i].quantity; x++) {\r\n          n += 1;\r\n          question = questionArray[randWhole(0, questionArray.length-1)]({level:userSelection[i].level})\r\n          // createAnswerChoices(question);\r\n          // testing out trying to create react-pdf <text within the actual question to create the table\r\n          questionList.push(question.questionText)\r\n          answerKey.push(question.answerChoices[4])\r\n        }\r\n        \r\n      }\r\n}\r\n  if (order === 'mixed') {\r\n    questionList = shuffleArray(questionList)\r\n  }\r\n  // setSele('')\r\n  // setLevelState('')\r\n  // setQuantityState('')\r\n  // setConceptState('')\r\n  // console.log(questionList);\r\n  var newQuestionList = []\r\n  var answerKey = []\r\n  for (var k=0; k<questionList.length;k++){\r\n    newQuestionList.push(<View wrap={false} style={styles.questionAnswer}><Text>{k+1})</Text>{questionList[k].question}</View>)\r\n    answerKey.push(<View style={styles.answerKey}><Text>{k+1})</Text>{questionList[k].answer}</View>)\r\n    console.log(newQuestionList)\r\n    console.log(answerKey)\r\n    // questionList[i].question = <View><Text>{i+1})</Text>{questionList[i]}</View> OLD questionList is an array not object\r\n\r\n    // questionList[i] = <View><Text>{i+1})</Text>{questionList[i]}</View>\r\n    \r\n    // `${i+1})${questionList[i]}`\r\n  }\r\n  // return [questionList, answerKey];\r\n  return [newQuestionList, answerKey];\r\n\r\n};\r\n\r\n\r\n// var cw = handleCreateWorksheet();\r\n\r\n// export const handlePDF = (title) => {\r\n//   return (\r\n\r\n//     <Document>\r\n//       <Page style= {styles.body}>\r\n//         <Text style= {styles.question}>\r\n//         Name:____________________________________________ Date:____________ </Text>\r\n//         <Text style= {styles.title}>\r\n//           {title}\r\n//         </Text>\r\n//         {cw[0]}</Page>\r\n//       <Page style= {styles.ac}>\r\n//         <Text style={styles.ac}>Answer Key: </Text>\r\n//         {cw[1]}\r\n//       </Page>\r\n//     </Document>\r\n//   )\r\n\r\n\r\n// };\r\nclass CreateWorksheet extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render () {\r\n      return (\r\n        <div>\r\n        {this.props.displayQuestionList ? \r\n          <Document>\r\n          <Page>\r\n          {this.props.cw[0]}\r\n          </Page>\r\n\r\n          <Page>\r\n          {this.props.cw[1]}\r\n          </Page>\r\n        </Document>\r\n        :null}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\n// function Problems() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//     <p>7 + 2</p>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\nexport default CreateWorksheet;\r\n\r\n","C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js",["90","91","92","93"],"import {randWhole, randDec, roundDec, shuffleArray, wrongOptions, answerChoicesKey} from './general.js'\r\n\r\nexport const divideDec = (Options) => {\r\n    var answer = randDec(1, 9, 2)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = roundDec(answer*divisor, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 2)\r\n    divisor = randWhole(2, 11)\r\n    dividend = roundDec(answer*divisor, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(1, 9, 2)\r\n        divisor = randWhole(12, 50)\r\n        dividend = roundDec(answer*divisor, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec = (Options) => {\r\n    var numberS = randDec(1, 9, 2)\r\n    var numberL = randWhole(1, 9)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, 2)\r\n    numberL = randWhole(11, 99)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        numberS = randDec(1, 9, 2)\r\n        numberL = randWhole(13,99)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {questionText:    (`${numberS} x ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec2 = (Options) => {\r\n    var pv = randWhole(1, 2)\r\n    var numberS = randDec(1, 9, pv)\r\n    var numberL = randDec(0, 1, pv)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, pv)\r\n    numberL = randDec(11, 99, pv)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        numberS = randDec(1, 9, pv)\r\n        numberL = randDec(13, 99, pv)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {questionText:    (`${numberS} x ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const divideDec2 = (Options) => {\r\n    var answer = randDec(0, 1, 3)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(3)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 3)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(3)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(1, 9, 3)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(3)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const divideDec3 = (Options) => {\r\n    var answer = randDec(10, 90, 1)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(1)\r\n\r\n    if (Options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(100, 900, 1)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(1)\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        answer = randDec(100, 900, 1)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(1)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const divideDecOLD = (Options) => {\r\n    var [dec1, dec2, dec3] = [randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)]\r\n    var x\r\n    // var shuffleDecimals = shuffleArray([randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)])\r\n    var shuffleDecimals = shuffleArray([dec1, dec2, dec3])\r\n    if (shuffleDecimals[0] === dec1){\r\n        x = 2\r\n    } else if (shuffleDecimals[1] === dec2) {\r\n        x = 3\r\n    } else {\r\n        x = 1\r\n    }\r\n    var answer = shuffleDecimals[0] \r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(x)\r\n\r\n    if (Options === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    var shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n    answer = shuffleDecimals[0]\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(x)\r\n\r\n    } else if (Options ===\"3\") {\r\n        var shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n        answer = shuffleDecimals[0]\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(x)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\n\r\n\r\n\r\n\r\nexport const addDecPV = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        var w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(5, 9, y)},\r\n                {numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                {numberS:randDec(10, 90, x), numberL: randDec(90, 300, y)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, w)\r\n    // console.log(numberL+numberS)\r\n    // console.log(answer)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const addDecWhole = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                {numberS:randWhole(1, 9), numberL: randDec(9,15, x)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n                {numberS:randWhole(10, 90), numberL: randDec(90,300, x)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n                {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n                {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\n\r\nexport const subDecWhole = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                    {numberS:randWhole(1, 9), numberL: randDec(10,15, x)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n            {numberS:randWhole(10, 90), numberL: randDec(91,300, x)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n            {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n            {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = randNums.numberS\r\n    var numberL = randNums.numberL\r\n    var answer = roundDec(numberL-numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const subDecPV = (Options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        var w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(6, 11, y)},\r\n                    {numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n                ]\r\n\r\n    if (Options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n            {numberS:randDec(10, 90, x), numberL: randDec(91,300, y)}]\r\n\r\n    } else if (Options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL-numberS, w)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {questionText:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}","C:\\projects\\worksheet-creator\\src\\app-files\\tables.js",["94","95","96","97","98","99","100","101","102","103"],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":6,"column":13,"nodeType":"110","messageId":"111","endLine":6,"endColumn":19},{"ruleId":"108","severity":1,"message":"112","line":7,"column":13,"nodeType":"110","messageId":"111","endLine":7,"endColumn":14},{"ruleId":"108","severity":1,"message":"113","line":8,"column":13,"nodeType":"110","messageId":"111","endLine":8,"endColumn":16},{"ruleId":"108","severity":1,"message":"114","line":9,"column":13,"nodeType":"110","messageId":"111","endLine":9,"endColumn":17},{"ruleId":"108","severity":1,"message":"115","line":13,"column":8,"nodeType":"110","messageId":"111","endLine":13,"endColumn":10},{"ruleId":"108","severity":1,"message":"116","line":16,"column":8,"nodeType":"110","messageId":"111","endLine":16,"endColumn":11},{"ruleId":"108","severity":1,"message":"117","line":30,"column":10,"nodeType":"110","messageId":"111","endLine":30,"endColumn":19},{"ruleId":"108","severity":1,"message":"118","line":184,"column":9,"nodeType":"110","messageId":"111","endLine":184,"endColumn":24},{"ruleId":"108","severity":1,"message":"119","line":211,"column":7,"nodeType":"110","messageId":"111","endLine":211,"endColumn":12},{"ruleId":"108","severity":1,"message":"120","line":237,"column":9,"nodeType":"110","messageId":"111","endLine":237,"endColumn":19},{"ruleId":"121","severity":1,"message":"122","line":273,"column":5,"nodeType":"123","messageId":"124","endLine":273,"endColumn":21},{"ruleId":"108","severity":1,"message":"125","line":420,"column":1,"nodeType":"110","messageId":"111","endLine":420,"endColumn":10},{"ruleId":"126","severity":1,"message":"127","line":163,"column":10,"nodeType":"110","messageId":"128","endLine":163,"endColumn":17},{"ruleId":"126","severity":1,"message":"129","line":163,"column":19,"nodeType":"110","messageId":"128","endLine":163,"endColumn":26},{"ruleId":"126","severity":1,"message":"127","line":166,"column":10,"nodeType":"110","messageId":"128","endLine":166,"endColumn":17},{"ruleId":"126","severity":1,"message":"129","line":166,"column":19,"nodeType":"110","messageId":"128","endLine":166,"endColumn":26},{"ruleId":"126","severity":1,"message":"127","line":207,"column":10,"nodeType":"110","messageId":"128","endLine":207,"endColumn":17},{"ruleId":"126","severity":1,"message":"129","line":207,"column":19,"nodeType":"110","messageId":"128","endLine":207,"endColumn":26},{"ruleId":"126","severity":1,"message":"127","line":210,"column":10,"nodeType":"110","messageId":"128","endLine":210,"endColumn":17},{"ruleId":"126","severity":1,"message":"129","line":210,"column":19,"nodeType":"110","messageId":"128","endLine":210,"endColumn":26},{"ruleId":"108","severity":1,"message":"130","line":235,"column":9,"nodeType":"110","messageId":"111","endLine":235,"endColumn":13},{"ruleId":"108","severity":1,"message":"130","line":266,"column":9,"nodeType":"110","messageId":"111","endLine":266,"endColumn":13},{"ruleId":"108","severity":1,"message":"131","line":275,"column":15,"nodeType":"110","messageId":"111","endLine":275,"endColumn":22},{"ruleId":"108","severity":1,"message":"130","line":300,"column":9,"nodeType":"110","messageId":"111","endLine":300,"endColumn":13},{"ruleId":"108","severity":1,"message":"131","line":304,"column":19,"nodeType":"110","messageId":"111","endLine":304,"endColumn":26},{"ruleId":"108","severity":1,"message":"130","line":328,"column":9,"nodeType":"110","messageId":"111","endLine":328,"endColumn":13},{"ruleId":"108","severity":1,"message":"131","line":332,"column":19,"nodeType":"110","messageId":"111","endLine":332,"endColumn":26},{"ruleId":"108","severity":1,"message":"130","line":356,"column":9,"nodeType":"110","messageId":"111","endLine":356,"endColumn":13},{"ruleId":"108","severity":1,"message":"131","line":360,"column":19,"nodeType":"110","messageId":"111","endLine":360,"endColumn":26},{"ruleId":"108","severity":1,"message":"132","line":363,"column":9,"nodeType":"110","messageId":"111","endLine":363,"endColumn":13},{"ruleId":"108","severity":1,"message":"133","line":1,"column":34,"nodeType":"110","messageId":"111","endLine":1,"endColumn":46},{"ruleId":"108","severity":1,"message":"134","line":2,"column":5,"nodeType":"110","messageId":"111","endLine":2,"endColumn":12},{"ruleId":"108","severity":1,"message":"135","line":2,"column":14,"nodeType":"110","messageId":"111","endLine":2,"endColumn":22},{"ruleId":"108","severity":1,"message":"136","line":2,"column":24,"nodeType":"110","messageId":"111","endLine":2,"endColumn":33},{"ruleId":"137","severity":1,"message":"138","line":39,"column":17,"nodeType":"139","messageId":"140","endLine":39,"endColumn":18},{"ruleId":"108","severity":1,"message":"141","line":16,"column":3,"nodeType":"110","messageId":"111","endLine":16,"endColumn":18},{"ruleId":"142","severity":1,"message":"143","line":84,"column":17,"nodeType":"144","messageId":"145","endLine":84,"endColumn":22},{"ruleId":"108","severity":1,"message":"146","line":85,"column":8,"nodeType":"110","messageId":"111","endLine":85,"endColumn":23},{"ruleId":"108","severity":1,"message":"147","line":117,"column":9,"nodeType":"110","messageId":"111","endLine":117,"endColumn":35},{"ruleId":"108","severity":1,"message":"148","line":125,"column":9,"nodeType":"110","messageId":"111","endLine":125,"endColumn":51},{"ruleId":"126","severity":1,"message":"149","line":143,"column":20,"nodeType":"110","messageId":"128","endLine":143,"endColumn":21},{"ruleId":"108","severity":1,"message":"150","line":264,"column":15,"nodeType":"110","messageId":"111","endLine":264,"endColumn":27},{"ruleId":"108","severity":1,"message":"151","line":265,"column":15,"nodeType":"110","messageId":"111","endLine":265,"endColumn":20},{"ruleId":"108","severity":1,"message":"152","line":269,"column":15,"nodeType":"110","messageId":"111","endLine":269,"endColumn":22},{"ruleId":"126","severity":1,"message":"153","line":297,"column":7,"nodeType":"110","messageId":"128","endLine":297,"endColumn":16},{"ruleId":"154","severity":1,"message":"155","line":338,"column":3,"nodeType":"156","messageId":"157","endLine":340,"endColumn":4},{"ruleId":"126","severity":1,"message":"158","line":166,"column":9,"nodeType":"110","messageId":"128","endLine":166,"endColumn":24},{"ruleId":"126","severity":1,"message":"158","line":172,"column":13,"nodeType":"110","messageId":"128","endLine":172,"endColumn":28},{"ruleId":"126","severity":1,"message":"159","line":198,"column":13,"nodeType":"110","messageId":"128","endLine":198,"endColumn":14},{"ruleId":"126","severity":1,"message":"159","line":304,"column":13,"nodeType":"110","messageId":"128","endLine":304,"endColumn":14},{"ruleId":"108","severity":1,"message":"160","line":2,"column":5,"nodeType":"110","messageId":"111","endLine":2,"endColumn":9},{"ruleId":"108","severity":1,"message":"161","line":3,"column":5,"nodeType":"110","messageId":"111","endLine":3,"endColumn":9},{"ruleId":"108","severity":1,"message":"162","line":4,"column":5,"nodeType":"110","messageId":"111","endLine":4,"endColumn":9},{"ruleId":"108","severity":1,"message":"163","line":6,"column":5,"nodeType":"110","messageId":"111","endLine":6,"endColumn":13},{"ruleId":"108","severity":1,"message":"164","line":7,"column":5,"nodeType":"110","messageId":"111","endLine":7,"endColumn":15},{"ruleId":"108","severity":1,"message":"141","line":10,"column":5,"nodeType":"110","messageId":"111","endLine":10,"endColumn":20},{"ruleId":"108","severity":1,"message":"165","line":105,"column":17,"nodeType":"110","messageId":"111","endLine":105,"endColumn":22},{"ruleId":"108","severity":1,"message":"166","line":107,"column":17,"nodeType":"110","messageId":"111","endLine":107,"endColumn":22},{"ruleId":"108","severity":1,"message":"165","line":152,"column":17,"nodeType":"110","messageId":"111","endLine":152,"endColumn":22},{"ruleId":"108","severity":1,"message":"166","line":154,"column":17,"nodeType":"110","messageId":"111","endLine":154,"endColumn":22},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'addsub' is defined but never used.","Identifier","unusedVar","'o' is defined but never used.","'alg' is defined but never used.","'docx' is defined but never used.","'fs' is defined but never used.","'Pdf' is defined but never used.","'randWhole' is defined but never used.","'handleSelectOLD' is assigned a value but never used.","'image' is assigned a value but never used.","'handlePDF2' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'tableSnap' is assigned a value but never used.","no-redeclare","'numberS' is already defined.","redeclared","'numberL' is already defined.","'name' is assigned a value but never used.","'numberM' is assigned a value but never used.","'year' is assigned a value but never used.","'wrongOptions' is defined but never used.","'boyList' is defined but never used.","'boyList2' is defined but never used.","'sportList' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'PDFDownloadLink' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'questionListOLD' is assigned a value but never used.","'createAnswerChoicesOLD1224' is assigned a value but never used.","'createAnswerChoicesTrypagedisplaypagebreak' is assigned a value but never used.","'m' is already defined.","'probTextOnly' is assigned a value but never used.","'prob1' is assigned a value but never used.","'problem' is assigned a value but never used.","'answerKey' is already defined.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'shuffleDecimals' is already defined.","'w' is already defined.","'Page' is defined but never used.","'Text' is defined but never used.","'View' is defined but never used.","'Document' is defined but never used.","'StyleSheet' is defined but never used.","'prob0' is assigned a value but never used.","'prob2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
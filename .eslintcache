[{"C:\\projects\\worksheet-creator\\src\\index.js":"1","C:\\projects\\worksheet-creator\\src\\reportWebVitals.js":"2","C:\\projects\\worksheet-creator\\src\\App.js":"3","C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js":"4","C:\\projects\\worksheet-creator\\src\\app-files\\general.js":"5","C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js":"6","C:\\projects\\worksheet-creator\\src\\create-worksheet.js":"7","C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js":"8","C:\\projects\\worksheet-creator\\src\\app-files\\tables.js":"9","C:\\projects\\worksheet-creator\\src\\app-files\\add-sub-fract.js":"10","C:\\projects\\worksheet-creator\\src\\app-files\\multiply.js":"11","C:\\projects\\worksheet-creator\\src\\components\\display-user-selection.js":"12","C:\\projects\\worksheet-creator\\src\\components\\user-inputs.js":"13","C:\\projects\\worksheet-creator\\src\\components\\input.js":"14","C:\\projects\\worksheet-creator\\src\\app-files\\divide.js":"15","C:\\projects\\worksheet-creator\\src\\components\\concept-customization.js":"16","C:\\projects\\worksheet-creator\\src\\components\\custom-assignment.js":"17","C:\\projects\\worksheet-creator\\src\\components\\concept-selection.js":"18","C:\\projects\\worksheet-creator\\src\\components\\final-selections.js":"19","C:\\projects\\worksheet-creator\\src\\components\\home.js":"20","C:\\projects\\worksheet-creator\\src\\components\\concept-general.js":"21"},{"size":605,"mtime":1612107631723,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":7595,"mtime":1612500516021,"results":"25","hashOfConfig":"23"},{"size":23932,"mtime":1612109555059,"results":"26","hashOfConfig":"23"},{"size":7662,"mtime":1611805905506,"results":"27","hashOfConfig":"23"},{"size":17676,"mtime":1612133492111,"results":"28","hashOfConfig":"23"},{"size":10960,"mtime":1612107390021,"results":"29","hashOfConfig":"23"},{"size":16396,"mtime":1611452995047,"results":"30","hashOfConfig":"23"},{"size":14811,"mtime":1611620955307,"results":"31","hashOfConfig":"23"},{"size":10294,"mtime":1611500437013,"results":"32","hashOfConfig":"23"},{"size":14306,"mtime":1611500437050,"results":"33","hashOfConfig":"23"},{"size":1777,"mtime":1612501269460,"results":"34","hashOfConfig":"23"},{"size":8669,"mtime":1611500437024,"results":"35","hashOfConfig":"23"},{"size":1013,"mtime":1609477038359,"results":"36","hashOfConfig":"23"},{"size":12027,"mtime":1611500437012,"results":"37","hashOfConfig":"23"},{"size":9747,"mtime":1612501464298,"results":"38","hashOfConfig":"23"},{"size":685,"mtime":1612501594273,"results":"39","hashOfConfig":"23"},{"size":2643,"mtime":1612500124339,"results":"40","hashOfConfig":"23"},{"size":1963,"mtime":1612501543596,"results":"41","hashOfConfig":"23"},{"size":2756,"mtime":1612404128238,"results":"42","hashOfConfig":"23"},{"size":1649,"mtime":1612501464282,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"ahlkum",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":73,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"47"},"C:\\projects\\worksheet-creator\\src\\index.js",["100","101"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>\n,\n  document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["102","103"],"C:\\projects\\worksheet-creator\\src\\reportWebVitals.js",[],"C:\\projects\\worksheet-creator\\src\\App.js",["104","105","106","107","108","109"],"C:\\projects\\worksheet-creator\\src\\app-files\\add-sub.js",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127"],"// import * as gen from './general.js'\r\nimport {randWhole, shuffleArray, wrongOptions, answerChoicesKey,\r\n        boyList, girlList, nameList, cityList, disasterList, sportList, candyList, forestAnimal, lakeAnimal, desertAnimal} from './general.js'\r\n\r\n\r\nconst addSubNumbers = (userSelection) => {\r\n\r\n    if (userSelection.specify === 'Less than 100'){\r\n        var [numberS, numberM, numberL] = [randWhole(15, 40), randWhole(41, 60), randWhole(61, 99)];\r\n\r\n    } else if (userSelection.specify === 'Less than 200') {\r\n        var [numberS, numberM, numberL] = [randWhole(80, 100), randWhole(101, 130), randWhole(131, 199)];\r\n\r\n\r\n    } else if (userSelection.specify === 'Less than 1000'){\r\n        var [numberS, numberM, numberL] = [randWhole(100, 400), randWhole(401, 599), randWhole(600, 999)];\r\n\r\n    } else if (userSelection.specify === 'Less than 10000'){\r\n        [numberS, numberM, numberL] = [randWhole(1000, 4000), randWhole(40001, 6000),randWhole(6001, 9999)];\r\n\r\n    }else {\r\n        [numberS, numberM, numberL] = [randWhole(1000, 4000), randWhole(4001, 6000),randWhole(6001, 9999)];\r\n    }\r\n\r\nreturn [numberS, numberM, numberL]\r\n}  \r\nexport const subWhole = (userSelection) => { //sport\r\n    var name = shuffleArray(nameList)\r\n    var numList = addSubNumbers(userSelection)\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    // var f = 'format'\r\n    var [numberS, numberL] = [numList[0], numList[2]];\r\n\r\n    var answer= (numberL - numberS);\r\n    var wrong = shuffleArray(wrongOptions(answer, 'sub', numberL, numberS))\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${name[0]} played ${sport} for ${numberS.toLocaleString()} minutes last year. ${name[1]} ` +\r\n    `played ${sport} for ${numberL.toLocaleString()} minutes last year. How many more minutes did `+\r\n    `${name[1]} play than ${name[0]}?`)\r\n    var prob2 = (`${name[0]} played ${sport} for ${numberS.toLocaleString()} minutes last year. ${name[1]} `+\r\n    `played ${sport} for ${numberL.toLocaleString()} minutes last year. What is the difference between ` +\r\n    `the number of minutes ${name[1]} played and the number of minutes ${name[0]} played?`)\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n\r\n}\r\nexport const addWhole = (userSelection) => { //sports\r\n    var name = shuffleArray(nameList)\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    var numList = addSubNumbers(userSelection)\r\n    var [numberS, numberL] = [numList[0], numList[2]];\r\n\r\n    if (userSelection.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n\r\n\r\n    } else if (userSelection.level ===\"3\") {\r\n    [numberS, numberL] = [randWhole(1000, 4000), randWhole(4001, 9999)];\r\n    } \r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    \r\n    var problem = {text:    (`${name[0]} played ${sport} for ${(numberS).toLocaleString()} minutes last year. ${name[1]} `+\r\n                 `played ${sport} for ${(numberL).toLocaleString()} minutes last year. How many minutes did ` +\r\n                 `${name[0]} and ${name[1]} play altogether?`),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    \r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\nexport const subWhole2 = (userSelection) => { //candy\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var disaster = disasterList[randWhole(0, disasterList.length-1)]\r\n    var girl = shuffleArray(girlList)\r\n    var boy = shuffleArray(boyList)\r\n\r\n    var candy = shuffleArray(candyList)\r\n    var numList = addSubNumbers(userSelection)\r\n    var [numberS, numberM, numberL] = [numList[0], numList[1],numList[2]];\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    \r\n    var prob1 = (`In a jar there are three different types of candies. There are ${numberS.toLocaleString()} ${candy[0]} `+\r\n        `, ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. What is the difference between `+ \r\n        `the number of ${candy[0]} and the number of ${candy[2]} in the jar?`)\r\n    var prob2 = (`${name} has a basket of candies. There are ${numberS} ${candy[0]}, `+\r\n        `${numberS.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. How many more `+\r\n        `${candy[2]} are in the basket than ${candy[0]} ?`)\r\n    var prob3 = (`${girl[0]} loves ${candy[0]} so much that she ate ${numberS.toLocaleString()} in the past month. `+\r\n        `This brought her total number of ${candy[0]} eaten in her life to ${numberL.toLocaleString()}. How much was `+\r\n        `her total ${candy[0]} eaten before this past month?`)\r\n    var prob4 = (`${boy[0]} is obsessed with ${candy[0]} so he decides to stock up in case of a ${disaster} coming soon.`+\r\n        `He buys ${numberL.toLocaleString()} ${candy[0]} but then on the way home he got really hungry so he ate `+\r\n        `${numberS.toLocaleString()} of the ${candy[0]}. How many ${candy[0]} does he have now?`)\r\n    var prob5 = (`${boy[0]} is obsessed with ${candy[0]} so he decides to stock up by purchasing ${numberL.toLocaleString()} in case of `+\r\n        `a ${disaster} coming soon.He decided that he had way too many and ended up giving ${numberS.toLocaleString()} of the ${candy[0]} `+\r\n        `to his friend ${boy[1]}. How many ${candy[0]} does he have left?`)\r\n    var randProb = [prob1, prob2, prob3, prob4, prob5][randWhole(0, 4)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n        console.log(problem)\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n            \r\n\r\n\r\n}\r\nexport const addWhole2 = (userSelection) => { //candy\r\n    var name = shuffleArray(nameList)\r\n    var girl = shuffleArray(girlList)\r\n    var boy = shuffleArray(boyList)\r\n    var disaster = disasterList[randWhole(0, disasterList.length-1)]\r\n\r\n    var candy = shuffleArray(candyList)\r\n    var numList = addSubNumbers(userSelection)\r\n    var [numberS, numberM, numberL] = [numList[0], numList[1],numList[2]];\r\n\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`There are three different types of candies in a jar. There are ${numberS.toLocaleString()} ${candy[0]}`+\r\n    `, ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. How many total ${candy[0]} and ${candy[2]} are in the jar?`)\r\n    var prob2 = (`${name[0]} has a jar with three different types of candies inside. There are ${numberS.toLocaleString()} `+\r\n    `${candy[0]},  ${numberM.toLocaleString()} ${candy[1]}, and ${numberL.toLocaleString()} ${candy[2]}. `+\r\n    ` How many ${candy[2]} and ${candy[1]} are in the jar altogether?`)\r\n    var prob3 = (`${girl[0]} loves ${candy[0]} so much that she has already eaten ${numberL.toLocaleString()} in her life. `+\r\n    `If she eats ${numberS.toLocaleString()} more by the end of the year, how many total ${candy[0]} will she have eaten?`)\r\n    var prob4 = (`${boy[0]} is obsessed with ${candy[0]} so he already has ${numberS.toLocaleString()} in his pantry at home. `+\r\n    `He begins to worry about a ${disaster} coming soon, so he decides`+\r\n    `to stock up by purchasing ${numberL.toLocaleString()} ${candy[0]} just in case. How many ${candy[0]} does he have now?`)\r\n    var randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole3 = (userSelection) => { //animals\r\n    var randForestAnimal = shuffleArray(forestAnimal)\r\n    var randDesertAnimal = shuffleArray(desertAnimal)\r\n    var randLakeAnimal = shuffleArray(lakeAnimal)\r\n    var randAnimal = shuffleArray([randDesertAnimal, randForestAnimal, randLakeAnimal])\r\n    var numList = addSubNumbers(userSelection)\r\n    var [numberS, numberM, numberL] = [numList[0], numList[1],numList[2]];\r\n\r\n    var [numberS, numberL] = [randWhole(100, 500), randWhole(500, 999)];\r\n    var place\r\n    if (randAnimal[0] === randDesertAnimal) {\r\n        place = 'desert'\r\n    }else if (randAnimal[0] === randForestAnimal) {\r\n        place = 'forest'\r\n    }else if (randAnimal[0] === randLakeAnimal) {\r\n        place = 'lake'\r\n    }\r\n \r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`There are ${numberL.toLocaleString()} ${randAnimal[0][0]}s and ${randAnimal[0][1]}s in the `+\r\n        `${place}. If there are ${numberS.toLocaleString()} ${randAnimal[0][0]}s in the ${place}, `+\r\n        `how many ${randAnimal[0][1]}s are in the ${place}?`)\r\n    var prob2 = (`In the ${place} there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s and `+\r\n        `${numberL.toLocaleString()} ${randAnimal[0][0]}s. What is the difference beween the number of `+\r\n        `${randAnimal[0][0]}s and ${randAnimal[0][1]}s in the ${place}?`)\r\n    var prob3 = (`Researchers are surveying the ${place}. They found a total of ${numberL.toLocaleString()} `+ \r\n        `${randAnimal[0][1]}s, and a total of ${numberS.toLocaleString()} ${randAnimal[0][0]}s. How many more `+\r\n        `${randAnimal[0][1]}s are there in the ${place} than ${randAnimal[0][0]}s?`)\r\n    var randProb = [prob1, prob2, prob3][Math.floor(Math.random()*2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n\r\n            \r\n}\r\nexport const addWhole3 = (userSelection) => { //animals\r\n    var randForestAnimal = shuffleArray(forestAnimal)\r\n    var randDesertAnimal = shuffleArray(desertAnimal)\r\n    var randLakeAnimal = shuffleArray(lakeAnimal)\r\n    var randAnimal = shuffleArray([randDesertAnimal, randForestAnimal, randLakeAnimal])\r\n    var numList = addSubNumbers(userSelection)\r\n    var [numberS, numberM, numberL] = [numList[0], numList[1],numList[2]];\r\n    var place\r\n    if (randAnimal[0] === randDesertAnimal) {\r\n        place = 'desert'\r\n    }else if (randAnimal[0] === randForestAnimal) {\r\n        place = 'forest'\r\n    }else if (randAnimal[0] === randLakeAnimal) {\r\n        place = 'lake'\r\n    }\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`There are ${numberL.toLocaleString()} ${randAnimal[0][0]}s in the ${place}. If there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s `+\r\n        `in the ${place} , how many total ${randAnimal[0][0]}s and ${randAnimal[0][1]} are in the ${place}?`)\r\n    var prob2 = (`In the ${place} there are ${numberS.toLocaleString()} ${randAnimal[0][1]}s and ${numberL.toLocaleString()} ${randAnimal[0][0]}s. `+ \r\n        `How many ${randAnimal[0][0]}s and ${randAnimal[0][1]}s are in the ${place} combined?`)\r\n    var prob3 = (`Researchers are surveying the ${place}. They found a total of ${numberL.toLocaleString()} `+\r\n        `${randAnimal[0][1]}s, and a total of ${numberS.toLocaleString()} ${randAnimal[0][0]}s. How many animals did the researchers `+\r\n        `find at the ${place} combined?`)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n\r\n            \r\n}\r\n\r\n\r\nexport const addWhole4 = (userSelection) => { //youtube\r\n    var boy = shuffleArray(boyList)\r\n    var girl = shuffleArray(girlList)\r\n    var numList = addSubNumbers(userSelection)\r\n    var [numberS, numberM, numberL] = [numList[0], numList[1],numList[2]];\r\n\r\n    var videoAdj = ['hilarious', 'funny', 'silly', 'popular', 'viral'][randWhole(0,4)]\r\n    var videoTopic = ['dog', 'fashion', 'cat', 'music', 'tutorial', 'cooking' ][randWhole(0,6)]\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${boy[0]} had ${numberL.toLocaleString()} subscribers on his youtube channel as of last month. This month so far he has gained `+\r\n                `${numberS.toLocaleString()} subscribers after making a ${videoAdj} video. How many subscribers does his channel have?`)\r\n    var prob2 = (`${girl[0]} had ${numberL.toLocaleString()} subscribers on her youtube channel as of last month. This month her subscriber count has increased by `+\r\n                `${numberS.toLocaleString()} after she made a very popular ${videoTopic} video. How many subscribers does her channel have now?`)\r\n    var prob3 = (`${boy[0]} got ${numberL.toLocaleString()} views on his latest ${videoTopic} video. His previous video got ${numberS.toLocaleString()} views. How `+\r\n                `many combined views did the two videos get?`)\r\n    var prob4 = (`${girl[0]} currently has ${numberS.toLocaleString()} subscribers on her channel. Her goal is to reach ${numberL.toLocaleString()} subscribers by `+\r\n                `the end of the year. How many more subscribers will she need to get in order to reach her goal?`)\r\n    var randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole4 = (userSelection) => { //youtube\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var boy = shuffleArray(boyList)\r\n    var girl = shuffleArray(girlList)\r\n    var numList = addSubNumbers(userSelection)\r\n    var [numberS, numberM, numberL] = [numList[0], numList[1],numList[2]];\r\n\r\n    var reason = [`hasn't been making new videos`, `hasn't been actively making videos`, \r\n                `has been inactive recently`, `made a video that the subscribers did not like`][randWhole(0,3)]\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${boy[0]} had ${numberL.toLocaleString()} subscribers on his youtube channel as of last month. This month so far he has lost `+\r\n                `${numberS.toLocaleString()} subscribers because he ${reason}. How many subscribers does his channel have now?`)\r\n    var prob2 = (`${girl[0]} had ${numberL.toLocaleString()} subscribers on her youtube channel as of last month. This month she has lost `+\r\n                `${numberS.toLocaleString()} subscribers because she ${reason}. How many subscribers does her channel have?`)\r\n    var prob3 = (`${boy[0]} got ${numberL.toLocaleString()} views on his latest video. His previous video got ${numberS.toLocaleString()} views. How `+\r\n                `many more views did his latest video get than his previous video?`)\r\n    var prob4 = (`${girl[0]} got ${numberS.toLocaleString()} views on her latest video. Her other video went viral last week and got ${numberL.toLocaleString()} views. How `+\r\n                `many more views did her viral video get than her latest video?`)\r\n    var randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\nexport const addWhole5 = (userSelection) => { //population\r\n    // var name = nameList[randWhole(0, nameList.length-1)]\r\n    var city = shuffleArray(cityList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), city[1].pop, city[0].pop];\r\n    var numList = addSubNumbers(userSelection)\r\n    if (userSelection === \"2\") {\r\n        [numberS, numberM, numberL] = [randWhole(100000, 300000), randWhole(300000, 500000), city[0].pop];\r\n    \r\n        }\r\n    var year = randWhole(2015,2019)\r\n    var answer = (numberL+numberS)\r\n    var wrong= wrongOptions(answer, 'add', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${city[0].city} had a population of ${numberL.toLocaleString()} as of the end of the year ${year}. Since `+\r\n                `then the city has increased in population by ${numberS.toLocaleString()}. What is the current population of ${city[0].city}?`)\r\n    var prob2 = (`The population of ${city[0].city} has increased by ${numberS.toLocaleString()} since the end of the year ${year}. `+\r\n                `the population before then was ${numberL.toLocaleString()}. What is the new population of ${city[0].city}?`)\r\n    var prob3 = (`Since the beginning of the year ${year} the population of ${city[0].city} has increased by ${numberS.toLocaleString()}. `+\r\n                `If the population started off ${year} at ${numberL.toLocaleString()}, how much is the current population?`)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole5 = (userSelection) => { //population\r\n    // var name = nameList[randWhole(0, nameList.length-1)]\r\n    var city = shuffleArray(cityList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), city[1].pop, city[0].pop];\r\n    if (userSelection === \"2\") {\r\n        [numberS, numberM, numberL] = [randWhole(100000, 300000), randWhole(300000, 500000), city[0].pop];\r\n    \r\n        }\r\n    var year = randWhole(2015,2019)\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (`${city[0].city} had a population of ${numberL.toLocaleString()} as of the end of the year ${year}. Since `+\r\n                `then the city has decreased in population by ${numberS.toLocaleString()}. What is the current population of ${city[0].city}?`)\r\n    var prob2 = (`The population of ${city[0].city} has decreased by ${numberS.toLocaleString()} since the end of the year ${year}. `+\r\n                `the population before then was ${numberL.toLocaleString()}. What is the new population of ${city[0].city}`)\r\n    var prob3 = (`Since the beginning of the year ${year} the population of ${city[0].city} has decreased by ${numberS.toLocaleString()}. `+\r\n                `If the population started off ${year} at ${numberL.toLocaleString()}, how much is the current population?`)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\nexport const subWhole6 = (userSelection) => { //space distances, elves army of goblins invades, \r\n    // var name = nameList[randWhole(0, nameList.length-1)]\r\n    var city = shuffleArray(cityList)\r\n    var [numberS, numberM, numberL] = [randWhole(10000, 30000), city[1].pop, city[0].pop];\r\n    if (userSelection === \"2\") {\r\n        [numberS, numberM, numberL] = [randWhole(100000, 300000), city[1].pop, city[0].pop];\r\n    \r\n        }\r\n    var year = randWhole(2015,2019)\r\n    var answer = (numberL-numberS)\r\n    var wrong= wrongOptions(answer, 'sub', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = (``)\r\n    var prob2 = (``)\r\n    var prob3 = (``)\r\n    var randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem        \r\n}\r\n\r\n//Problem ideas: space distance? elves army of goblins, factory producing products, movies making money, tourists that visit a city/country, city = smaller numbers, country = larger. \r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const addDec = (userSelection) => { //sport\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    var [numberS, numberL] = [(Math.random()*49999+10011).toFixed(1),  (Math.random()*999999+500011).toFixed(2)];\r\n    // var f = 'format'\r\n    var answer= (numberL + numberS);\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var wrong = gen.shuffleArray(gen.wrongOptions(answer, 'add', numberL, numberS))\r\n    // var tempAC = [answer, wrong[0], wrong[1], wrong[2]]\r\n    // var AC = gen.shuffleArray(tempAC)\r\n    var problem = { text: (`${name[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${name[1]} `+\r\n                `played ${sport} for${(numberL).toString()} minutes last year. How many minutes did `+\r\n                `${name[0]} and ${name[1]} play altogether?`),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n\r\n    // console.log(problem)\r\n    return problem\r\n    \r\n}\r\n\r\nexport const subDec = (userSelection) => { //sport\r\n    var name = nameList[randWhole(0, nameList.length-1)]\r\n    var sport = sportList[randWhole(0, sportList.length-1)]\r\n    // var f = 'format'\r\n    var [numberS, numberL] = [(Math.random()*49999+10011).toFixed(1),  (Math.random()*999999+500011).toFixed(2)];\r\n\r\n    var answer= (numberL - numberS);\r\n    var wrong = shuffleArray(wrongOptions(answer, 'sub', numberL, numberS))\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var sub1 = (`${name[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${name[1]} `+\r\n    `played ${sport} for ${(numberL).toString()} minutes last month. How many more minutes did `+\r\n     `${name[1]} play than ${name[0]}?`)\r\n    var sub2 = (`${name[0]} played ${sport} for ${(numberS).toString()} minutes last year. ${name[1]} `+\r\n     `played ${sport} for ${(numberL).toString()} minutes last month. What is the difference between `+\r\n    `the number of minutes ${name[1]} played and the number of minutes ${name[0]} played?`)\r\n\r\n    var randSub = [sub1, sub2][Math.floor(Math.random())]\r\n    var problem = {text: randSub,\r\n                answerChoices: AC,\r\n                correctAnswer: answer}\r\n    return problem\r\n}\r\nexport const randAddWhole = (userSelection) => {\r\n    var probArray = [addWhole, addWhole2, addWhole3, addWhole4, addWhole5]\r\n    if (userSelection.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (userSelection.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}\r\nexport const randSubWhole = (userSelection) => {\r\n    var probArray = [subWhole, subWhole2, subWhole3, subWhole4, subWhole5, subWhole6]\r\n    if (userSelection.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (userSelection.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}","C:\\projects\\worksheet-creator\\src\\app-files\\general.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156"],"\r\nimport {\r\n  Page,\r\n  Text,\r\n  View,\r\n  Image,\r\n  Document,\r\n  StyleSheet,\r\n  Font,\r\n  // PDFViewer,\r\n  // ReactPDF,\r\n  PDFDownloadLink,\r\n} from \"@react-pdf/renderer\";\r\n\r\n\r\nexport var sportList = ['football', 'soccer', 'baseball']\r\nexport var boyList = ['Greg', 'David', 'Jason', 'Samuel', 'Alex', 'Trevor','Daniel', 'Javier', 'Chris', 'Brett', 'Henry', 'Kenneth']\r\nexport var girlList = ['Melissa', 'Danielle', 'Zoey', 'Denah', 'Isabella', 'Valentina', 'Addison', 'Emmy', 'Aveeyah', 'Jenna']\r\nexport var nameList = boyList.concat(girlList)\r\nexport var candyList = [\"sour patch kids\",\"skittles\",\"m&ms\", \"Mike & Ikes\", \"Starbursts\"]\r\nexport var forestAnimal = [\"rabbit\", \"frog\", \"moth\", \"snake\", \"spider\", \"monkey\", \"bird\"]\r\nexport var lakeAnimal = [\"frog\", \"duck\", \"otter\"]\r\nexport var desertAnimal = [\"lion\", \"zebra\", \"giraffe\",\"antelope\", \"meerkat\", \"warthog\", \"hyena\"]\r\nexport var disasterList = [\"zombie apocalypse\", \"big hurricane\", \"dinosaur invasion\"]\r\n\r\nexport var storeList = [\"Kroger\", \"Mega Market\", \"Walmart\", \"Target\", \"Fiesta\", \"Whole Foods Market\"]\r\n\r\nexport var groupList = [\"package\", \"container\" ]\r\nexport var itemList = [\"Pokemon Cards\", \"baseball cards\", \"pencils\", \"erasers\", \"books\", \"stickers\", \"pens\", \"jelly beans\", \"candies\", \"M&Ms\", \"cookies\", \"small toys\",]\r\nexport var packageItemList = [\"Cheetos\", \"crackers\", \"Skittles\", \"Takis\", \"Starbursts\", \"M&Ms\", \"Tortilla Chips\", \"Fruit Snacks\", \"Gummy Bears\", \"Sour Patch Kids\", \"Doritos\", \"Pasta\"]\r\nexport var itemList2060 = [\"game\", \"blanket\", \"game controller\"]\r\nexport var itemList1020 = [\"toy\", 'book', 'movie', 'candle', 'lego set']\r\nexport var foodList = [\"soup\", \"pizza\", \"pretzel\", \"cookie\", \"potato\", \"cracker\", \"banana\"]\r\nexport var disasterFoodList = ['cookie', 'cracker','oatmeal','soup', 'candy', 'frozen dinner','mac & cheese']\r\nexport var teacherList = [\"Ms. Vallery\", \"Mrs. Estes\", \"Mrs. Keefe\", \"Mrs. Mendoza\", \"Mrs. Orr\", \" Mrs. Guerra\", \"Mrs. Hatter\", \"Mrs. Rios\", \"Mrs. Quinones\", \"Mrs. Serrano\", \"Mrs. DePavia\"]\r\nexport var themeList = [\"flower\", \"space\",\"superhero\",\"neon\",\"jungle\",\"glitter\"]\r\n\r\nexport const roundDec = (num, pv) => {\r\n  if (Number.isInteger(num)) {\r\n    return num\r\n  } else {\r\n    var roundNum = Math.round((num + Number.EPSILON) * Math.pow(10, pv)) / Math.pow(10, pv)\r\n    return Number(roundNum)\r\n\r\n  }\r\n\r\n}\r\nexport function randWhole(x, y, nozerone){\r\n  var num =  Math.floor(Math.random() * (y - x + 1) + x)\r\n  if (nozerone === 'true'){\r\n    if (num !== 0 && num!== 1){\r\n      return num\r\n    }else {\r\n        return randWhole(x, y, 'true')\r\n    }\r\n  } else {\r\n    return num\r\n  }\r\n\r\n}\r\nexport const randDec = (x, y, place) => {\r\n  var num = (Math.random()*(y-x) + x).toFixed(place)\r\n  if (Number.isInteger(num)) {\r\n    return randDec(x,y,place)\r\n  } else {\r\n    return num\r\n  }\r\n  return \r\n}\r\nexport const cap = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\nexport var cityList = [{city:'San Francisco', pop:randWhole(850000,900000)},\r\n                    {city:'Houston', pop:randWhole(2000000,2500000)},\r\n                    {city:'Austin', pop:randWhole(900000,1000000)},\r\n                    {city:'San Antonio', pop:randWhole(1400000,1500000)},\r\n                    {city:'Los Angeles', pop:randWhole(3700000,4300000)}]\r\n\r\n\r\nexport const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return (array)\r\n  }\r\nexport const wrongOptions = (answer, op, numL, numS) => {\r\n    var wrong = []\r\n    wrong.push(answer+1, answer*10, answer+10) // need more\r\n    var stringNumS = (numS).toString()\r\n    if (op === 'multiply') {\r\n      if (numS > 9) { //no placeholder\r\n        var noPlaceHolder = Math.floor(Number(stringNumS[0])*numL+ Number(stringNumS[1])*numL)\r\n        console.log('correct:'+ answer+'noplaceholder:'+noPlaceHolder)\r\n        wrong.push(noPlaceHolder)\r\n      } else {\r\n      }\r\n      wrong.push(answer+100)\r\n    }else if (op === 'add') {\r\n      console.log(\"If op === add\")\r\n      wrong.push(answer+2, numL+numS+numL, numL-numS, answer-10, answer-1, answer-2, answer+10)\r\n    }else if (op === 'sub') {\r\n      wrong.push(answer+2, answer-10, answer-1, answer-2, answer+10, numL+numS)\r\n    }else if (op === 'divide') {\r\n      wrong.push(answer-1, answer+10, numL+numS, numL*numS)\r\n    } else if (op === 'decimal') {\r\n      wrong.push(roundDec(answer*100, 3), roundDec(answer/10, 3), roundDec(answer -0.2, 3)) //(numL+numS).toFixed(2), (answer +100).toFixed(1), (answer+0.1).toFixed(2), (answer +0.03).toFixed(2),\r\n    }else {\r\n      console.log(\"op=== not triggering\")\r\n      wrong.push(answer +3, answer-1)\r\n    }\r\n    var wrongChoice = shuffleArray(wrong)\r\n    return ([wrongChoice[0], wrongChoice[1], wrongChoice[2]])\r\n  }\r\n  const tstyles = StyleSheet.create({\r\n    table: {\r\n        display: \"table\",\r\n         width: \"200px\",\r\n         textAlign:'center',\r\n    },\r\n    row: {\r\n        flexDirection: \"row\",\r\n    },\r\n    cell: {\r\n        // padding: '3px'\r\n      },\r\n    header: {\r\n      backgroundColor: 'grey'\r\n    }\r\n  });\r\n  export const answerChoicesKey = (answer, wrong, wrong2, wrong3, f) => {\r\n    var answers = [answer, wrong, wrong2, wrong3]\r\n    answers = shuffleArray(answers)\r\n    if (f === '$') {\r\n      var [$, unit] = ['$', '']\r\n    } else if (f === undefined) {\r\n      var [$, unit] = ['', '']\r\n    } else {\r\n      var [$, unit] = ['', ' '+f]\r\n    } \r\n    if (typeof answer === 'string') {\r\n      var A = (' A ' + answers[0])\r\n      var B = (' B ' + answers[1])\r\n      var C = (' C ' + answers[2])\r\n      var D = (' D ' + answers[3])\r\n      var E = ''\r\n      if (answers[0] === answer) {\r\n        correctAnswer = A\r\n    } else if (answers[1] === answer) {\r\n      correctAnswer = B\r\n    } else if (answers[2] === answer) {\r\n      correctAnswer = C\r\n    } else {\r\n      correctAnswer = D\r\n    }\r\n    } else if (typeof answer === 'number'){\r\n      var A = (' A ' + $ + answers[0].toLocaleString()+ unit)\r\n      var B = (' B ' + $ + answers[1].toLocaleString()+ unit)\r\n      var C = (' C ' + $ + answers[2].toLocaleString()+ unit)\r\n      var D = (' D ' + $ + answers[3].toLocaleString()+ unit)\r\n      var E = ''\r\n      if (answers[0] === answer) {\r\n        correctAnswer = A\r\n    } else if (answers[1] === answer) {\r\n      correctAnswer = B\r\n    } else if (answers[2] === answer) {\r\n      correctAnswer = C\r\n    } else {\r\n      correctAnswer = D\r\n    }\r\n    } else { //answerchoices are tables\r\n      // var A = <View><Text> A </Text> {answers[0]}</View>\r\n      // var B = <View><Text> A </Text> {answers[0]}</View>\r\n      // var C = <View><Text> A </Text> {answers[0]}</View>\r\n      // var D = <View><Text> A </Text> {answers[0]}</View>\r\n\r\n      var A = <View><Text>A</Text>{answers[0]}</View>\r\n      var B = <View><Text>B</Text>{answers[1]}</View>\r\n      var C = <View><Text>C</Text>{answers[2]}</View>\r\n      var D = <View><Text>D</Text>{answers[3]}</View>\r\n      var correctAnswer = ''\r\n      var answerLetter = ''\r\n      if (answers[0] === answer) {\r\n        correctAnswer = <View>{A}</View>\r\n    } else if (answers[1] === answer) {\r\n        correctAnswer = <View>{B}</View>\r\n    } else if (answers[2] === answer) {\r\n      correctAnswer = <View>{C}</View>\r\n    } else {\r\n      correctAnswer = <View>{D}</View>\r\n    }\r\n\r\n    }\r\n\r\n    // console.log('A = ' +answer)\r\n    // console.log('answers[2]'+ answers[2])\r\n\r\n    // console.log(A, B, C, D, E)\r\n    return [A, B, C, D, correctAnswer, answerLetter]\r\n  }\r\n//   export const numberWithCommas = (x) => {\r\n//     return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n// }","C:\\projects\\worksheet-creator\\src\\app-files\\order-of-ops.js",["157","158","159"],"import {randWhole, shuffleArray, answerChoicesKey, randDec, roundDec\r\n    } from './general.js'\r\n\r\nvar simpleQArray = shuffleArray(['What is the value of the expression? \\n',\r\n                  'An expression is shown below, what value is equivalent to the expression?\\n',\r\n                  'Which value is equivalent to the expression below? \\n'])\r\n\r\nconst orderOpsNumbers = (userSelection) => {\r\n\r\n    if (userSelection.specify === 'Whole numbers'){\r\n        if (userSelection.level === '1') {\r\n            var numList = [randWhole(2,5), randWhole(2,5), randWhole(2,9), \r\n                randWhole(2,9),randWhole(6,9),randWhole(6,9)]\r\n\r\n        } else if (userSelection.level === '2') {\r\n            numList = [randWhole(2,9), randWhole(2,9),randWhole(10,20),\r\n                randWhole(10,20),randWhole(21,30),randWhole(21,30)]\r\n\r\n        } else if (userSelection.level === '3') {\r\n            numList = [randWhole(20,50), randWhole(20,50), randWhole(30,70), \r\n                randWhole(30,70), randWhole(51,70), randWhole(51,70)]\r\n        }\r\n\r\n    } else if (userSelection.specify === 'Decimals') {\r\n        var smallDec = [randDec(1,4,1), randDec(1,4,2), randDec(0.01,0.99,2), \r\n                        randDec(0.01,0.9,1), randDec(0.01,0.1,2) ]\r\n        var largeDec = [randDec(10, 20,1), randDec(10,20,2)]\r\n        if (userSelection.level === '1') {\r\n            numList = [smallDec[randWhole(0, smallDec.length-1)], \r\n            smallDec[randWhole(0, smallDec.length-1)], \r\n            randWhole(2,9),randWhole(2,9),randWhole(5,9),randWhole(5,9)]\r\n        } else if (userSelection.level === '2') {\r\n            numList = [smallDec[randWhole(0, smallDec.length-1)], \r\n            smallDec[randWhole(0, smallDec.length-1)], \r\n            randWhole(7,12),randWhole(7,12),randWhole(7,12),randWhole(7,12)]\r\n\r\n        } else if (userSelection.level === '3') {\r\n            numList = [largeDec[randWhole(0, largeDec.length-1)], \r\n            largeDec[randWhole(0, largeDec.length-1)],\r\n            randWhole(10,19), randWhole(10,19),randWhole(21,30),randWhole(21,30)]\r\n        }\r\n\r\n    } else if (userSelection.specify === 'Integers'){\r\n        if (userSelection.level === '1') {\r\n            numList = [randWhole(-9,-2), randWhole(-9,-2), randWhole(-9, 9), randWhole(-9,9), randWhole(2,10),randWhole(2,10)]\r\n\r\n        } else if (userSelection.level === '2') {\r\n            numList = [randWhole(-12,-2), randWhole(-12,-2), randWhole(-12, 12), randWhole(-9,12), randWhole(5,15),randWhole(5,15)]\r\n \r\n        } else if (userSelection.level === '3') {\r\n            numList = [randWhole(-15,-2), randWhole(-15,-2), randWhole(-15, 15), randWhole(-15,15), randWhole(5,20),randWhole(5,20)]\r\n\r\n        }\r\n    } else {\r\n        numList = [5, 5, 5, 5, 5, 5]\r\n    }\r\n    console.log(numList)\r\n  \r\n\r\n\r\nreturn numList\r\n}                  \r\nexport const orderOps = (userSelection) => { //oooA\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberS] = [numList[4], numList[5], numList[2]]\r\n    var [numberM, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberL2*numberS\r\n    if (userSelection.steps === \"3\") {\r\n        var OoOA = `${numberL} + (${dividend} ÷ ${numberS} - ${numberS2})` //10 + (40÷8 - 2)\r\n        var OoOB = `(${dividend} ÷ ${numberS} - ${numberS2}) + ${numberL} ` //(40÷8 - 9) +10\r\n        var OoOC = `${numberL} + ${dividend} ÷ ${numberS} - ${numberS2}` //10 + 40÷8 - 2\r\n        var answer = numberL+(dividend/numberS-numberS2)\r\n        var wrong = [Math.floor(((numberL+dividend)/numberS)-numberS2), answer-1,\r\n                     answer+2, answer+1]\r\n\r\n      } else if (userSelection.steps === '4') {\r\n        OoOA = `${numberL} + (${dividend} ÷ ${numberS} - ${numberS2}) × ${numberM2}` //10 + (40÷8 - 9) × 10\r\n        OoOB = `${numberL} + ${numberM2}(${dividend} ÷ ${numberS} - ${numberS2}) `   //10 + 10(40÷8 - 9)\r\n        OoOC = `${numberM2}(${dividend} ÷ ${numberS} - ${numberS2}) + ${numberL} `  //10(40÷8 - 9)+10\r\n        answer = numberL+(dividend/numberS-numberS2)*numberM2\r\n        wrong = [Math.abs(numberL+dividend/numberS-numberS2*numberM2), answer-1,answer+1,       \r\n                (Math.floor((numberL+dividend)/numberS)-numberS2)*numberM2, answer+5,\r\n                   ]\r\n\r\n      } else  { //no selection/5\r\n        OoOA = `${numberM2} + (${dividend} ÷ ${numberS} - ${numberS2}) × ${numberL} - ${numberM}` //10 + (40÷8-9) x 10 - 2 \r\n        OoOB = `${numberM2} + ${numberL}(${dividend} ÷ ${numberS} - ${numberS2}) - ${numberM}` //10 + 10(40÷8-9) - 2 \r\n        OoOC = `${numberL}(${dividend} ÷ ${numberS} - ${numberS2}) - ${numberM} + ${numberM2}` //10(40÷8-9) - 2 + 10\r\n        answer = numberM2+((dividend/numberS-numberS2)*numberL)-numberM\r\n        wrong = [Math.abs((numberL+dividend)/numberS-numberS2*numberL-numberM), answer+1, answer-1,       \r\n            (Math.floor(((numberM2+numberL)*dividend)/numberS)-numberS2-numberM),\r\n            (((numberM2+dividend)/numberS)-numberS2)*numberL-numberM,\r\n            Math.abs((numberM2+dividend/numberS-numberS2)*numberL-numberM+1)]\r\n\r\n    }\r\n    wrong=shuffleArray(wrong)\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps2 = (userSelection) => { //oooB\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = roundDec(numberM2*numberS2, 2)\r\n    if (userSelection.steps === \"3\") { \r\n        var OoOA = `${numberM} × (${numberL}-${dividend} ÷ ${numberM2})` // 8 x (9- 40/5)\r\n        var OoOB = `(${numberL} - ${dividend} ÷ ${numberM2}) × ${numberM}` //(9-40/5)x8\r\n        var OoOC = `${numberM}(${numberL}-${dividend} ÷ ${numberM2})` //8(9-40/5)\r\n        var answer = numberM*(numberL-(dividend/numberM2))\r\n        var wrong = [numberM*numberL-dividend/numberM2, \r\n                    Math.abs(Math.floor(numberM*((numberL-dividend)/numberM2))), answer-1, answer+1,\r\n        Math.floor(((numberM*numberL+1)-dividend)/numberM2)]\r\n        if (userSelection.specify === 'Decimals') {\r\n            wrong.push(Math.abs(numberM*((numberL-dividend)/numberM2), ((numberM*numberL+1)-dividend)/numberM2))\r\n        }\r\n\r\n      } else if (userSelection.steps === '4') { \r\n        OoOA = `${numberM}(${numberL}-${dividend} ÷ ${numberM2}) + ${numberL2}` //8(9 - 40/5) + 9\r\n        OoOB = `(${numberL} - ${dividend} ÷ ${numberM2}) × ${numberM} + ${numberL2}` // (9-40/5)x8 +9\r\n        OoOC = `${numberL2} +  ${numberM}(${numberL}-${dividend} ÷ ${numberM2})` //9+ 8(9-40/5)\r\n        answer = numberM*(numberL-(dividend/numberM2))+numberL2\r\n        wrong = [numberM*numberL-dividend/numberM2+numberL2, answer-1,\r\n                (numberL2+numberM)*numberL-(dividend/numberM2),\r\n                Math.floor((((numberM*numberL)-dividend)/numberM2)+numberL2)]\r\n\r\n      } else { \r\n        OoOA = `${numberM} (${numberS} × ${numberL} - ${dividend} ÷ ${numberM2}) + ${numberL2}` //8 (5 x 9 - 40/5) + 9\r\n        OoOB = `${numberM} (${numberL} × ${numberS} - ${dividend} ÷ ${numberM2}) + ${numberL2}` //8 (9 x 5- 40/5) +9\r\n        OoOC = `${numberL2} + ${numberM} (${numberS} × ${numberL} - ${dividend} ÷ ${numberM2})` //9 + 8( 5 x 9 - 40/5)\r\n\r\n        answer = numberM*(numberS*numberL-(dividend/numberM2))+numberL2\r\n        wrong = [numberM*numberS*numberL-numberS2*numberM2/numberM2+numberL2, \r\n                numberM*numberS*(numberL-(numberS2*numberM2/numberM2)+numberL2),\r\n                Math.floor((((numberM*numberS*numberL)-numberS2)*numberM2))+numberL2,\r\n                answer-1]\r\n    }        \r\n    wrong= shuffleArray(wrong)\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps3 = (userSelection) => { //oooC\r\n    \r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberM2*numberS2\r\n    if (userSelection.steps === \"3\") { \r\n        var OoOA = `(${numberL} - ${numberS2}) + (${numberL2} + ${numberM2})` //(9-2)+(8+5)\r\n        var OoOB = `(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2})` //(8+5)+(9-2)\r\n        var OoOC = `${numberM2} + ${numberL2} + (${numberL} - ${numberS2})` //5+8+(9-2)\r\n        var answer = (numberL-numberS2)+(numberL2+numberM2)\r\n        var wrong = [numberL-numberS2+numberL2-numberM2, \r\n            answer+3, answer-1,\r\n            (numberL+numberS2)+numberL2+numberM2\r\n        ]\r\n\r\n      } else if (userSelection.steps === '4') {  \r\n        OoOA = `(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})` // (9-4) + 5(8+2)\r\n        OoOB = `${numberM}(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2})` //5(8+2) + (9-4) \r\n        OoOC = `(${numberM2} + ${numberL2}) × ${numberM} + (${numberL} - ${numberS2})` //(8+2)x5 + (9-4)\r\n        answer = (numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberL-numberS2+numberM*numberL2+numberM2, answer+1,answer-1,\r\n            (numberL-numberS2+numberM)*(numberL2+numberM2),\r\n            ((numberL-numberS2+numberM)*numberL2)+numberM2\r\n        ]\r\n      } else  { \r\n        OoOA = `${numberS}(${numberL} - ${numberS2}) + ${numberM}(${numberL2} + ${numberM2})` //2(9-4) + 5(8+2)\r\n        OoOB = `${numberM}(${numberL2} + ${numberM2}) + ${numberS}(${numberL} - ${numberS2}) ` //5(8+2) + 2(9-4)\r\n        OoOC = `${numberM}(${numberL2} + ${numberM2}) + (${numberL} - ${numberS2}) × ${numberS} ` //5(8+2) + (9-4) x 2\r\n        answer = numberS*(numberL-numberS2)+numberM*(numberL2+numberM2)\r\n        wrong = [numberS*numberL-numberS2+numberM*numberL2+numberM2, \r\n            (Math.floor(((numberL+numberS)*numberL2)/numberS)-numberS2)*numberM2,\r\n            (((numberS*numberL-numberS2)+numberM)*numberL2)+numberM2, answer-1\r\n        ]\r\n        if (userSelection.specify==='Integers'){\r\n            wrong.push(answer*-1, \r\n                numberS*(numberL-numberS2*-1)+numberM*(numberL2+numberM2),\r\n                numberS*-1*(numberL-numberS2*-1)+numberM*(numberL2+numberM2),\r\n                )\r\n        } else if (userSelection.specify==='Decimals') {\r\n            wrong.push(answer/10, answer*10, answer+0.1, answer+0.01,\r\n                numberS*(numberL-numberS2/10)+numberM*(numberL2+numberM2),\r\n                )\r\n        }\r\n    }        \r\n    wrong = shuffleArray(wrong)\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps4 = (userSelection) => { //oooD\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var dividend = numberM2*numberS2\r\n    if (userSelection.steps === \"3\") { \r\n        var OoOA = `[${numberL2} + (${numberL} - ${numberS})] × ${numberM2}` //[40+(30-10)]x20\r\n        var OoOB = `${numberM2}[${numberL2} + (${numberL} - ${numberS})]` // 20[40+(30-10)]\r\n        var OoOC = `${numberM2}(${numberL} - ${numberS} + ${numberL2})` // 20[30-10+40]\r\n        var answer = (numberL2+(numberL-numberS))*numberM2\r\n        var wrong = [(numberL2+(numberL-numberS))*(numberM2+1), \r\n                    Math.abs(numberL2*numberL-numberS*numberM2), \r\n                    numberL2*numberM2+Math.abs(numberL-numberS),   \r\n                    (numberL2+numberL-numberS+1)*numberM2, answer+1,answer-1]\r\n\r\n      } else if (userSelection.steps === '4') { \r\n        OoOA = `[${numberL2} + (${numberS2} × ${numberL} - ${numberS})] × ${numberM2}` // [100+(8x40-10)]x40\r\n        OoOB = `${numberM2}[${numberL2} + (${numberS2} × ${numberL} - ${numberS})]` // 40[100+(8x40-10)]\r\n        OoOC = `${numberM2}[(${numberS2} × ${numberL} - ${numberS}) + ${numberL2}]` //40[(8x40-10)+100]\r\n        answer = (numberL2+(numberS2*numberL-numberS))*numberM2\r\n        wrong = [(numberL2+(numberS2*numberL-numberS))*eval(numberM2+1), \r\n                (numberL2+numberS2)*numberL-numberS,\r\n                 numberL2+Math.abs(numberS2*numberL-numberS*numberM2),   \r\n                 (((numberL2+numberS2)*numberL)-numberS)*numberM2, answer+1,answer-1]\r\n      } else  { //\r\n        OoOA = `${numberM2}[${numberL2} + (${numberM} + ${numberS2} × ${numberL} - ${numberS})]` // 40[100+(30+8x40-10)]\r\n        OoOB = `${numberM2}[${numberL2} + (${numberS2} × ${numberL} - ${numberS} + ${numberM})]` // 40[100+(8x40-10+30)]\r\n        OoOC = `[${numberL2} + (${numberM} + ${numberS2} × ${numberL} - ${numberS})] × ${numberM2} ` // [100+(30+8x40-10)] x 40\r\n        answer = (numberL2+(numberM+numberS2*numberL-numberS))*numberM2\r\n        wrong = [(numberL2+(numberM+numberS2*numberL-numberS))*numberM2+1, \r\n                (Math.floor(numberL2+numberM+numberS2)*numberL-numberS),\r\n                 Math.floor(numberL2+numberM+Math.abs(numberS2*numberL-numberS*numberM2)),   \r\n                 Math.floor((((numberL2+numberS2+numberM)*numberL)-numberS)*numberM2),\r\n                answer-1, answer+1] \r\n    }        \r\n    wrong = shuffleArray(wrong)\r\n\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const orderOps5 = (userSelection) => { //oooE\r\n    console.log(userSelection)\r\n    var randQuest = simpleQArray[randWhole(simpleQArray.length, 0)]\r\n    var numList = orderOpsNumbers(userSelection) \r\n    var [numberL, numberL2, numberM] = [numList[4], numList[5], numList[2]]\r\n    var [numberS, numberS2, numberM2] = [numList[0], numList[1], numList[3]]\r\n    var numberM2 = numberM2+numberS2\r\n    if (userSelection.steps === \"3\") { \r\n        var OoOA = `${numberL2}[${numberL} + (${numberM2} - ${numberS2})]` //5[9+(7-2)]\r\n        var OoOB = `${numberL2}[(${numberM2} - ${numberS2}) + ${numberL}]` //5[(7-2)+9]\r\n        var OoOC = `[${numberL} + (${numberM2} - ${numberS2})] × ${numberL2}` //[9+(7-2)]x5\r\n        var answer = numberL2*(numberL+(numberM2-numberS2))\r\n        var wrong = [numberL2+(numberL+(numberM2+numberM2+numberM2-numberS2)), \r\n                    answer+1, answer-1,\r\n                    numberL2*numberL + numberM2, \r\n                    (numberL2*numberL)*numberM2-numberS2]\r\n\r\n      } else if (userSelection.steps === '4') { \r\n        OoOA = `${numberL2}[${numberL} + ${numberM}(${numberM2} - ${numberS2})]` // 5[9+6(7-2)]\r\n        OoOB = `${numberL2}[${numberM}(${numberM2} - ${numberS2}) + ${numberL}]` // 5[6(7-2)+9]\r\n        OoOC = `${numberL2} × [${numberL} + ${numberM}(${numberM2} - ${numberS2})]` //5x[9+6(7-2)]\r\n        answer = numberL2*(numberL+numberM*(numberM2-numberS2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2-numberS2)), answer+1,answer-1,\r\n                numberL2*(numberL+numberM)*(numberM2-numberS2),\r\n                numberL2*numberL + (numberM*numberM2-numberS2), \r\n                ((numberL2*numberL+numberM)*numberM2)-numberS2]\r\n      } else { \r\n        OoOA = `${numberL2}[${numberL} + ${numberM}(${numberM2} × ${numberS} - ${numberS2})]` // 5[9+6(7x3-2)]\r\n        OoOB = `${numberL2}[${numberM}(${numberM2} × ${numberS} - ${numberS2}) + ${numberL}]` //5[6(7x3-2)+9]\r\n        OoOC = `[${numberM}(${numberL} + ${numberS} × ${numberM2} - ${numberS2})] × ${numberL}` //[9+6(3x7-2)]x5\r\n        answer = numberL2*(numberL+numberM*(numberM2*numberS-numberS2))\r\n        wrong = [numberL2+(numberL+numberM+(numberM2*numberS-numberS2)), answer+1,answer-1,\r\n                numberL2*(numberL+numberM)*(numberM2*numberS-numberS2),\r\n                numberL2*numberL + (numberM*numberM2*numberS-numberS2), \r\n                ((numberL2*numberL+numberM)*numberM2*numberS)-numberS2]\r\n    }        \r\n    wrong = shuffleArray(wrong)\r\n\r\n    var randProb = [OoOA, OoOB, OoOC][randWhole(0,2)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text: randQuest + randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nexport const randOrderOps = (userSelection) => {\r\n    var probArray = [orderOps, orderOps2, orderOps3, orderOps4, orderOps5]\r\n    if (userSelection.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (userSelection.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(userSelection)\r\n}\r\n//ideas: \r\n//make order of op problems the answer choices and have them select the one that is or is not the same as a given answer. \r\n\r\n// give two problems asking if the given problems have the same answer. (make it 50/50)\r\n\r\n//make it show student solving and they identify what step was messed up.\r\n\r\n","C:\\projects\\worksheet-creator\\src\\create-worksheet.js",["160","161","162","163","164","165","166","167"],"import './App.css';\r\nimport * as as from \"./app-files/add-sub\";\r\nimport * as o from \"./app-files/order-of-ops\";\r\nimport * as alg from './app-files/algorithms';\r\nimport * as tb from './app-files/tables';\r\nimport * as asf from './app-files/add-sub-fract';\r\nimport * as mw from './app-files/multiply';\r\nimport * as d from './app-files/divide';\r\nimport {randWhole, shuffleArray} from './app-files/general';\r\nimport {\r\n  Page,\r\n  Text,\r\n  View,\r\n  Image,\r\n  Document,\r\n  StyleSheet,\r\n  Font,\r\n\r\n  // PDFViewer,\r\n  // ReactPDF,\r\n  PDFDownloadLink,\r\n} from \"@react-pdf/renderer\";\r\n// import PropTypes from 'prop-types';\r\nimport React, { \r\n  // Component\r\n } from 'react';\r\n\r\n// import cw from './App.js'\r\n\r\nFont.registerHyphenationCallback(word => [word]); //makes words not break/hyphenate\r\nconst styles = StyleSheet.create({\r\n  question: {\r\n    marginBottom:10,\r\n    fontSize: 12,\r\n    textAlign: 'justify',\r\n    // fontFamily: 'arial'\r\n  },\r\n  questionAnswer: {\r\n    flexDirection:'row',\r\n    flexGrow: 1,\r\n    marginTop: 10,\r\n    marginRight:40,\r\n    fontSize: 12,\r\n    marginLeft:40,\r\n    textAlign: 'justify',\r\n  },\r\n  column: {\r\n    flexDirection:'row',\r\n    marginTop: 10,\r\n    marginRight:20,\r\n    fontSize:12,\r\n    textAlign:'justify',\r\n    paddingRight:50,\r\n    paddingBottom:10,\r\n    flexGrow: 1,\r\n  },\r\n  columnQuestion: {\r\n    width: 230,\r\n    marginRight:20,\r\n  },\r\n  num: {\r\n    width:25,\r\n    marginLeft:10,\r\n  },\r\n  answerKey: {\r\n    flexDirection:'row',\r\n    marginTop: 10,\r\n  },\r\n  answerLetter: {\r\n    flexDirection:'row',\r\n    padding: 10,\r\n  }\r\n});\r\nexport const handleCreateWorksheet = (userSelection) => { \r\n//creates the worksheet using react-pdf based on userSelection (array of objects: {level:, specify:,order:, docStyle:, quantity:,}) \r\n  var [n,i,x] = [0,,];\r\n  var [answerKey, questionAnswerList, question, conceptArray] = [[],[],'','']\r\n\r\n  const createQuestionAnswerList = (array, userSelection, randQuest) => { \r\n    var x\r\n    for (x = 0; x < userSelection.quantity; x++) {\r\n      // question = array[randWhole(0, array.length-1)]({level:userSelection.level, specify:userSelection.specify})\r\n      question = randQuest(userSelection)\r\n      console.log(question)\r\n      console.log(randQuest(userSelection))\r\n      questionAnswerList.push({\r\n        question:<View ><Text style={styles.question}>{question.text} </Text> \r\n                    <Text>{question.answerChoices[0]} </Text> \r\n                    <Text>{question.answerChoices[1]} </Text> \r\n                    <Text>{question.answerChoices[2]} </Text> \r\n                    <Text>{question.answerChoices[3]} </Text>\r\n                </View>,\r\n        answer: <Text>{question.answerChoices[4]}</Text>\r\n});\r\n};\r\n    }\r\nconst createQuestionAnswerListTable = (array, userSelection, randQuest) => {\r\n  for (var x = 0; x <userSelection.quantity; x++) {\r\n    question = randQuest(userSelection)\r\n    if (typeof question.answerChoices[0] === 'string' ){\r\n      questionAnswerList.push({\r\n        question: <View>{question.text}<Text>{question.answerChoices[0]}</Text>\r\n                                       <Text>{question.answerChoices[1]}</Text>\r\n                                       <Text>{question.answerChoices[2]}</Text>\r\n                                       <Text>{question.answerChoices[3]}</Text>\r\n                  </View>,\r\n        answer: <Text>{question.answerChoices[4]}</Text>\r\n      })\r\n    }else {\r\n      if (userSelection.docStyle) { //columns & Table answer choices\r\n        questionAnswerList.push({\r\n          question: <View><Text>{question.text}</Text> \r\n                    <View style={styles.answerLetter}>{question.answerChoices[0]}</View>\r\n                    <View style={styles.answerLetter}>{question.answerChoices[1]}</View>\r\n                    <View style={styles.answerLetter}>{question.answerChoices[2]}</View>\r\n                    <View style={styles.answerLetter}>{question.answerChoices[3]}</View>\r\n                    \r\n                    </View>,\r\n          answer: question.answerChoices[4]\r\n        })\r\n      }else{\r\n        questionAnswerList.push({\r\n          question: <View><Text>{question.text}</Text> \r\n                    <View style={styles.answerLetter}>{question.answerChoices[0]}\r\n                    {question.answerChoices[2]}</View>\r\n                    <View style={styles.answerLetter}>{question.answerChoices[1]}\r\n                    {question.answerChoices[3]}</View>\r\n                    \r\n                    </View>,\r\n          answer: question.answerChoices[4]\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\nconst createQAListTableAnswers = (array, userSelection, randQuest) => {\r\n  var x \r\n  console.log(userSelection)\r\n  for (x = 0; x <userSelection.quantity; x++) {\r\n    question = randQuest(userSelection)\r\n    questionAnswerList.push({\r\n      question: <View>{question.text} {question.answerChoices[0]}{question.answerChoices[1]}{question.answerChoices[2]}{question.answerChoices[3]}</View>,\r\n      answer: question.answerChoices[4]\r\n    })\r\n  }\r\n}\r\n\r\n\r\n  for (i = 0; i < userSelection.length; i++) {\r\n    //loops through userSelection and based on the the concept selected by the user, \r\n    //  adds a random question from the conceptArray using createQuestionAnswerList function.\r\n    if (userSelection[i].concept === \"Adding Whole Numbers\") {\r\n      conceptArray = [as.addWhole, as.addWhole2, as.addWhole3, as.addWhole4, as.addWhole5]\r\n      createQuestionAnswerList(conceptArray, userSelection[i], as.randAddWhole)\r\n\r\n      }else if (userSelection[i].concept === \"Subtracting Whole Numbers\") {\r\n        conceptArray = [as.subWhole, as.subWhole2, as.subWhole3, as.subWhole4, as.subWhole5]\r\n        createQuestionAnswerList(conceptArray, userSelection[i], as.randSubWhole)\r\n\r\n      }else if (userSelection[i].concept === \"Multiplying Whole Numbers\") {\r\n        conceptArray = [mw.multWhole, mw.multWhole2, mw.multWhole3]\r\n        \r\n        createQuestionAnswerList(conceptArray, userSelection[i], mw.randMultWhole)\r\n\r\n      }else if (userSelection[i].concept === \"Dividing Whole Numbers\") {\r\n        // conceptArray = [d.divWhole, d.divWhole2, d.divWhole3, d.divWhole4]\r\n        createQuestionAnswerList(conceptArray, userSelection[i], d.randDivWhole)\r\n\r\n      }else if (userSelection[i].concept === \"Order of Operations\") {\r\n        conceptArray = [o.orderOps]\r\n        createQuestionAnswerList(conceptArray, userSelection[i], o.randOrderOps)\r\n\r\n      }else if (userSelection[i].concept === \"Dividing Decimals Algorithm\") {\r\n        conceptArray = [alg.divideDec]\r\n        createQuestionAnswerList(conceptArray, userSelection[i], alg.randDivDec)\r\n\r\n      }else if (userSelection[i].concept === \"Multiplying Decimals Algorithm\") {\r\n        conceptArray = [alg.multDec, alg.multDec2];\r\n        createQuestionAnswerList(conceptArray, userSelection[i], alg.randMultDec)\r\n\r\n      }else if (userSelection[i].concept === \"Adding Decimals Algorithm\") {\r\n        conceptArray = [alg.addDecWhole, alg.addDecPV]\r\n        createQuestionAnswerList(conceptArray, userSelection[i], alg.randAddDec)\r\n\r\n      }else if (userSelection[i].concept === \"Subtracting Decimals Algorithm\") {\r\n        conceptArray = [alg.subDecPV, alg.subDecWhole]\r\n          createQuestionAnswerList(conceptArray, userSelection[i], alg.randSubDec)\r\n      }else if (userSelection[i].concept === \"Adding Fractions\") {\r\n        conceptArray = [asf.addFract] \r\n        createQuestionAnswerListTable(conceptArray, userSelection[i], asf.addFract)\r\n      }else if (userSelection[i].concept === \"Dividing Fractions\") {\r\n        conceptArray = [asf.divideFract] \r\n        createQuestionAnswerListTable(conceptArray, userSelection[i], asf.divideFract)\r\n      }else if (userSelection[i].concept === \"Multiplying Fractions\") {\r\n        conceptArray = [asf.divideFract] \r\n        createQuestionAnswerListTable(conceptArray, userSelection[i], asf.multFract)\r\n      }else if (userSelection[i].concept === \"Subtracting Fractions\") {\r\n        conceptArray = [asf.divideFract] \r\n        createQuestionAnswerListTable(conceptArray, userSelection[i], asf.subFract)\r\n      }else if (userSelection[i].concept === \"Input Output Tables\") {\r\n        conceptArray = [tb.randTable]\r\n        createQuestionAnswerListTable(conceptArray, userSelection[i], tb.randTable)\r\n      }\r\n}\r\n\r\n  if (userSelection.length>0){\r\n    if (userSelection[0].order) {\r\n      questionAnswerList = shuffleArray(questionAnswerList)\r\n    }\r\n  }\r\n \r\n  var questionList = [] //a list of only the questions text\r\n  answerKey = [] \r\n  for (var num=0; num<questionAnswerList.length;num++) { \r\n    //loops through and adds question content only to questionList and answers only to answerKey formatted for react-pdf. \r\n    //Adds question Numbers (num) and styles based on docStyle into columns.\r\n    if (userSelection[0].docStyle) { \r\n      if (num+1>questionAnswerList.length-1){ //odd # questions /if num goes above the length of the array, only add one question.\r\n        questionList.push(<View wrap={false} style={styles.column}>\r\n          <Text style={styles.num}>{num+1})</Text>\r\n            <View style={styles.columnQuestion}>\r\n              {questionAnswerList[num].question}\r\n            </View>\r\n          </View>)\r\n        answerKey.push(<View style={styles.answerKey}><Text>{num+1})</Text>{questionAnswerList[num].answer}</View>)\r\n\r\n      }else{ //even number of questions\r\n        questionList.push(\r\n        <View wrap={false} style={styles.column}>\r\n          <Text style={styles.num}>{num+1})</Text>\r\n            <View style={styles.columnQuestion}>\r\n              {questionAnswerList[num].question}\r\n            </View>\r\n          <Text style={styles.num}>{num+2})</Text>\r\n            <View style={styles.columnQuestion}>\r\n              {questionAnswerList[num+1].question}\r\n            </View>\r\n        </View>\r\n        )\r\n        answerKey.push(<View style={styles.answerKey}><Text>{num+1})</Text>{questionAnswerList[num].answer}</View>)\r\n        answerKey.push(<View style={styles.answerKey}><Text>{num+2})</Text>{questionAnswerList[num+1].answer}</View>)\r\n        num+=1\r\n      }\r\n    }else {\r\n      console.log('inside the else')\r\n\r\n      questionList.push(<View wrap={false} style={styles.questionAnswer}>\r\n                        <Text>{num+1})</Text>{questionAnswerList[num].question}</View>)\r\n      answerKey.push(<View style={styles.answerKey}>\r\n                    <Text>{num+1})</Text>{questionAnswerList[num].answer}</View>)\r\n\r\n    }\r\n  }\r\n  console.log(questionList)\r\n  return [questionList, answerKey];\r\n\r\n};\r\n\r\nclass CreateWorksheet extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render () {\r\n      return (\r\n        <div>\r\n        {this.props.displayQuestionList ? \r\n          <Document>\r\n          <Page>\r\n          {this.props.cw[0]}\r\n          </Page>\r\n\r\n          <Page>\r\n          {this.props.cw[1]}\r\n          </Page>\r\n        </Document>\r\n        :null}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default CreateWorksheet;\r\n\r\n","C:\\projects\\worksheet-creator\\src\\app-files\\algorithms.js",["168","169","170","171","172","173","174","175"],"import {randWhole, randDec, roundDec, shuffleArray, wrongOptions, answerChoicesKey} from './general.js'\r\nimport {\r\n    Page,\r\n    Text,\r\n    View,\r\n    Image,\r\n    Document,\r\n    StyleSheet,\r\n    Font,\r\n  \r\n    // PDFViewer,\r\n    // ReactPDF,\r\n    PDFDownloadLink,\r\n  } from \"@react-pdf/renderer\";\r\n  const styles = StyleSheet.create({\r\n    top: {\r\n      marginBottom:10,\r\n      fontSize: 12,\r\n      textAlign: 'justify',\r\n      // fontFamily: 'arial'\r\n    },\r\n    probContainer: {\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        // fontFamily: 'arial'\r\n      },\r\n    bottom: {\r\n        marginBottom:10,\r\n        fontSize: 12,\r\n        textAlign: 'justify',\r\n        // fontFamily: 'arial'\r\n      },\r\n\r\n  });\r\nexport const divideDec = (options) => {\r\n    var answer = randDec(1, 9, 2)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = roundDec(answer*divisor, 2)\r\n\r\n    if (options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 2)\r\n    divisor = randWhole(2, 11)\r\n    dividend = roundDec(answer*divisor, 2)\r\n\r\n    } else if (options.level ===\"3\") {\r\n        answer = randDec(1, 9, 2)\r\n        divisor = randWhole(12, 50)\r\n        dividend = roundDec(answer*divisor, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec = (options) => {\r\n    if (options.specify === 'Decimal x Whole Number') {\r\n        var numArray = [\r\n            [randWhole(2, 9), randDec(0.1, 0.9, randWhole(1,2))],\r\n            [randWhole(2, 9), randDec(1, 9, randWhole(1,2))],\r\n            [randWhole(2, 9), randDec(10,99, 1)],\r\n        ]\r\n\r\n    } else if (options.specify === '3 by 1 digit') {\r\n        var randDecimal = [randDec(10, 99, 1), randDec(2,9,2), randDec(0.2, 0.999, 3)][randWhole(0,2)]\r\n        numArray = [\r\n            [randWhole(2, 9), randDecimal],\r\n            [randDec(0.2, 0.9, 1), randDecimal],\r\n            [randDec(0.2, 0.9, 1), randDecimal],\r\n            [randDec(0.2, 0.9, 1), randWhole(100,999) ],\r\n            [randDec(0.02, 0.09, 2), randDecimal],\r\n            [randDec(0.02, 0.09, 2), randDecimal],\r\n            [randDec(0.02, 0.09, 2), randWhole(100,999) ],\r\n        ]\r\n\r\n    } else if (options.specify === '4 by 1 digit') {\r\n        randDecimal = [randDec(100, 999, 1), randDec(20,99,2), randDec(2, 9, 3), randDec(0.2, 0.9999, 4)][randWhole(0,3)]\r\n        numArray = [\r\n            [randWhole(2, 9), randDecimal],\r\n            [randDec(0.2,0.9, 1), randWhole(1000,9999)],\r\n            [randDec(0.2,0.9,1), randDecimal],\r\n            [randDec(0.02,0.09,2), randDecimal],\r\n            [randDec(0.02,0.09,2), randWhole(1000,9999)],\r\n\r\n\r\n        ]\r\n    } else if (options.specify === '2 by 2 digit') {\r\n        randDecimal = [randDec(1, 9, 1), randDec(0.2,0.99,2)][randWhole(0,1)]\r\n        randDecimal2 = [randDec(1, 9, 1), randDec(0.2,0.99,2)][randWhole(0,1)]\r\n\r\n        numArray = [\r\n            [randWhole(11, 99), randDecimal],\r\n            [randDecimal, randDecimal2],\r\n            [randDec(1, 9, 1), randDec(0.2,0.99,2)],\r\n\r\n        ]\r\n    } else if (options.specify === '3 by 2 digit') {\r\n        var randDecimal3 = [randDec(10, 99, 1), randDec(2,9,2), randDec(0.2, 0.999, 3)][randWhole(0,2)]\r\n        var randDecimal2 = [randDec(1, 9, 1), randDec(0.2,0.99,2)][randWhole(0,1)]\r\n        numArray = [\r\n            [randWhole(11, 99), randDecimal3],\r\n            [randDecimal2, randWhole(100,999)],\r\n            [randDecimal2, randDecimal3],\r\n            [randDecimal2, randDecimal3],\r\n            [randDecimal2, randDecimal3],\r\n\r\n        ]\r\n    }\r\n    var num = shuffleArray(numArray)\r\n    var numberS = num[0][0]\r\n    var numberL = num[0][1]\r\n    var answer = numberL*numberS\r\n    if (options.probStyle === 'Vertical') {\r\n        var prob = `${numberL} × ${numberS} = `\r\n    } else {\r\n        prob = <View style={styles.probContainer}>\r\n            {/* <View style={styles.top}>{`    ${numberL}`}</View>\r\n            <View style={styles.bottom}>{`× ${numberS}`}</View> */}\r\n            <Text style={styles.top}>{`    ${numberL}`}</Text>\r\n            <Text style={styles.bottom}>{`× ${numberS}`}</Text>\r\n        </View>\r\n    }\r\n\r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {text: prob,\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const multDec2 = (options) => {\r\n    var pv = randWhole(1, 2)\r\n    var numberS = randDec(1, 9, pv)\r\n    var numberL = randDec(0, 1, pv)\r\n    var answer = roundDec(numberS*numberL, 2)\r\n\r\n    if (options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    numberS = randDec(1, 9, pv)\r\n    numberL = randDec(11, 99, pv)\r\n    answer = roundDec(numberS*numberL, 2)\r\n\r\n    } else if (options.level ===\"3\") {\r\n        numberS = randDec(1, 9, pv)\r\n        numberL = randDec(13, 99, pv)\r\n        answer = roundDec(numberS*numberL, 2)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', numberL, numberS)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    // var order = (numberS, numberL)\r\n    var problem = {text:    (`${numberS} × ${numberL} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const randMultDec = (options) => {\r\n    var probArray = [multDec]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n\r\nexport const divideDec2 = (options) => {\r\n    var answer = randDec(0, 1, 3)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(3)\r\n\r\n    if (options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(1, 9, 3)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(3)\r\n\r\n    } else if (options.level ===\"3\") {\r\n        answer = randDec(1, 9, 3)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(3)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const divideDec3 = (options) => {\r\n    var answer = randDec(10, 90, 1)\r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(1)\r\n\r\n    if (options.level === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    answer = randDec(100, 900, 1)\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(1)\r\n\r\n    } else if (options.level ===\"3\") {\r\n        answer = randDec(100, 900, 1)\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(1)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\nexport const randDivDec = (options) => {\r\n    var probArray = [divideDec, divideDec2, divideDec3]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const divideDecOLD = (options) => {\r\n    var [dec1, dec2, dec3] = [randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)]\r\n    var x\r\n    // var shuffleDecimals = shuffleArray([randDec(1, 9, 2), randDec(0, 1, 3), randDec (10, 90, 1)])\r\n    var shuffleDecimals = shuffleArray([dec1, dec2, dec3])\r\n    if (shuffleDecimals[0] === dec1){\r\n        x = 2\r\n    } else if (shuffleDecimals[1] === dec2) {\r\n        x = 3\r\n    } else {\r\n        x = 1\r\n    }\r\n    var answer = shuffleDecimals[0] \r\n    var divisor = randWhole(2, 11)\r\n    var dividend = (answer*divisor).toFixed(x)\r\n\r\n    if (options === \"2\") {\r\n    // [numberS, numberL] = [Math.floor(Math.random()*4000+1000), Math.floor(Math.random()*9999+4001)];\r\n    shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n    answer = shuffleDecimals[0]\r\n    divisor = randWhole(2, 11)\r\n    dividend = (answer*divisor).toFixed(x)\r\n\r\n    } else if (options ===\"3\") {\r\n        shuffleDecimals = shuffleArray([randDec(10, 90, 2), randDec(1, 9, 3), randDec (100, 900, 1)])\r\n        answer = shuffleDecimals[0]\r\n        divisor = randWhole(12, 50)\r\n        dividend = (answer*divisor).toFixed(x)\r\n    } \r\n    var wrong= wrongOptions(answer, 'decimal', dividend, divisor)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${dividend} ÷ ${divisor} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n    }\r\n\r\n\r\n\r\n\r\nexport const addDecPV = (options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(5, 9, y)},\r\n                {numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                ]\r\n\r\n    if (options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50, 90, y)},\r\n                {numberS:randDec(10, 90, x), numberL: randDec(90, 300, y)}]\r\n\r\n    } else if (options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n                {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length-1)]\r\n\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, w)\r\n    // console.log(numberL+numberS)\r\n    // console.log(answer)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const addDecWhole = (options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                {numberS:randWhole(1, 9), numberL: randDec(9,15, x)},\r\n                ]\r\n\r\n    if (options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n                {numberS:randWhole(10, 90), numberL: randDec(90,300, x)}]\r\n\r\n    } else if (options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n                {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n                {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length-1)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL+numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${numberL} + ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const randAddDec = (options) => {\r\n    var probArray = [addDecWhole, addDecPV]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n\r\nexport const subDecWhole = (options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var x = xArray[0]\r\n\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randWhole(6,20)},\r\n                    {numberS:randWhole(1, 9), numberL: randDec(10,15, x)},\r\n                ]\r\n\r\n    if (options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randWhole(50,90)},\r\n            {numberS:randWhole(10, 90), numberL: randDec(91,300, x)}]\r\n\r\n    } else if (options.level ===\"3\") {\r\n        combo = [{numberS:randWhole(100, 499), numberL: randDec(500, 900, x)},\r\n            {numberS:randDec(10, 499, x), numberL: randWhole(500, 900)},\r\n            {numberS:randDec(11, 99, x), numberL: randWhole(100,900)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length-1)]\r\n    var numberS = randNums.numberS\r\n    var numberL = randNums.numberL\r\n    var answer = roundDec(numberL-numberS, x)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\nexport const subDecPV = (options) => {\r\n    var xArray = shuffleArray([1, 2, 3])\r\n    var[x, y] = [xArray[0], xArray[1]]\r\n    if (x>y) {\r\n        var w = x\r\n    } else {\r\n        var w = y\r\n    }\r\n    var combo = [{numberS:randDec(1, 5, x), numberL: randDec(6, 11, y)},\r\n                    {numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n                ]\r\n\r\n    if (options.level === \"2\") {\r\n        combo = [{numberS:randDec(1, 9, x), numberL: randDec(50,90, y)},\r\n            {numberS:randDec(10, 90, x), numberL: randDec(91,300, y)}]\r\n\r\n    } else if (options.level ===\"3\") {\r\n        combo = [{numberS:randDec(100, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(10, 499, x), numberL: randDec(500, 900, y)},\r\n            {numberS:randDec(11, 99, x), numberL: randDec(100,900, y)}]\r\n    } \r\n    var randNums = combo[randWhole(0, combo.length-1)]\r\n    var numberS = Number(randNums.numberS)\r\n    var numberL = Number(randNums.numberL)\r\n    var answer = roundDec(numberL-numberS, w)\r\n    var wrong= wrongOptions(answer, 'decimal', numberS, numberL)    \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n\r\n    var problem = {text:    (`${numberL} - ${numberS} = `),\r\n                answerChoices: AC,\r\n                correctAnswer:answer,\r\n                }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem\r\n}\r\n\r\nexport const randSubDec = (options) => {\r\n    var probArray = [subDecPV, subDecWhole]\r\n    if (options.specify === '3by1' || '4by1') {\r\n        probArray.push()\r\n    } //else if (options.specify === '2by2') {\r\n\r\n    // } else {//3by2\r\n\r\n    // }\r\n    var randProb = shuffleArray(probArray)[0]\r\n    return randProb(options)\r\n}\r\n","C:\\projects\\worksheet-creator\\src\\app-files\\tables.js",["176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248"],"import {\r\n    // Page,\r\n    Text,\r\n    View,\r\n    Image,\r\n    // Document,\r\n    StyleSheet,\r\n    // PDFViewer,\r\n    // ReactPDF,\r\n    // PDFDownloadLink,\r\n  } from \"@react-pdf/renderer\";\r\n  import {randWhole, shuffleArray, answerChoicesKey, randDec, roundDec\r\n  } from './general.js'\r\nconst styles = StyleSheet.create({\r\n  page: { flexDirection: \"column\", padding: 25 },\r\n  table: {\r\n    fontSize: 10,\r\n    width: 550,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"flex-start\",\r\n    alignContent: \"stretch\",\r\n    flexWrap: \"nowrap\",\r\n    alignItems: \"stretch\"\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    alignContent: \"stretch\",\r\n    flexWrap: \"nowrap\",\r\n    alignItems: \"stretch\",\r\n    flexGrow: 0,\r\n    flexShrink: 0,\r\n    flexBasis: 35\r\n  },\r\n  cell: {\r\n    borderColor: \"#cc0000\",\r\n    borderStyle: \"solid\",\r\n    borderWidth: 2,\r\n    flexGrow: 1,\r\n    flexShrink: 1,\r\n    flexBasis: \"auto\",\r\n    alignSelf: \"stretch\"\r\n  },\r\n  header: {\r\n    backgroundColor: \"#eee\"\r\n  },\r\n  headerText: {\r\n    fontSize: 11,\r\n    fontWeight: 1200,\r\n    color: \"#1a245c\",\r\n    margin: 8\r\n  },\r\n  tableText: {\r\n    margin: 10,\r\n    fontSize: 10,\r\n    color: 'blue'\r\n  }\r\n});\r\nconst tstyles = StyleSheet.create({\r\n  table: {\r\n      display: \"table\",\r\n       width: \"200px\",\r\n       textAlign:'center',\r\n  },\r\n  row: {\r\n      flexDirection: \"row\",\r\n  },\r\n  cell: {\r\n      // padding: '3px'\r\n    },\r\n  header: {\r\n    backgroundColor: 'grey'\r\n  }\r\n});\r\nexport const sanitize_block = (block) => {\r\n  if (typeof(block) === 'string' || typeof(block) === \"number\") {\r\n      return <Text>{block}</Text>\r\n  } else {\r\n      return block\r\n  }\r\n}\r\nconst cell_style = (row_index, col_index, data, direction) => {\r\n  const borderLeftWidth = (col_index === 0) ? 1 : 0\r\n  const borderTopWidth = (row_index === 0) ? 1 : 0\r\n  const borderRightWidth = 1\r\n  const borderBottomWidth = 1\r\n  if (direction === 'vertical') {\r\n    var backgroundColor = (row_index === 0) ? '#b6b6b6' : 'white'\r\n\r\n  } else {\r\n    backgroundColor = (col_index === 0) ? '#b6b6b6' : 'white'\r\n  }\r\n\r\n  return {\r\n      // fontFamily: 'Arial', \r\n      width: '33%',\r\n      borderLeftWidth, borderRightWidth,\r\n      borderTopWidth, borderBottomWidth,\r\n      borderStyle: \"solid\",\r\n      backgroundColor,\r\n  }\r\n}\r\nconst randQuestion = () => {\r\n  var questionArray = ['Which equation represents the pattern in the table above?',\r\n                      'Which of the following equations best represents the pattern shown in the table above?',\r\n                      'Which equation best represents the pattern shown in the table above?',\r\n                      'The table above shows a pattern based on the x and y values. Which equation shows the same pattern?'\r\n]\r\n  return shuffleArray(questionArray)[0]\r\n}\r\nexport const Table = (data, style_function=(() => {}), style={}, text, direction) => {\r\n  return (\r\n    <View style={[tstyles.table, style]}>\r\n        {data.map((row, row_index) =>\r\n      <View key={row_index} style={tstyles.row}  wrap={false}>\r\n        {row.map( (cell, col_index) =>\r\n                      <View key={col_index} style={[tstyles.cell, style_function(row_index, col_index, data, direction)]}>\r\n                        {sanitize_block(cell)}\r\n                      </View>\r\n                )\r\n        }\r\n      </View>\r\n    )\r\n    }\r\n    <Text>{text}</Text>\r\n    </View>\r\n    )\r\n}\r\n\r\nconst tableNumbers = (userSelection) =>{ \r\n  console.log(userSelection)\r\n  var smallDec = [randDec(1,9,1), randDec(0.01,0.99,2), randDec(0.1,0.8,1), randDec(0.01,0.09,2) ]\r\n  var largeDec = [randDec(1, 9,2), randDec(0.1,0.99,2)]\r\n  if (userSelection.specify === \"Whole numbers\" ){\r\n    var multiplier = randWhole(2,9)\r\n  } else if (userSelection.specify === \"Whole numbers\" && userSelection.level === 2){\r\n    multiplier = randWhole(11,15)\r\n  } else if (userSelection.specify === \"Whole numbers\" && userSelection.level === 3){\r\n    multiplier = randWhole(16,38)\r\n  } else if (userSelection.specify === \"Decimals\"){\r\n    multiplier = shuffleArray(smallDec)[0]\r\n  } else if (userSelection.specify === \"Decimals\" && userSelection.level === 2){\r\n    multiplier = shuffleArray(largeDec)[0]\r\n  } else if (userSelection.specify === \"Decimals\" && userSelection.level === 3){\r\n    multiplier = shuffleArray(largeDec)[0]\r\n  } else {\r\n    multiplier = randWhole(2,9)\r\n  }\r\n  console.log(multiplier)\r\n  return multiplier\r\n}\r\nexport const tableMultiply1 = (userSelection) => {\r\n\r\n  console.log(userSelection)\r\n  var text = randQuestion()\r\n  var multiplier = tableNumbers(userSelection) \r\n  var num1 = randWhole(2,10)\r\n  var randMult = randWhole(2,5)\r\n  var randomMultNum = randWhole(1,10)\r\n  if (randomMultNum > 8) {\r\n    var [num2, num3, num4] = [num1*randMult, num1*randMult*2, num1*randMult*3]\r\n  } else if (randomMultNum > 5) {\r\n    [num2,num3,num4] = [num1+randMult, num1+randMult+1, num1+randMult+2]\r\n  } else if (randomMultNum >2) {\r\n    [num2, num3, num4] = [num1*randMult, num1*(randMult+1), num1*(randMult+2)]\r\n  } else {\r\n    [num1, num2, num3, num4] = [1, 2, 3, 4]\r\n  }\r\n  // var multiplier = randWhole(2, 40)\r\n\r\n  var table1 = Table([\r\n    ['x', 'y'],\r\n    [num1, roundDec(num1*multiplier,2)],\r\n    [num2, roundDec(num2*multiplier,2)],\r\n    [num3, roundDec(num3*multiplier,2)],\r\n    [num4, roundDec(num4*multiplier,2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n\r\nvar table2 = Table([\r\n  ['x', num1, num2, num3, num4],\r\n  ['y', roundDec(num1*multiplier,2), roundDec(num2*multiplier,2), roundDec(num3*multiplier,2), roundDec(num4*multiplier,2)]\r\n  \r\n  ], cell_style, tstyles, text, 'horizontal')\r\n  var answer = `y = ${multiplier}x`\r\nconsole.log(roundDec(1*multiplier,2))\r\nconsole.log(eval('10 + '+ multiplier))\r\nconsole.log(roundDec(eval('1+'+multiplier),2))\r\n\r\n  var wrong1 = [`y = x + ${roundDec(eval(multiplier*num1+'-'+num1),2)}`, \r\n                `y = x + ${roundDec(multiplier/10,2)}`, \r\n                `y = ${roundDec(eval(multiplier+'+2'),2)}x`\r\n              ]\r\n  var wrong2 = [`y = x + ${roundDec(eval(multiplier+2),2)}`, \r\n                `y = x + ${roundDec(eval(multiplier+'+'+randWhole(2,4)),2)}`,\r\n                `y = ${roundDec(eval(multiplier+'+1'),2)}x`]\r\n  var wrong3 = [`y = ${roundDec(randMult*10,2)}x`, \r\n                `y = ${roundDec(eval(multiplier+'+'+randWhole(2,4)),2)}x`,\r\n                `y = ${roundDec(eval(multiplier+'+1'),2)}x`]               \r\n  var wrong = [wrong1, wrong2, wrong3][randWhole(0,2)]\r\n  var randProb = [table1, table2][randWhole(0,1)]\r\n  var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n  var problem = {text: randProb,\r\n  answerChoices: AC,\r\n  correctAnswer: answer,\r\n  }\r\n  return problem\r\n\r\n}\r\n\r\n\r\nexport const tableMultiply2 = (userSelection) => {\r\n  var multiplier = tableNumbers(userSelection) \r\n  var num1 = randWhole(2,10)\r\n  var randMult = randWhole(2,5)\r\n  var randomMultNum = randWhole(1,10)\r\n  if (randomMultNum > 8) {\r\n    var [num2, num3, num4] = [num1*randMult, num1*randMult*2, num1*randMult*3]\r\n  } else if (randomMultNum > 5) {\r\n    [num2,num3,num4] = [num1+randMult, num1+randMult+1, num1+randMult+2]\r\n  } else if (randomMultNum >2) {\r\n    [num2, num3, num4] = [num1*randMult, num1*(randMult+1), num1*(randMult+2)]\r\n  } else {\r\n    [num1, num2, num3, num4] = [1, 2, 3, 4]\r\n  }\r\n  var text = ''\r\n  // var multiplier = tableNumbers(userSelection) //userSelection is undefined\r\n  var answer = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(num1*multiplier,2)],\r\n      [num2, roundDec(num2*multiplier,2)],\r\n      [num3, roundDec(num3*multiplier,2)],\r\n      [num4, roundDec(num4*multiplier,2)],\r\n  \r\n  ], cell_style, tstyles, text, 'vertical')\r\n  var wrong1 = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(num1*(multiplier),2)],\r\n      [num2, roundDec(num2*(eval(multiplier+'+1')),2)],\r\n      [num3, roundDec(num3*(eval(multiplier+'+2')),2)],\r\n      [num4, roundDec(num4*(eval(multiplier+'+3')),2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n  var wrong2 = Table([\r\n      ['x', 'y'],\r\n      [num1*2, roundDec(num1*2*(eval(multiplier+'+1')),2)],\r\n      [num2*2, roundDec(num2*2*(eval(multiplier+'+1')),2)],\r\n      [num3*2, roundDec(num3*2*(eval(multiplier+'+1')),2)],\r\n      [num4*2, roundDec(num4*2*(eval(multiplier+'+1')),2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n  var wrong3 = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(eval(num1+'+'+multiplier),2)],\r\n      [num2, roundDec(eval(num2+'+'+multiplier),2)],\r\n      [num3, roundDec(eval(num3+'+'+multiplier),2)],\r\n      [num4, roundDec(eval(num4+'+'+multiplier),2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n  if (userSelection.specify === 'Decimals') {\r\n    var wrong4 = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(eval(num1*multiplier*0.1),2)],\r\n      [num2, roundDec(eval(num2*multiplier*0.1),2)],\r\n      [num3, roundDec(eval(num3*multiplier*0.1),2)],\r\n      [num4, roundDec(eval(num4*multiplier*0.1),2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n  } else {\r\n    wrong4 = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(eval(num1*multiplier+'-'+num1),2)],\r\n      [num2, roundDec(eval(num2*multiplier+'-'+num2),2)],\r\n      [num3, roundDec(eval(num3*multiplier+'-'+num3),2)],\r\n      [num4, roundDec(eval(num4*multiplier+'-'+num4),2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n  }\r\n\r\n\r\n  var text = `Which table shows the same pattern as the equation y = ${multiplier}x`\r\n\r\n  \r\n  var wrong = shuffleArray([wrong1, wrong2, wrong3, wrong4])\r\n  var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n  // var AC = shuffleArray([answer, wrong1, wrong2, wrong3])\r\n  \r\n  var problem = {text: text,\r\n  answerChoices: AC, //hard coded answer, wrong1, wrong2, wrong3 works\r\n  correctAnswer: answer,\r\n  }\r\n  return problem\r\n\r\n}\r\n\r\n\r\n\r\nexport const tableAdd1 = (userSelection) => {\r\n  console.log(userSelection)\r\n  var text = randQuestion()\r\n  var num1 = randWhole(2,10)\r\n  var randMult = randWhole(2,5)\r\n  var randomMultNum = randWhole(1,10)\r\n  if (randomMultNum > 8) {\r\n    var [num2, num3, num4] = [num1*randMult, num1*randMult*2, num1*randMult*3]\r\n  } else if (randomMultNum > 5) {\r\n    [num2,num3,num4] = [num1+randMult, num1+randMult+1, num1+randMult+2]\r\n  } else if (randomMultNum >2) {\r\n    [num2, num3, num4] = [num1*randMult, num1*(randMult+1), num1*(randMult+2)]\r\n  } else {\r\n    [num1, num2, num3, num4] = [1, 2, 3, 4]\r\n  }\r\n  var addend = tableNumbers(userSelection) \r\n\r\n  var table1 = Table([\r\n    ['x', 'y'],\r\n    [num1, roundDec(eval(num1+'+'+addend),2)],\r\n    [num2, roundDec(eval(num2+'+'+addend),2)],\r\n    [num3, roundDec(eval(num3+'+'+addend),2)],\r\n    [num4, roundDec(eval(num4+'+'+addend),2)],\r\n\r\n], cell_style, tstyles, text, 'vertical')\r\n\r\nvar table2 = Table([\r\n  ['x', num1, num2, num3, num4],\r\n  ['y', roundDec(eval(num1+'+'+addend),2), roundDec(eval(num2+'+'+addend),2), roundDec(eval(num3+'+'+addend),2), roundDec(eval(num4+'+'+addend),2)],\r\n\r\n], cell_style, tstyles, text, 'horizontal')\r\n  var answer = `y = x + ${addend}`\r\n\r\n  var wrong1 = [`y = x + ${roundDec(eval(addend+'+1'),2)}`, \r\n                `y = x + ${roundDec(addend/10,2)}`, \r\n                `y = ${roundDec(eval(num1*(num1+addend)),2)}x`\r\n              ]\r\n  var wrong2 = [`y = x + ${roundDec(addend*2,2)}`, \r\n                `y = x + ${roundDec(eval(addend+'+'+randWhole(2,4)),2)}`,\r\n                `y = ${roundDec(eval(num1*(num1+addend)),2)}x`]\r\n  var wrong3 = [`y = ${roundDec(eval(num1*(num1+addend)),2)}x`, \r\n                `y = ${roundDec(eval(addend+'+'+randWhole(2,4)),2)}x`,\r\n                `y = ${roundDec(eval(addend+'+1'),2)}x`]               \r\n  var wrong = [wrong1, wrong2, wrong3][randWhole(0,2)]\r\n  var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n  var randProb = [table1, table2][randWhole(0,1)]\r\n  var problem = {text: randProb,\r\n  answerChoices: AC,\r\n  correctAnswer: answer,\r\n  }\r\n  return problem\r\n\r\n}\r\n\r\n\r\n\r\nexport const tableAdd2 = (userSelection) => {\r\n  var text = ''\r\n  // var multiplier = tableNumbers(userSelection) //userSelection is undefined\r\n  var addend = tableNumbers(userSelection) \r\n  var num1 = randWhole(2,10)\r\n  var randMult = randWhole(2,5)\r\n  var randomMultNum = randWhole(1,10)\r\n  if (randomMultNum > 8) {\r\n    var [num2, num3, num4] = [num1*randMult, num1*randMult*2, num1*randMult*3]\r\n  } else if (randomMultNum > 5) {\r\n    [num2,num3,num4] = [num1+randMult, num1+randMult+1, num1+randMult+2]\r\n  } else if (randomMultNum >2) {\r\n    [num2, num3, num4] = [num1*randMult, num1*(randMult+1), num1*(randMult+2)]\r\n  } else {\r\n    [num1, num2, num3, num4] = [1, 2, 3, 4]\r\n  }\r\n  var answer = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(eval(num1+'+'+addend),2)],\r\n      [num2, roundDec(eval(num2+'+'+addend),2)],\r\n      [num3, roundDec(eval(num3+'+'+addend),2)],\r\n      [num4, roundDec(eval(num4+'+'+addend),2)],\r\n  \r\n  ], cell_style, tstyles, text, 'vertical')\r\n  var wrong1 = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(eval(num1+'+'+addend),2)],\r\n      [num2, roundDec(eval(num2+'+'+eval(addend+'+1')),2)],\r\n      [num3, roundDec(eval(num3+'+'+eval(addend+'+1')),2)],\r\n      [num4, roundDec(eval(num4+'+'+eval(addend+'+1')),2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n  var randAddend = randWhole(2,10)\r\n  var wrong2 = Table([\r\n      ['x', 'y'],\r\n      [eval(num1+randAddend), roundDec(eval(num1+'+'+addend),2)],\r\n      [eval(num2+randAddend), roundDec(eval(num1+'+'+eval(addend+'+1')),2)],\r\n      [eval(num3+randAddend), roundDec(eval(num3+'+'+eval(addend+'+1')),2)],\r\n      [eval(num4+randAddend), roundDec(eval(num4+'+'+eval(addend+'+1')),2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n  var wrong3 = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(num1*addend,2)],\r\n      [num2, roundDec(num2*addend,2)],\r\n      [num3, roundDec(num3*addend,2)],\r\n      [num4, roundDec(num4*addend,2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n  var wrong4 = Table([\r\n      ['x', 'y'],\r\n      [num1, roundDec(eval(num1+'+'+addend+'+1'),2)],\r\n      [num2, roundDec(eval(num2+'+'+addend+'+1'),2)],\r\n      [num3, roundDec(eval(num3+'+'+addend+'+1'),2)],\r\n      [num4, roundDec(eval(num4+'+'+addend+'+1'),2)],\r\n\r\n  ], cell_style, tstyles, text, 'vertical')\r\n\r\n  var text = `Which table shows the same pattern as the equation y = x + ${addend}`\r\n\r\n  \r\n  var wrong = shuffleArray([wrong1, wrong2, wrong3, wrong4])\r\n  var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n  // var AC = shuffleArray([answer, wrong1, wrong2, wrong3])\r\n  \r\n  var problem = {text: text,\r\n  answerChoices: AC, //hard coded answer, wrong1, wrong2, wrong3 works\r\n  correctAnswer: answer,\r\n  }\r\n  return problem\r\n\r\n}\r\nexport const randTable = (userSelection) => {\r\n  var probArray = [tableMultiply1, tableMultiply2, tableAdd1, tableAdd2]\r\n\r\n  var randProb = shuffleArray(probArray)[0]\r\n  return randProb(userSelection)\r\n}\r\n\r\n","C:\\projects\\worksheet-creator\\src\\app-files\\add-sub-fract.js",["249","250","251","252","253","254","255","256","257","258","259","260","261","262"],"import {Fraction} from 'fraction.js'\r\nimport {randWhole, cap} from './general.js'\r\nimport './problems.css';\r\nimport {Table, sanitize_block} from './tables.js'\r\nimport {Text,View,StyleSheet,} from \"@react-pdf/renderer\";\r\n  const { create, all } = require('mathjs')\r\n  const styles = StyleSheet.create({\r\n    verticalFractionContainer: {\r\n        display:'flex',\r\n        flexDirection:'column',\r\n    },\r\n    fractionProblemContainer: {\r\n        // margin:'0px 0px 0px 150px',\r\n        marginLeft: '45px',\r\n        width:'50px',\r\n        display:'flex',\r\n        justifyContent:'center',\r\n        flexDirection:'row',\r\n        alignItems:'center',\r\n        // borderBottom: 2,\r\n    },\r\n    problemLine: {\r\n        borderBottom:0.5,\r\n        width: '50px',\r\n        flexDirection: 'row',\r\n        alignItems:'center',\r\n\r\n    },\r\n    horizontalFractionContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'left',\r\n        alignItems: 'center',\r\n    },\r\n    fraction: {\r\n        paddingRight: '0px',\r\n        marginLeft:'10px',\r\n        width:'30px',\r\n\r\n    }\r\n  });\r\nconst fractionNumbers = () => {\r\n      var numerator1 = randWhole(1,8)\r\n      var denominator1 = randWhole(numerator1+1,10)\r\n      if (denominator1 > 6) {\r\n          var topRange = randWhole(2,5)\r\n          var numerator2 = randWhole(1, topRange)\r\n          var denominator2 = randWhole(numerator2+1, topRange+1)\r\n      }else {\r\n        topRange = randWhole(2,10)\r\n        numerator2 = randWhole(1, topRange)\r\n        denominator2 = randWhole(numerator2+1, topRange+1)\r\n      }\r\n      console.log(numerator1)\r\n    return [numerator1, denominator1, numerator2, denominator2]      \r\n  }\r\nconst verticalFractions = (fract1, fract2, op) => {\r\n    return (\r\n        <View style={styles.fractionProblemContainer}>\r\n            <View style={styles.problemLine}>\r\n                <View>\r\n                    {op}\r\n                </View>\r\n                <View style= {styles.verticalFractionContainer}>\r\n                    {fract1}\r\n                    {fract2}\r\n                </View>\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\nconst horizontalFractions = (fract1, fract2, op) => {\r\n    return (\r\n            <View style= {styles.horizontalFractionContainer}>\r\n                    <View style= {styles.fraction}>\r\n                        {fract1}\r\n                    </View>\r\n                    <View>\r\n                        {op}\r\n                    </View>\r\n                    <View style= {styles.fraction}>\r\n                        {fract2}\r\n                    </View>\r\n                <Text>\r\n                    = ________\r\n                </Text>\r\n            </View>\r\n    )\r\n}\r\nconst config = {\r\n    // Default type of number\r\n    // Available options: 'number' (default), 'BigNumber', or 'Fraction'\r\n    number: 'Fraction'\r\n  }\r\n\r\n  const tstyles = StyleSheet.create({\r\n    table: {\r\n        display: \"table\",\r\n         width: \"10px\",\r\n         textAlign:'center',\r\n    },\r\n    row: {\r\n        flexDirection: \"row\",\r\n    },\r\n    cell: {\r\n        // padding: '3px'\r\n      },\r\n    header: {\r\n      backgroundColor: 'grey'\r\n    }\r\n  });\r\n\r\n  const cell_style_fraction = (row_index, col_index) => {\r\n    const borderLeftWidth =  0\r\n    const borderTopWidth = (row_index === 0) ? 0 : 1\r\n    const borderRightWidth = 0\r\n    const borderBottomWidth = 0\r\n    const backgroundColor = 'white'\r\n    if (col_index > 0) {\r\n\r\n    }\r\n  \r\n    return {\r\n        // fontFamily: 'Arial', \r\n        width: '20px',\r\n        borderLeftWidth, borderRightWidth,\r\n        borderTopWidth, borderBottomWidth,\r\n        borderStyle: \"solid\",\r\n        backgroundColor,\r\n    }\r\n  }\r\n  const cell_style_mixednumber = (row_index, col_index) => {\r\n    const borderLeftWidth =  0\r\n    const borderTopWidth = (row_index === 0 || col_index === 0) ? 0 : 1\r\n    const borderRightWidth = 0\r\n    const borderBottomWidth = 0\r\n    const backgroundColor = 'white'\r\n    const fontSize = '15px'  \r\n    return {\r\n        // fontFamily: 'Arial', \r\n        width: '20px',\r\n        borderLeftWidth, borderRightWidth,\r\n        borderTopWidth, borderBottomWidth,\r\n        borderStyle: \"solid\",\r\n        backgroundColor, fontSize,\r\n    }\r\n  }\r\nconst math = create(all, config)\r\n\r\nexport const addFract = () => {\r\n    var numberList = fractionNumbers()\r\n    var whole = randWhole(1,4)\r\n    var [num1, denom1, num2, denom2] = [numberList[0], numberList[1], numberList[2], numberList[3]]\r\n    console.log(num1)\r\n    // console.log(num)\r\n    var fract1 = math.fraction(`${num1}/${denom1}`)\r\n    var fract2 = math.fraction(`${num2}/${denom2}`)\r\n    var answer = math.format(math.add(fract1, fract2))\r\n    var answer = math.format(math.add(fract1, fract2))\r\n\r\n    // console.log(fract1)\r\n    // console.log(math.fraction('1/2'))\r\n    var styledFract1 = Table([[num1],[denom1]], cell_style_fraction, tstyles)\r\n    var styledFract2 = Table([[num2],[denom2]], cell_style_fraction, tstyles)\r\n    var mixedNumber1 = Table([['hi', num1],[whole, denom1]], cell_style_mixednumber, tstyles)\r\n\r\n    var AC = [answer, 'this is wrong', 'this is wrong2', 'this is wrong3']\r\n    // var prob1 = (`${math.format(fract1)}+${math.format(fract2)}`)\r\n    // var prob1 = <View>{styledFract1}<Text>+</Text>{styledFract2}</View>\r\n    var prob1 = horizontalFractions(styledFract1, styledFract2, <Text>+</Text>)\r\n    var prob2 = (`${math.format(fract2)}+${math.format(fract1)}`)\r\n    var randProb = [prob1.toString(), prob2.toString()][randWhole(0,1)]\r\n    \r\n    var problem = {text: prob1,\r\n        answerChoices: ['','','','', answer],\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\nexport const subFract = () => {\r\n    var numberList = fractionNumbers()\r\n    var whole = randWhole(1,4)\r\n    var [num1, denom1, num2, denom2] = [numberList[0], numberList[1], numberList[2], numberList[3]]\r\n    console.log(num1)\r\n    // console.log(num)\r\n    var fract1 = math.fraction(`${num1}/${denom1}`)\r\n    var fract2 = math.fraction(`${num2}/${denom2}`)\r\n    // var answer = math.format(math.subtract(fract1, fract2))\r\n    // var answer = math.format(math.subtract(fract1, fract2))\r\n    var styledFract1 = Table([[num1],[denom1]], cell_style_fraction, tstyles)\r\n    var styledFract2 = Table([[num2],[denom2]], cell_style_fraction, tstyles)\r\n    if (math.compare(fract1, fract2) === 1) {\r\n        var prob1 = horizontalFractions(styledFract1, styledFract2, <Text>-</Text>)\r\n        var answer = math.format(math.subtract(fract1, fract2))\r\n\r\n    } else {\r\n        prob1 = horizontalFractions(styledFract2, styledFract1, <Text>-</Text>)\r\n        answer = math.format(math.subtract(fract2, fract1))\r\n\r\n    }\r\n    console.log(fract1)\r\n    console.log(math.fraction('1/2'))\r\n\r\n    var mixedNumber1 = Table([['hi', num1],[whole, denom1]], cell_style_mixednumber, tstyles)\r\n\r\n    var AC = [answer, 'this is wrong', 'this is wrong2', 'this is wrong3']\r\n    // var prob1 = (`${math.format(fract1)}+${math.format(fract2)}`)\r\n    // var prob1 = <View>{styledFract1}<Text>+</Text>{styledFract2}</View>\r\n    var prob1 = horizontalFractions(styledFract1, styledFract2, <Text>-</Text>)\r\n    var prob2 = (`${math.format(fract2)}+${math.format(fract1)}`)\r\n    var randProb = [prob1.toString(), prob2.toString()][randWhole(0,1)]\r\n    \r\n    var problem = {text: prob1,\r\n        answerChoices: ['','','','', answer],\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\n\r\nconst divFractNumbers = (userSelection) => {\r\n    // if (options.specify === 'fractbyfract') {\r\n\r\n    // } else if (options.specify === 'mixedbymixed'){\r\n\r\n    // } else {\r\n\r\n    // }\r\n    var whole = randWhole(2, 10)\r\n    var num1 = 1\r\n    var denom1 = randWhole(2,10)\r\n\r\n    return [whole, num1, denom1]\r\n}\r\nexport const divideFract = () => {\r\n    var numberList = divFractNumbers()\r\n    var [whole, num1, denom1] = [numberList[0], numberList[1], numberList[2]]\r\n    console.log(num1)\r\n    var fract1 = math.fraction(`${num1}/${denom1}`)\r\n    // console.log(fract1)\r\n    // console.log(math.fraction('1/2'))\r\n    var wholeNumber = <View><Text>{whole}</Text></View>\r\n    var styledFract1 = Table([[num1],[denom1]], cell_style_fraction, tstyles)\r\n\r\n    // var prob1 = (`${math.format(fract1)}+${math.format(fract2)}`)\r\n    // var prob1 = <View>{styledFract1}<Text>+</Text>{styledFract2}</View>\r\n    var prob1 = horizontalFractions(wholeNumber, styledFract1, <Text>÷</Text>)\r\n    var prob2 = horizontalFractions(styledFract1, wholeNumber, <Text>÷</Text>)\r\n\r\n    // var prob2 = (`${math.format(fract2)}+${math.format(fract1)}`)\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    if (randProb === prob1) {\r\n        var answer = math.format(math.number(math.divide(whole, fract1)))\r\n    } else {\r\n        answer = math.format(math.divide(fract1, whole))\r\n    }\r\n    var AC = [answer, 'this is wrong', 'this is wrong2', 'this is wrong3']\r\n\r\n    var problem = {text: randProb,\r\n        answerChoices: ['','','','', answer],\r\n        correctAnswer: answer}\r\n    return problem\r\n}\r\nexport const multFract = () => {\r\n    var numberList = divFractNumbers()\r\n    var [whole, num1, denom1] = [numberList[0], numberList[1], numberList[2]]\r\n    console.log(num1)\r\n    var fract1 = math.fraction(`${num1}/${denom1}`)\r\n    // console.log(fract1)\r\n    // console.log(math.fraction('1/2'))\r\n    var wholeNumber = <View><Text>{whole}</Text></View>\r\n    var styledFract1 = Table([[num1],[denom1]], cell_style_fraction, tstyles)\r\n\r\n    // var prob1 = (`${math.format(fract1)}+${math.format(fract2)}`)\r\n    // var prob1 = <View>{styledFract1}<Text>+</Text>{styledFract2}</View>\r\n    var prob1 = horizontalFractions(wholeNumber, styledFract1, <Text>×</Text>)\r\n    var prob2 = horizontalFractions(styledFract1, wholeNumber, <Text>×</Text>)\r\n\r\n    // var prob2 = (`${math.format(fract2)}+${math.format(fract1)}`)\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var answer = math.format(math.multiply(fract1, whole))\r\n\r\n    // if (randProb === prob1) {\r\n    //     var answer = math.format(math.number(math.multiply(whole, fract1)))\r\n    // } else {\r\n    //     answer = math.format(math.multiply(fract1, whole))\r\n    // }\r\n    var AC = [answer, 'this is wrong', 'this is wrong2', 'this is wrong3']\r\n\r\n    var problem = {text: randProb,\r\n        answerChoices: ['','','','', answer],\r\n        correctAnswer: answer}\r\n    return problem\r\n}","C:\\projects\\worksheet-creator\\src\\app-files\\multiply.js",["263","264","265","266","267","268"],"import * as g from \"./general\";\r\nimport {randWhole, shuffleArray, answerChoicesKey, wrongOptions, cap} from './general'\r\n\r\nconst multNumbers = (options) =>{\r\n    if (options.specify === '1') { //4 by 1\r\n        var [numberS, numberM, numberL] = [randWhole(2, 9), randWhole(12, 67), randWhole(1000, 9999)];\r\n\r\n    }else if (options.specify === \"2\") { // 2 by 2\r\n    [numberS, numberM, numberL] = [randWhole(12, 49), randWhole(12, 67), randWhole(50, 99)];\r\n\r\n    } else if (options.specify ===\"3\") { // 3 by 2\r\n    [numberS, numberM, numberL] = [randWhole(20, 99), randWhole(20, 90), randWhole(102, 999)];\r\n    } else{\r\n        [numberS, numberM, numberL] = [randWhole(20, 99), randWhole(20, 90), randWhole(102, 999)];\r\n\r\n        // var randQ = [[randWhole(2,9), randWhole(1000,9999)] //error cannot read property (random number) of undefined\r\n        //             [randWhole(20,99), randWhole(102,999)]\r\n        //             [randWhole(12,49), randWhole(50,99)]]\r\n        // var randArr = shuffleArray(randQ)\r\n        // // [numberS, numberM, numberL] = [randArr[0][0],randWhole(12,90), randArr[0][1]]\r\n\r\n    }\r\n    return [numberS, numberM, numberL]\r\n}\r\n\r\nexport const multWhole = (options) => { //basic product/sum/difference\r\n    var numberList = multNumbers(options)\r\n    var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    if (options.level === '1') {\r\n        var prob1 = (`What is the product of ${numberS} and ${numberL}?`)\r\n        var prob2 = (`What is the product of ${numberL} and ${numberS}?`)\r\n        var prob3 = (`A number is ${numberL} times as large as ${numberS}. What is the number?`)\r\n        var prob4 = (`A number is ${numberS} times as large as ${numberL}. What is the number?`)\r\n        var randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n        var answer = numberS*numberL\r\n\r\n    } else if (options.level === '2') {\r\n        prob1 = (`What is the sum of ${numberM} and the product of ${numberL} and ${numberS}?`)\r\n        prob2 = (`What is the sum of ${numberM} and the product of ${numberS} and ${numberL}?`)\r\n        prob3 = (`What is the difference when ${numberM} is subtracted from the product of ${numberS} and ${numberL}?`)\r\n        prob4 = (`What is the difference when ${numberM} is subtracted from the product of ${numberL} and ${numberS}?`)\r\n        randProb = [prob1, prob2, prob3, prob4][randWhole(0,3)]\r\n        if (randProb === (prob1 || prob2)){ //maybe better to make problems into objects with answer \r\n            answer = numberM+numberL*numberS\r\n        } else {\r\n            answer = numberL*numberS-numberM\r\n        }\r\n    } else {\r\n        var numberL2 = randWhole(111,99) //not going to change based on specify\r\n        var numberS2 = randWhole(12,99)\r\n        prob1 = (`What is the difference between the product of ${numberL} and ${numberS} and the product of ${numberS2} and ${numberL2}?`)\r\n        prob2 = (`What is the sum of the product of ${numberL} and ${numberS} and the product of ${numberS2} and ${numberL2}?`)\r\n        prob3 = (`A number is ${numberS} times as much as the sum of ${numberM} and ${numberS2}and ${numberS}. What is the number?`)\r\n        randProb = [prob1, prob2, prob3][randWhole(0,2)]\r\n\r\n        if (randProb === prob1){\r\n            answer = numberL*numberS - numberS2*numberL2\r\n        } else if (randProb === prob2){\r\n            answer = numberL*numberS + numberS2*numberL2\r\n        } else {\r\n            answer = numberS*(numberM+numberS2+numberS)\r\n        }\r\n    }\r\n    \r\n    var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n\r\n\r\n\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem     \r\n\r\n}\r\n\r\n\r\nexport const multWhole2 = (options) => { //mass\r\n    var [group, item, mass] = [shuffleArray(g.groupList), shuffleArray(g.itemList)]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    var numberList = multNumbers(options)\r\n    var [numberS, numberM, numberL, numberL2] = [numberList[0], numberList[1], numberList[2], randWhole(12, 55)]\r\n\r\n\r\n    if (options.level === '1') {\r\n        var prob1 = `${cap(e)} ${group[0]} of ${item[0]} has a mass of ${numberS} grams. What is the mass of `+\r\n        `${numberL} ${group[0]}s of ${item[0]} in grams?`\r\n        var prob2 = `There are ${numberL} ${group[0]}s of ${item[0]}. If ${e} ${group[0]} of ${item[0]} `+\r\n        `has a mass of ${numberS} grams, what is the mass of all these ${item[0]}s?`\r\n    } else {\r\n        var prob1 = `${cap(e)} ${group[0]} of ${item[0]} has a mass of ${numberS} grams. ${cap(e)} ${group[0]} of `+\r\n        `${item[1]} has a mass of ${numberM} grams. What is the mass of ${numberL} ${group[0]}s of ${item[0]} in grams?`\r\n        var prob2 = `There are ${numberL} ${group[0]}s of ${item[0]} and there are ${numberM} ${group[0]}s of `+\r\n        `${item[1]}. What is the mass of all the ${group[0]}s of ${item[0]} if ${e} has a mass of ${numberS} grams? `\r\n    }\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var answer = numberS*numberL\r\n    var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], 'grams')\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem   \r\n}\r\n\r\nexport const multWhole3 = (options) => { //simple buying items\r\n    var [expItem, girl] = [shuffleArray(g.itemList2060), shuffleArray(g.girlList)]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    var numberList = multNumbers(options)\r\n    var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n    var prob1 = `${cap(e)} ${expItem[0]} costs $${numberS}. How much would it cost to buy ${numberL} ${expItem[0]}s?`\r\n    var prob2 = `${girl[0]} buys ${numberL} ${expItem[0]}s which cost $${numberS} each. How much would it cost her to buy \r\n                ${numberL} ${expItem[0]}s?`\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var answer =numberS*numberL\r\n    var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem   \r\n}\r\nexport const multWholeby1 = (options) => { //by1 digit only Disaster\r\n    var [food, boy, girl, disaster] = [shuffleArray(g.disasterFoodList)[0], shuffleArray(g.boyList)[0], shuffleArray(g.girlList)[0],shuffleArray(g.disasterList)[0]]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    var numberList = multNumbers(options)\r\n    var [numberS, numberM, numberL] = [randWhole(2,7), numberList[1], numberList[2]]\r\n    var prob1 = (`${boy} is preparing for a ${disaster}. He wants to buy a lot of his favorite food so that he does not `+\r\n    `run out. ${cap(e)} box of ${food} costs $${numberS}. How much would it cost him to buy `+\r\n    `${numberL} boxes?`)\r\n    var prob2 = (`${girl} is getting ready in case of a ${disaster}. She wants stock up on ${food} so she purchases `+\r\n    `${numberL} boxes. ${cap(e)} box of ${food} costs $${numberS}. How much would it cost her to buy `+\r\n    `all the boxes?`)\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var answer =numberS*numberL\r\n    var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n\r\n    // console.log(problem)\r\n    // return <div><p>{problem} </p></div>\r\n    return problem   \r\n}\r\n// export const multWhole5 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole6 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole7 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole8 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole9 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole10 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n// export const multWhole11 = (options) => {\r\n//     var numberList = multNumbers(options)\r\n//     var [numberS, numberM, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    \r\n//     var wrong= wrongOptions(answer, 'multiply', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n//     var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n//     var problem = {text: randProb,\r\n//         answerChoices: AC,\r\n//         correctAnswer: answer\r\n//     }\r\n\r\n//     // console.log(problem)\r\n//     // return <div><p>{problem} </p></div>\r\n//     return problem   \r\n// }\r\n\r\n\r\n\r\n  \r\n\r\n    // problem = (`${randGirl} 's ${randPetBig} weighs ${numberL} pounds. ${randBoy}'s ${randPetBig} weighs ${NumberS}`\r\n    // ` times as much as ${randGirl}'s ${randPetBig}. What does ${randBoy}'s ${randPetBig} weigh in pounds?`) //2 by 2 only\r\n\r\n\r\n\r\n    // problem = (`${randBoy} buys ${numberL} large bags of ${randCandy} for Halloween. It costs `\r\n    // `${numberS}$ for each bag of ${randCandy}. How much would it cost him to buy all the bags?`)\r\n\r\n    // problem = (`${randSchool} ordered ${numberL} cases of ${randSubject} textbooks. ${cap(e)} case holds ${numberS}`\r\n    // ` textbooks. How many textbooks did the school buy?`)\r\n\r\n    // problem = (`A ${randSize} bag of ${randFood}'s contains ${numberL} calories. How many calories are in ` \r\n    // `${numberS} ${randSize} bags of ${randFood}s?`)\r\n\r\n\r\n\r\n\r\n    export const randMultWhole = (options) => {\r\n        var probArray = [multWhole, multWhole2, multWhole3]\r\n        if (options.specify === '3by1' || '4by1') {\r\n            probArray.push(multWholeby1)\r\n        } //else if (options.specify === '2by2') {\r\n\r\n        // } else {//3by2\r\n\r\n        // }\r\n        var randProb = shuffleArray(probArray)[0]\r\n        return randProb(options)\r\n    }","C:\\projects\\worksheet-creator\\src\\components\\display-user-selection.js",["269"],"C:\\projects\\worksheet-creator\\src\\components\\user-inputs.js",["270","271","272","273"],"import { defaultProps, PropTypes, React } from \"react\";\r\nimport Input from \"./input\";\r\nimport \"../App.css\";\r\nimport ConceptCustomization from \"./concept-customization\";\r\nimport DisplayUserSelection from './display-user-selection'\r\n\r\nconst UserInput = (props) => {\r\n  return (\r\n    <div className=\"main-customize-container\">\r\n      <div className=\"concept-dropdown-container\">\r\n          <p className=\"customize-title\">Math Concepts</p>\r\n        <div>\r\n          <div className=\"concept-topic\">\r\n            Whole Number Operations\r\n            {/* <div className=\"dropdown-content\">\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n        <div className=\"buttonGroup\">\r\n        <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Adding Whole Numbers\")}\r\n              >\r\n                Adding Whole Numbers\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Subtracting Whole Numbers\")}\r\n              >\r\n                Subtracting Whole Numbers\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Multiplying Whole Numbers\")}\r\n              >\r\n                Multiplying Whole Numbers\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Dividing Whole Numbers\")}\r\n              >\r\n                Dividing Whole Numbers\r\n              </button>\r\n        </div>\r\n        <div>\r\n          <div className=\"concept-topic\">\r\n            Decimal Operations\r\n            <div className=\"dropdown-content\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className= \"buttonGroup\">\r\n        <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Dividing Decimals Algorithm\")}\r\n              >\r\n                Adding Decimals\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Subtracting Decimals Algorithm\")}\r\n              >\r\n                Subtracting Decimals\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Dividing Decimals Algorithm\")}\r\n              >\r\n                Dividing Decimals\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Multiplying Decimals Algorithm\")}\r\n              >\r\n                Multiplying Decimals\r\n              </button>\r\n        </div>\r\n        <div>\r\n          <div className=\"concept-topic\">\r\n            Fraction Operations\r\n\r\n          </div>\r\n          \r\n        </div>\r\n        <div className=\"buttonGroup\">\r\n        <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Adding Fractions\")}\r\n              >\r\n                Adding Fractions\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Subtracting Fractions\")}\r\n              >\r\n                Subtracting Fractions\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Dividing Fractions\")}\r\n              >\r\n                Dividing Fractions\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"dropdown\"\r\n                onClick={() => props.handleConcept(\"concept\", \"Multiplying Fractions\")}\r\n              >\r\n                Multiplying Fractions\r\n              </button>\r\n        </div>\r\n        <div>\r\n          <div\r\n            // className=\"conceptList\"\r\n            onClick={() => props.handleConcept(\"concept\", \"Order of Operations\")}\r\n            className=\"dropdown\"\r\n          >\r\n            Order of Operations\r\n            <div className=\"concept-topic\">\r\n              {/* <button type = \"button\" className='conceptList' \r\n                    onClick = {() => props.handleConcept('concept', 'order-ops-whole')}>Order of Operations</button> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div\r\n            type=\"button\"\r\n            className=\"conceptList\"\r\n            onClick={() => props.handleConcept(\"concept\", \"Input Output Tables\")}\r\n            className=\"dropdown\"\r\n          >\r\n            {\" \"}\r\n            Tables\r\n            <div className=\"concept-topic\">\r\n              {/* <button type = \"button\" className='conceptList' \r\n                    onClick = {() => props.handleConcept('concept', 'table')}>Input Output Tables</button> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"dropdown\">\r\n            {\" \"}\r\n            Decimal Basics\r\n            <div className=\"concept-topic\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"customize-qcontainer\">\r\n        {props.inputState.length < 2 ? (\r\n          <div>\r\n            <h1>\r\n              Select a concept to the left and then you will be able to\r\n              customize it to fit the needs of your students.\r\n            </h1>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <p className=\"customize-title\">Customize your questions:</p>\r\n            <ConceptCustomization\r\n              inputState={props.inputState}\r\n              handleInput={props.handleInput}\r\n            ></ConceptCustomization>\r\n          </div>\r\n        )}\r\n        <div className=\"quantity-addQ\">\r\n          <div>\r\n            <Input\r\n              label=\"Quantity:\"\r\n              name=\"quantity\"\r\n              type=\"number\"\r\n              value={props.inputState.quantity}\r\n              // onChange={props.handleInputQuantity}\r\n              onChange={props.handleInput}\r\n              placeholder=\"\"\r\n              required\r\n              className=\"input\"\r\n              min=\"1\"\r\n              max=\"50\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"submit\"></label>\r\n            <button type=\"button\" className= \"addQ-button\" id=\"submit\" onClick={props.handleAddConcept}>\r\n              + Questions\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n\r\n\r\n      <div className=\"input-final-container\">\r\n\r\n\r\n\r\n\r\n            <p className=\"customize-title\">Finishing Touches</p>\r\n      <div className=\"final-customization container\">\r\n          <label htmlFor=\"level\">Document Title:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"docTitle\"\r\n            value={props.inputState.docTitle}\r\n            value={props.inputState.docTitle}\r\n            // onChange={props.handleInputTitle}\r\n            onChange={props.handleInput}\r\n            name=\"docTitle\"\r\n          />\r\n\r\n          <Input\r\n            label=\"Mix up questions:\"\r\n            name=\"order\"\r\n            type=\"checkbox\"\r\n            value={props.inputState.order}\r\n            // onChange={props.handleOrder}\r\n            onChange={props.handleInput}\r\n            className=\"input\"\r\n          />\r\n          <Input\r\n            label=\"Columns:\"\r\n            name=\"docStyle\"\r\n            type=\"checkbox\"\r\n            value={props.inputState.docStyle}\r\n            // onChange={props.handleDocStyle}\r\n            onChange={props.handleInput}\r\n            className=\"input\"\r\n          />\r\n          \r\n      <div>\r\n        {props.userSelection.length>0 ?\r\n        <div> \r\n          <DisplayUserSelection \r\n            displayQuestionList = {props.displayQuestionList} \r\n            handleSelect = {props.handleSelect} \r\n            handleDeleteConcept = {props.handleDeleteConcept} \r\n            userSelection = {props.userSelection} \r\n            handlePDF = {props.handlePDF}\r\n          /> </div>: <div><p>hi</p></div> }\r\n      </div>\r\n        <button type=\"button\" onClick={props.handleDisplayQuestionList}>\r\n          Create Worksheet\r\n        </button> \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","C:\\projects\\worksheet-creator\\src\\components\\input.js",["274","275","276"],"import {defaultProps, PropTypes, React, Fragment} from 'react'\r\nconst Input = ({\r\n  name,\r\n  type,\r\n  placeholder,\r\n  onChange,\r\n  className,\r\n  value,\r\n  error,\r\n  children,\r\n  label,\r\n  min,\r\n  max,\r\n  ...props\r\n}) => {\r\n  \r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        id={name}\r\n        name={name}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        onChange={onChange}\r\n        value={value}\r\n        className={className}\r\n        style={error && {border: 'solid 1px red'}}\r\n        min= {min}\r\n        max={max}\r\n      />\r\n      { error && <p>{ error }</p>}\r\n    </div>\r\n  )\r\n}\r\n\r\nInput.defaultProps = {\r\n  type: \"text\",\r\n  className: \"\"\r\n}\r\n\r\n// Input.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   type: PropTypes.string,\r\n//   type: PropTypes.oneOf(['text', 'number', 'password', 'checkbox']),\r\n//   className: PropTypes.string,\r\n//   value: PropTypes.any,\r\n//   onChange: PropTypes.func.isRequired\r\n// }\r\n\r\n\r\nexport default Input","C:\\projects\\worksheet-creator\\src\\app-files\\divide.js",["277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301"],"import { to } from \"mathjs\";\r\nimport * as g from \"./general\";\r\nimport {randWhole, shuffleArray, answerChoicesKey, wrongOptions, cap} from './general'\r\nvar e = ['one', 'a', 'each'][randWhole(0,2)]\r\n\r\n\r\nconst divNumbers = (options) => {\r\n    if (options.specify === '1') { //4 by 1\r\n        var numArray = [[randWhole(50, 99), randWhole(2, 9)],\r\n        [randWhole(25, 50), randWhole(5, 9)],\r\n        [randWhole(101, 166), randWhole(2, 6)],\r\n        [randWhole(166, 249), randWhole(2, 4)]]\r\n        var num = shuffleArray(numArray)\r\n        var answer = num[0][0]\r\n        var numberS = num[0][1]\r\n        var numberL = answer*numberS\r\n\r\n\r\n    }else { // 2 by 2\r\n        var numArray = [\r\n            [randWhole(15, 24), randWhole(11, 20)],\r\n            [randWhole(15, 28), randWhole(21, 35)],\r\n            [randWhole(13, 25), randWhole(36, 50)],\r\n            [randWhole(15, 25), randWhole(15, 28)]\r\n        ]\r\n        var num = shuffleArray(numArray)\r\n        var answer = num[0][0]\r\n        var numberS = num[0][1]\r\n        var numberL = answer*numberS\r\n    } \r\n    return [answer, numberS, numberL]\r\n}\r\nconst divideWhole = (options) => {\r\n    \r\n\r\n\r\n\r\n\r\n}\r\nexport const div1dig = (options) => { // 1 digit divisor only\r\n    var numberList = divNumbers(options)\r\n    var girl = shuffleArray(g.girlList)[0]\r\n    var store = shuffleArray(g.storeList)[0]\r\n    var item = shuffleArray(g.packageItemList)[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n\r\n\r\n    var [answer, numberS, numberL] = [numberList[0], randWhole(2,6), numberList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = `${girl} is going to ${store} to buy some ${item} for a party. It costs $${numberS} for ${e} `+\r\n    `package of ${item}. After the cashier rang up her items, she had to give the cashier a total `+\r\n    `of $${numberL}. How many packages of ${item} did she buy?`\r\n    var prob2 = `${girl} wants to buy some ${item} at ${store} to prepare for a large family gathering.`+\r\n    ` She ended up purchasing ${numberS} packages of ${item} which cost `+\r\n    `$${numberL} altogether. How much does ${e} package of ${item} cost?`\r\n    \r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    if (randProb === prob2) {\r\n        AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    }\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const div2dig= (options) => { //playing sports 2 digit only\r\n    var numberList = divNumbers(options)\r\n    var boy = shuffleArray(g.boyList)[0]\r\n    var sport = shuffleArray(g.sportList)[0]\r\n    var [answer, numberS, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    var prob1 = `${boy} plays ${sport} for a total of ${numberL} minutes last year. He played ${sport} `+\r\n    `for ${numberS} minutes each day. How many days did ${boy} play ${sport} last year? `\r\n    var prob2 = `${boy} plays ${sport} for a total of ${numberL} minutes last year. He played ${sport} `+\r\n    `for ${numberS} days last year for an equal amount of time each day. How many minutes did ${boy} play ${sport} each day last year? `\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const divWhole = (options) => { //simple purchase items\r\n    var numberList = divNumbers(options)\r\n    var item = shuffleArray(g.itemList1020)[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    if (options.specify === '2by1') { //4 by 1\r\n        var [answer, numberS] = [randWhole(2,9), randWhole(5,8)];\r\n       var numberL= answer*numberS\r\n   }else if (options.specify === '3by1'){\r\n       var [answer, numberS] = [randWhole(23,40), randWhole(6,9)];\r\n       var numberL = answer*numberS\r\n   } else if (options.specify === '4by1'){\r\n        var [answer, numberS] = [randWhole(167,250), randWhole(6,9)];\r\n        var numberL = answer*numberS\r\n    } else{\r\n        var [answer, numberS] = [randWhole(23,89), randWhole(20,40)];\r\n        var numberL = answer*numberS\r\n        var item = shuffleArray(g.itemList2060)[0]\r\n    } \r\n    var [answer, numberS, numberL] = [numberList[0], numberList[1], numberList[2]]\r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS) //wont be great wrong options for the level 3 Quetions   \r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    var prob1 = `It costs $${numberL} to buy ${numberS} ${item}s. How much would it cost to buy one `+\r\n    `${item}?`\r\n    var prob2 = `How much would it cost to buy ${e} ${item} if it costs $${numberL} to buy ${numberS} ${item}s?`\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\nexport const div1dig2 = (options) => { //teacher buying items\r\n    var teacher = shuffleArray(g.teacherList)[0]\r\n    var theme = shuffleArray(g.themeList)[0]\r\n    var item = shuffleArray(['pencil','marker','pen','journal','notebook','decoration'])[0]\r\n    var e = ['one', 'a', 'each'][randWhole(0,2)]\r\n    if (options.specify === '2by1') { \r\n         var [answer, numberS] = [randWhole(2,9), randWhole(5,8)];\r\n        var numberL= answer*numberS\r\n    }else { //3by1\r\n        var [answer, numberS] = [randWhole(15,15), randWhole(6,9)];\r\n        var numberL = answer*numberS\r\n    } \r\n    var wrong= wrongOptions(answer, 'divide', numberL, numberS)\r\n    var prob1 = `${teacher} bought ${numberS} ${theme} ${item}s for a total of $${numberL} `+\r\n    `. If each ${item} costs the same amount, how much did ${teacher} spend on each ${theme} ${item}? `\r\n    var prob2 = `${teacher} has a total of $${numberL} to spend on ${item}s. She wants to buy ${theme} `+\r\n        ` ${item}s for her classroom. If ${e} package of ${theme} ${item}s costs $${numberS}, how many packagess can she buy?`\r\n    var randProb = [prob1, prob2][randWhole(0,1)]\r\n    var AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2])\r\n    if (randProb === prob1) {\r\n        AC = answerChoicesKey(answer, wrong[0], wrong[1], wrong[2], '$')\r\n    } \r\n    var problem = {text: randProb,\r\n        answerChoices: AC,\r\n        correctAnswer: answer\r\n    }\r\n    return problem\r\n}\r\n\r\n// export const randDivideWhole = () => {\r\n//     var randProb = shuffleArray([\r\n    \r\n//     ])[0]\r\n// }\r\n\r\n\r\n    // var prob1 = `${girl} has ${numberL} ${theme} themed ${schoolItem}. She wants to split them equally `+\r\n    //             ` between her friends. If she has ${numberS} friends, how many ${schoolItem} can each friend get?`\r\n    // var prob2 = `${boy} has ${numberL} ${theme} themed ${schoolItem}. If he gives each friend ${numberS} `+\r\n    //             `${schoolItem}, how many friends can he give them to?`\r\n\r\n    // var prob1 = `${girl} has ${numberL} ${noun} saved up. She decides that she has way too many ${noun} and she `+\r\n    //             `$wants to give them all away to her friends. She wants to give each friend the same amount of ${noun}. `+\r\n    //             `${girl} has ${numberS} friends that she would like to give the ${noun} to. How many ${noun} would each friend get?`\r\n    // var prob2 = `${boy} has too many ${noun} saved up. He decides to split them equally between each of his ${numberS} friends. `+\r\n    //             `How many ${noun} will each friend get?`\r\n\r\n\r\n\r\n    // var prob1 = `${boy} has ${numberL} ${noun}. He wants to split them equally into ${group}s. If ${boy} puts ${numberS} `+\r\n    //             `${noun} into each ${group}, how many ${group}s can ${boy} fill?`\r\n    // var prob2 = `${girl} wants to split their ${numberL} ${noun} into equal ${group}s. If she makes ${numberS} `+\r\n    //             `${group}s, how many ${noun}s fit in ${e} ${group}?`\r\n\r\n\r\n    // var prob1 = `${boy} has ${numberL} ${candy}. He would like to share these ${candy} equally with ${numberS} friends. How `+\r\n    //             `many ${candy} will each friend get?`\r\n    // var prob2 = `${girl} has ${numberL} ${candy}. She wants to give each friend ${numberS} ${candy}. How many friends will `+\r\n    //             `she be able to give ${candy} to?`\r\n\r\n    // var prob1 = `A ${food} company can fit ${numberS} packages of ${food} in ${e} box. How many boxes are needed to fill an `+\r\n    //             `order for ${numberL} packages of ${food}?`\r\n    // var prob2 = `A ${food} company needs to put ${numberL} packages of ${food} into boxes to fill an order. They can fit ${numberS} `+\r\n    //             `packages of ${food} in ${e} box. How many boxes will they need to fill the order?`\r\n\r\n    // var dogNameList = ['Zoey','Bowser','Spot','Snickerdoodle','Sir Fluffyboy', 'Chuggington', 'Bella', 'Max','Daisy','Bitsy','Archie','Barkley','Baxter','Chewy','Izzy','Murphy','Pippin','Waffles','Wiggleton','Ziggy']\r\n    // var prob1 = `${girl} walks her dog ${dogName} ${numberS} minutes each day they go for a walk. If they walk for a total of `+\r\n    //             `${numberL} minutes last month, how many days did she take ${dogName} for a walk?`\r\n    // var prob2 = `${boy} walks his dog ${dogName} for a total of ${numberL} minutes last month. Each time he takes ${dogName} `+\r\n    //             `on a walk for ${numberS} minutes. How many days did he take ${dogName} for a walk last month? `\r\n    // var prob3 = `${girl} took her dog ${dogName} on a walk ${numberS} times last month. They walked for a total of ${numberL} `+\r\n    //             `minutes. If each walk lasted the same amount of time, how long was each walk? `\r\n    \r\n    // var prob1 = `${dogName} the dog eats ${numberS} ounces of dog food each week. ${dogName}'s pet parent has stocked up with `+\r\n    //             `${numberL} ounces of dog food. How many weeks will the food last?`\r\n    // var prob2 = `${boy} bought a large bag of dog food so now he has ${numberL} ounces. He gives his dog ${dogName} ${numberS} `+\r\n    //             `ounces of food each week. How many weeks will the food last until he runs out?`\r\n\r\n\r\n    export const randDivWhole = (options) => {\r\n        var probArray = [divWhole]\r\n        if (options.specify === ('3by1' || '4by1')) {\r\n            probArray.push(div1dig, div1dig2)\r\n        } else  { //4 by 2\r\n            probArray.push(div2dig)\r\n        } //else {//3by2\r\n\r\n        // }\r\n        var randProb = shuffleArray(probArray)[0]\r\n        return randProb(options)\r\n    }","C:\\projects\\worksheet-creator\\src\\components\\concept-customization.js",["302","303","304","305","306","307","308"],"C:\\projects\\worksheet-creator\\src\\components\\custom-assignment.js",[],"C:\\projects\\worksheet-creator\\src\\components\\concept-selection.js",["309","310","311","312","313"],"C:\\projects\\worksheet-creator\\src\\components\\final-selections.js",["314","315","316","317"],"C:\\projects\\worksheet-creator\\src\\components\\home.js",["318","319","320","321","322","323","324","325","326","327","328","329"],"C:\\projects\\worksheet-creator\\src\\components\\concept-general.js",["330","331","332"],"import {Router, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nimport Input from './input'\r\nconst ConceptGeneral = (props) => {\r\n    return(\r\n            <div className= 'concept-general-container'>\r\n                <div className=\"quantity-addQ\">\r\n                    <Input \r\n                    label={<span className= 'radio-title'>Quantity:</span>}\r\n                    name=\"quantity\"\r\n                    type=\"number\"\r\n                    value={props.inputState.quantity}\r\n                    // onChange={props.handleInputQuantity}\r\n                    onChange={props.handleInput}\r\n                    placeholder=\"\"\r\n                    required\r\n                    className=\"quantity-input\"\r\n                    min=\"1\"\r\n                    max=\"50\"\r\n                    />\r\n                </div>\r\n                <div className= 'addQ-container'>\r\n                    <label htmlFor=\"submit\"></label>\r\n                    <Link to ='/concept-selection' className='addQ-button-link'>\r\n                        <button type=\"button\" className= \"addQ-button\" id=\"submit\" onClick={()=>props.handleAddConcept()}>\r\n                        Add & <br/>Select More\r\n                        </button>\r\n                    </Link>\r\n                    <Link to ='/final-selections' className='addQ-button-link'>\r\n                        <button type=\"button\" className= \"addQ-button\" id=\"submit\" onClick={()=>props.handleAddConcept()}>\r\n                        Add &<br/>Create Assignment\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default ConceptGeneral\r\n",{"ruleId":"333","severity":1,"message":"334","line":6,"column":25,"nodeType":"335","messageId":"336","endLine":6,"endColumn":30},{"ruleId":"333","severity":1,"message":"337","line":6,"column":32,"nodeType":"335","messageId":"336","endLine":6,"endColumn":38},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","replacedBy":"341"},{"ruleId":"333","severity":1,"message":"342","line":2,"column":3,"nodeType":"335","messageId":"336","endLine":2,"endColumn":12},{"ruleId":"333","severity":1,"message":"343","line":4,"column":10,"nodeType":"335","messageId":"336","endLine":4,"endColumn":16},{"ruleId":"333","severity":1,"message":"344","line":4,"column":25,"nodeType":"335","messageId":"336","endLine":4,"endColumn":29},{"ruleId":"333","severity":1,"message":"345","line":4,"column":39,"nodeType":"335","messageId":"336","endLine":4,"endColumn":52},{"ruleId":"333","severity":1,"message":"346","line":8,"column":8,"nodeType":"335","messageId":"336","endLine":8,"endColumn":17},{"ruleId":"333","severity":1,"message":"347","line":269,"column":1,"nodeType":"335","messageId":"336","endLine":269,"endColumn":10},{"ruleId":"348","severity":1,"message":"349","line":12,"column":14,"nodeType":"335","messageId":"350","endLine":12,"endColumn":21},{"ruleId":"348","severity":1,"message":"351","line":12,"column":23,"nodeType":"335","messageId":"350","endLine":12,"endColumn":30},{"ruleId":"348","severity":1,"message":"352","line":12,"column":32,"nodeType":"335","messageId":"350","endLine":12,"endColumn":39},{"ruleId":"348","severity":1,"message":"349","line":16,"column":14,"nodeType":"335","messageId":"350","endLine":16,"endColumn":21},{"ruleId":"348","severity":1,"message":"351","line":16,"column":23,"nodeType":"335","messageId":"350","endLine":16,"endColumn":30},{"ruleId":"348","severity":1,"message":"352","line":16,"column":32,"nodeType":"335","messageId":"350","endLine":16,"endColumn":39},{"ruleId":"333","severity":1,"message":"353","line":159,"column":19,"nodeType":"335","messageId":"336","endLine":159,"endColumn":26},{"ruleId":"348","severity":1,"message":"349","line":161,"column":10,"nodeType":"335","messageId":"350","endLine":161,"endColumn":17},{"ruleId":"348","severity":1,"message":"352","line":161,"column":19,"nodeType":"335","messageId":"350","endLine":161,"endColumn":26},{"ruleId":"333","severity":1,"message":"353","line":201,"column":19,"nodeType":"335","messageId":"336","endLine":201,"endColumn":26},{"ruleId":"333","severity":1,"message":"353","line":236,"column":19,"nodeType":"335","messageId":"336","endLine":236,"endColumn":26},{"ruleId":"333","severity":1,"message":"354","line":262,"column":9,"nodeType":"335","messageId":"336","endLine":262,"endColumn":13},{"ruleId":"333","severity":1,"message":"353","line":266,"column":19,"nodeType":"335","messageId":"336","endLine":266,"endColumn":26},{"ruleId":"333","severity":1,"message":"355","line":294,"column":9,"nodeType":"335","messageId":"336","endLine":294,"endColumn":16},{"ruleId":"333","severity":1,"message":"353","line":296,"column":19,"nodeType":"335","messageId":"336","endLine":296,"endColumn":26},{"ruleId":"333","severity":1,"message":"353","line":324,"column":19,"nodeType":"335","messageId":"336","endLine":324,"endColumn":26},{"ruleId":"333","severity":1,"message":"353","line":352,"column":19,"nodeType":"335","messageId":"336","endLine":352,"endColumn":26},{"ruleId":"333","severity":1,"message":"356","line":355,"column":9,"nodeType":"335","messageId":"336","endLine":355,"endColumn":13},{"ruleId":"333","severity":1,"message":"357","line":3,"column":3,"nodeType":"335","messageId":"336","endLine":3,"endColumn":7},{"ruleId":"333","severity":1,"message":"358","line":6,"column":3,"nodeType":"335","messageId":"336","endLine":6,"endColumn":8},{"ruleId":"333","severity":1,"message":"359","line":7,"column":3,"nodeType":"335","messageId":"336","endLine":7,"endColumn":11},{"ruleId":"333","severity":1,"message":"360","line":9,"column":3,"nodeType":"335","messageId":"336","endLine":9,"endColumn":7},{"ruleId":"333","severity":1,"message":"361","line":12,"column":3,"nodeType":"335","messageId":"336","endLine":12,"endColumn":18},{"ruleId":"362","severity":1,"message":"363","line":68,"column":3,"nodeType":"364","messageId":"365","endLine":68,"endColumn":9},{"ruleId":"333","severity":1,"message":"366","line":115,"column":9,"nodeType":"335","messageId":"336","endLine":115,"endColumn":16},{"ruleId":"348","severity":1,"message":"367","line":137,"column":12,"nodeType":"335","messageId":"350","endLine":137,"endColumn":13},{"ruleId":"348","severity":1,"message":"368","line":137,"column":15,"nodeType":"335","messageId":"350","endLine":137,"endColumn":19},{"ruleId":"348","severity":1,"message":"367","line":139,"column":12,"nodeType":"335","messageId":"350","endLine":139,"endColumn":13},{"ruleId":"348","severity":1,"message":"368","line":139,"column":15,"nodeType":"335","messageId":"350","endLine":139,"endColumn":19},{"ruleId":"369","severity":1,"message":"370","line":148,"column":9,"nodeType":"335","messageId":"371","endLine":148,"endColumn":22},{"ruleId":"369","severity":1,"message":"370","line":150,"column":7,"nodeType":"335","messageId":"371","endLine":150,"endColumn":20},{"ruleId":"369","severity":1,"message":"370","line":152,"column":7,"nodeType":"335","messageId":"371","endLine":152,"endColumn":20},{"ruleId":"369","severity":1,"message":"370","line":154,"column":7,"nodeType":"335","messageId":"371","endLine":154,"endColumn":20},{"ruleId":"348","severity":1,"message":"372","line":157,"column":11,"nodeType":"335","messageId":"350","endLine":157,"endColumn":12},{"ruleId":"348","severity":1,"message":"373","line":158,"column":11,"nodeType":"335","messageId":"350","endLine":158,"endColumn":12},{"ruleId":"348","severity":1,"message":"374","line":159,"column":11,"nodeType":"335","messageId":"350","endLine":159,"endColumn":12},{"ruleId":"348","severity":1,"message":"375","line":160,"column":11,"nodeType":"335","messageId":"350","endLine":160,"endColumn":12},{"ruleId":"348","severity":1,"message":"376","line":161,"column":11,"nodeType":"335","messageId":"350","endLine":161,"endColumn":12},{"ruleId":"333","severity":1,"message":"377","line":161,"column":11,"nodeType":"335","messageId":"336","endLine":161,"endColumn":12},{"ruleId":"369","severity":1,"message":"370","line":163,"column":9,"nodeType":"335","messageId":"371","endLine":163,"endColumn":22},{"ruleId":"369","severity":1,"message":"370","line":165,"column":7,"nodeType":"335","messageId":"371","endLine":165,"endColumn":20},{"ruleId":"369","severity":1,"message":"370","line":167,"column":7,"nodeType":"335","messageId":"371","endLine":167,"endColumn":20},{"ruleId":"369","severity":1,"message":"370","line":169,"column":7,"nodeType":"335","messageId":"371","endLine":169,"endColumn":20},{"ruleId":"348","severity":1,"message":"372","line":177,"column":11,"nodeType":"335","messageId":"350","endLine":177,"endColumn":12},{"ruleId":"348","severity":1,"message":"373","line":178,"column":11,"nodeType":"335","messageId":"350","endLine":178,"endColumn":12},{"ruleId":"348","severity":1,"message":"374","line":179,"column":11,"nodeType":"335","messageId":"350","endLine":179,"endColumn":12},{"ruleId":"348","severity":1,"message":"375","line":180,"column":11,"nodeType":"335","messageId":"350","endLine":180,"endColumn":12},{"ruleId":"333","severity":1,"message":"378","line":161,"column":9,"nodeType":"335","messageId":"336","endLine":161,"endColumn":17},{"ruleId":"333","severity":1,"message":"378","line":216,"column":9,"nodeType":"335","messageId":"336","endLine":216,"endColumn":17},{"ruleId":"348","severity":1,"message":"379","line":264,"column":9,"nodeType":"335","messageId":"350","endLine":264,"endColumn":17},{"ruleId":"333","severity":1,"message":"380","line":9,"column":9,"nodeType":"335","messageId":"336","endLine":9,"endColumn":18},{"ruleId":"333","severity":1,"message":"358","line":14,"column":3,"nodeType":"335","messageId":"336","endLine":14,"endColumn":8},{"ruleId":"333","severity":1,"message":"361","line":21,"column":3,"nodeType":"335","messageId":"336","endLine":21,"endColumn":18},{"ruleId":"333","severity":1,"message":"381","line":76,"column":8,"nodeType":"335","messageId":"336","endLine":76,"endColumn":9},{"ruleId":"333","severity":1,"message":"382","line":76,"column":12,"nodeType":"335","messageId":"336","endLine":76,"endColumn":13},{"ruleId":"383","severity":1,"message":"384","line":76,"column":17,"nodeType":"385","messageId":"386","endLine":76,"endColumn":22},{"ruleId":"333","severity":1,"message":"387","line":138,"column":7,"nodeType":"335","messageId":"336","endLine":138,"endColumn":31},{"ruleId":"388","severity":1,"message":"389","line":269,"column":3,"nodeType":"390","messageId":"391","endLine":271,"endColumn":4},{"ruleId":"333","severity":1,"message":"357","line":3,"column":5,"nodeType":"335","messageId":"336","endLine":3,"endColumn":9},{"ruleId":"333","severity":1,"message":"358","line":6,"column":5,"nodeType":"335","messageId":"336","endLine":6,"endColumn":10},{"ruleId":"333","severity":1,"message":"359","line":7,"column":5,"nodeType":"335","messageId":"336","endLine":7,"endColumn":13},{"ruleId":"333","severity":1,"message":"360","line":9,"column":5,"nodeType":"335","messageId":"336","endLine":9,"endColumn":9},{"ruleId":"333","severity":1,"message":"361","line":13,"column":5,"nodeType":"335","messageId":"336","endLine":13,"endColumn":20},{"ruleId":"369","severity":1,"message":"392","line":95,"column":9,"nodeType":"335","messageId":"371","endLine":95,"endColumn":21},{"ruleId":"369","severity":1,"message":"392","line":99,"column":27,"nodeType":"335","messageId":"371","endLine":99,"endColumn":39},{"ruleId":"348","severity":1,"message":"393","line":425,"column":13,"nodeType":"335","messageId":"350","endLine":425,"endColumn":14},{"ruleId":"333","severity":1,"message":"358","line":5,"column":5,"nodeType":"335","messageId":"336","endLine":5,"endColumn":10},{"ruleId":"333","severity":1,"message":"394","line":14,"column":7,"nodeType":"335","messageId":"336","endLine":14,"endColumn":13},{"ruleId":"395","severity":1,"message":"396","line":189,"column":13,"nodeType":"397","messageId":"398","endLine":189,"endColumn":17},{"ruleId":"395","severity":1,"message":"396","line":190,"column":22,"nodeType":"397","messageId":"398","endLine":190,"endColumn":26},{"ruleId":"395","severity":1,"message":"396","line":192,"column":37,"nodeType":"397","messageId":"398","endLine":192,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":194,"column":33,"nodeType":"397","messageId":"398","endLine":194,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":196,"column":37,"nodeType":"397","messageId":"398","endLine":196,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":197,"column":37,"nodeType":"397","messageId":"398","endLine":197,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":198,"column":33,"nodeType":"397","messageId":"398","endLine":198,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":200,"column":33,"nodeType":"397","messageId":"398","endLine":200,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":201,"column":33,"nodeType":"397","messageId":"398","endLine":201,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":241,"column":29,"nodeType":"397","messageId":"398","endLine":241,"endColumn":33},{"ruleId":"395","severity":1,"message":"396","line":242,"column":29,"nodeType":"397","messageId":"398","endLine":242,"endColumn":33},{"ruleId":"395","severity":1,"message":"396","line":243,"column":29,"nodeType":"397","messageId":"398","endLine":243,"endColumn":33},{"ruleId":"395","severity":1,"message":"396","line":248,"column":33,"nodeType":"397","messageId":"398","endLine":248,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":249,"column":33,"nodeType":"397","messageId":"398","endLine":249,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":250,"column":33,"nodeType":"397","messageId":"398","endLine":250,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":251,"column":33,"nodeType":"397","messageId":"398","endLine":251,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":256,"column":23,"nodeType":"397","messageId":"398","endLine":256,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":257,"column":23,"nodeType":"397","messageId":"398","endLine":257,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":258,"column":23,"nodeType":"397","messageId":"398","endLine":258,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":259,"column":23,"nodeType":"397","messageId":"398","endLine":259,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":265,"column":23,"nodeType":"397","messageId":"398","endLine":265,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":266,"column":23,"nodeType":"397","messageId":"398","endLine":266,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":267,"column":23,"nodeType":"397","messageId":"398","endLine":267,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":268,"column":23,"nodeType":"397","messageId":"398","endLine":268,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":274,"column":23,"nodeType":"397","messageId":"398","endLine":274,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":275,"column":23,"nodeType":"397","messageId":"398","endLine":275,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":276,"column":23,"nodeType":"397","messageId":"398","endLine":276,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":277,"column":23,"nodeType":"397","messageId":"398","endLine":277,"endColumn":27},{"ruleId":"348","severity":1,"message":"399","line":283,"column":7,"nodeType":"335","messageId":"350","endLine":283,"endColumn":11},{"ruleId":"395","severity":1,"message":"396","line":319,"column":21,"nodeType":"397","messageId":"398","endLine":319,"endColumn":25},{"ruleId":"395","severity":1,"message":"396","line":320,"column":21,"nodeType":"397","messageId":"398","endLine":320,"endColumn":25},{"ruleId":"395","severity":1,"message":"396","line":321,"column":21,"nodeType":"397","messageId":"398","endLine":321,"endColumn":25},{"ruleId":"395","severity":1,"message":"396","line":322,"column":21,"nodeType":"397","messageId":"398","endLine":322,"endColumn":25},{"ruleId":"395","severity":1,"message":"396","line":328,"column":18,"nodeType":"397","messageId":"398","endLine":328,"endColumn":22},{"ruleId":"395","severity":1,"message":"396","line":328,"column":53,"nodeType":"397","messageId":"398","endLine":328,"endColumn":57},{"ruleId":"395","severity":1,"message":"396","line":328,"column":88,"nodeType":"397","messageId":"398","endLine":328,"endColumn":92},{"ruleId":"395","severity":1,"message":"396","line":328,"column":123,"nodeType":"397","messageId":"398","endLine":328,"endColumn":127},{"ruleId":"395","severity":1,"message":"396","line":333,"column":37,"nodeType":"397","messageId":"398","endLine":333,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":335,"column":33,"nodeType":"397","messageId":"398","endLine":335,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":338,"column":37,"nodeType":"397","messageId":"398","endLine":338,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":339,"column":33,"nodeType":"397","messageId":"398","endLine":339,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":340,"column":33,"nodeType":"397","messageId":"398","endLine":340,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":341,"column":33,"nodeType":"397","messageId":"398","endLine":341,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":342,"column":33,"nodeType":"397","messageId":"398","endLine":342,"endColumn":37},{"ruleId":"395","severity":1,"message":"396","line":374,"column":23,"nodeType":"397","messageId":"398","endLine":374,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":375,"column":23,"nodeType":"397","messageId":"398","endLine":375,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":376,"column":23,"nodeType":"397","messageId":"398","endLine":376,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":377,"column":23,"nodeType":"397","messageId":"398","endLine":377,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":382,"column":23,"nodeType":"397","messageId":"398","endLine":382,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":383,"column":23,"nodeType":"397","messageId":"398","endLine":383,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":383,"column":37,"nodeType":"397","messageId":"398","endLine":383,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":384,"column":23,"nodeType":"397","messageId":"398","endLine":384,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":384,"column":37,"nodeType":"397","messageId":"398","endLine":384,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":385,"column":23,"nodeType":"397","messageId":"398","endLine":385,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":385,"column":37,"nodeType":"397","messageId":"398","endLine":385,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":391,"column":8,"nodeType":"397","messageId":"398","endLine":391,"endColumn":12},{"ruleId":"395","severity":1,"message":"396","line":391,"column":40,"nodeType":"397","messageId":"398","endLine":391,"endColumn":44},{"ruleId":"395","severity":1,"message":"396","line":392,"column":8,"nodeType":"397","messageId":"398","endLine":392,"endColumn":12},{"ruleId":"395","severity":1,"message":"396","line":392,"column":40,"nodeType":"397","messageId":"398","endLine":392,"endColumn":44},{"ruleId":"395","severity":1,"message":"396","line":392,"column":54,"nodeType":"397","messageId":"398","endLine":392,"endColumn":58},{"ruleId":"395","severity":1,"message":"396","line":393,"column":8,"nodeType":"397","messageId":"398","endLine":393,"endColumn":12},{"ruleId":"395","severity":1,"message":"396","line":393,"column":40,"nodeType":"397","messageId":"398","endLine":393,"endColumn":44},{"ruleId":"395","severity":1,"message":"396","line":393,"column":54,"nodeType":"397","messageId":"398","endLine":393,"endColumn":58},{"ruleId":"395","severity":1,"message":"396","line":394,"column":8,"nodeType":"397","messageId":"398","endLine":394,"endColumn":12},{"ruleId":"395","severity":1,"message":"396","line":394,"column":40,"nodeType":"397","messageId":"398","endLine":394,"endColumn":44},{"ruleId":"395","severity":1,"message":"396","line":394,"column":54,"nodeType":"397","messageId":"398","endLine":394,"endColumn":58},{"ruleId":"395","severity":1,"message":"396","line":407,"column":23,"nodeType":"397","messageId":"398","endLine":407,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":408,"column":23,"nodeType":"397","messageId":"398","endLine":408,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":409,"column":23,"nodeType":"397","messageId":"398","endLine":409,"endColumn":27},{"ruleId":"395","severity":1,"message":"396","line":410,"column":23,"nodeType":"397","messageId":"398","endLine":410,"endColumn":27},{"ruleId":"348","severity":1,"message":"399","line":414,"column":7,"nodeType":"335","messageId":"350","endLine":414,"endColumn":11},{"ruleId":"333","severity":1,"message":"400","line":1,"column":9,"nodeType":"335","messageId":"336","endLine":1,"endColumn":17},{"ruleId":"333","severity":1,"message":"401","line":2,"column":20,"nodeType":"335","messageId":"336","endLine":2,"endColumn":23},{"ruleId":"333","severity":1,"message":"402","line":4,"column":16,"nodeType":"335","messageId":"336","endLine":4,"endColumn":30},{"ruleId":"333","severity":1,"message":"403","line":56,"column":7,"nodeType":"335","messageId":"336","endLine":56,"endColumn":24},{"ruleId":"348","severity":1,"message":"404","line":158,"column":9,"nodeType":"335","messageId":"350","endLine":158,"endColumn":15},{"ruleId":"333","severity":1,"message":"405","line":164,"column":9,"nodeType":"335","messageId":"336","endLine":164,"endColumn":21},{"ruleId":"333","severity":1,"message":"406","line":166,"column":9,"nodeType":"335","messageId":"336","endLine":166,"endColumn":11},{"ruleId":"333","severity":1,"message":"407","line":171,"column":9,"nodeType":"335","messageId":"336","endLine":171,"endColumn":17},{"ruleId":"333","severity":1,"message":"405","line":202,"column":9,"nodeType":"335","messageId":"336","endLine":202,"endColumn":21},{"ruleId":"333","severity":1,"message":"406","line":204,"column":9,"nodeType":"335","messageId":"336","endLine":204,"endColumn":11},{"ruleId":"348","severity":1,"message":"408","line":207,"column":9,"nodeType":"335","messageId":"350","endLine":207,"endColumn":14},{"ruleId":"333","severity":1,"message":"407","line":209,"column":9,"nodeType":"335","messageId":"336","endLine":209,"endColumn":17},{"ruleId":"333","severity":1,"message":"406","line":253,"column":9,"nodeType":"335","messageId":"336","endLine":253,"endColumn":11},{"ruleId":"333","severity":1,"message":"406","line":284,"column":9,"nodeType":"335","messageId":"336","endLine":284,"endColumn":11},{"ruleId":"333","severity":1,"message":"409","line":83,"column":23,"nodeType":"335","messageId":"336","endLine":83,"endColumn":27},{"ruleId":"333","severity":1,"message":"410","line":86,"column":37,"nodeType":"335","messageId":"336","endLine":86,"endColumn":45},{"ruleId":"348","severity":1,"message":"408","line":95,"column":13,"nodeType":"335","messageId":"350","endLine":95,"endColumn":18},{"ruleId":"348","severity":1,"message":"411","line":97,"column":13,"nodeType":"335","messageId":"350","endLine":97,"endColumn":18},{"ruleId":"333","severity":1,"message":"353","line":117,"column":19,"nodeType":"335","messageId":"336","endLine":117,"endColumn":26},{"ruleId":"333","severity":1,"message":"353","line":139,"column":19,"nodeType":"335","messageId":"336","endLine":139,"endColumn":26},{"ruleId":"412","severity":1,"message":"413","line":21,"column":95,"nodeType":"414","endLine":21,"endColumn":133},{"ruleId":"333","severity":1,"message":"415","line":1,"column":10,"nodeType":"335","messageId":"336","endLine":1,"endColumn":22},{"ruleId":"333","severity":1,"message":"416","line":1,"column":24,"nodeType":"335","messageId":"336","endLine":1,"endColumn":33},{"ruleId":"417","severity":1,"message":"418","line":141,"column":13,"nodeType":"419","endLine":141,"endColumn":33},{"ruleId":"417","severity":1,"message":"418","line":216,"column":13,"nodeType":"419","endLine":216,"endColumn":46},{"ruleId":"333","severity":1,"message":"415","line":1,"column":9,"nodeType":"335","messageId":"336","endLine":1,"endColumn":21},{"ruleId":"333","severity":1,"message":"416","line":1,"column":23,"nodeType":"335","messageId":"336","endLine":1,"endColumn":32},{"ruleId":"333","severity":1,"message":"420","line":1,"column":41,"nodeType":"335","messageId":"336","endLine":1,"endColumn":49},{"ruleId":"333","severity":1,"message":"421","line":1,"column":10,"nodeType":"335","messageId":"336","endLine":1,"endColumn":12},{"ruleId":"333","severity":1,"message":"401","line":3,"column":66,"nodeType":"335","messageId":"336","endLine":3,"endColumn":69},{"ruleId":"333","severity":1,"message":"422","line":4,"column":5,"nodeType":"335","messageId":"336","endLine":4,"endColumn":6},{"ruleId":"348","severity":1,"message":"423","line":20,"column":13,"nodeType":"335","messageId":"350","endLine":20,"endColumn":21},{"ruleId":"348","severity":1,"message":"424","line":26,"column":13,"nodeType":"335","messageId":"350","endLine":26,"endColumn":16},{"ruleId":"348","severity":1,"message":"404","line":27,"column":13,"nodeType":"335","messageId":"350","endLine":27,"endColumn":19},{"ruleId":"348","severity":1,"message":"349","line":28,"column":13,"nodeType":"335","messageId":"350","endLine":28,"endColumn":20},{"ruleId":"348","severity":1,"message":"352","line":29,"column":13,"nodeType":"335","messageId":"350","endLine":29,"endColumn":20},{"ruleId":"333","severity":1,"message":"425","line":33,"column":7,"nodeType":"335","messageId":"336","endLine":33,"endColumn":18},{"ruleId":"348","severity":1,"message":"404","line":96,"column":13,"nodeType":"335","messageId":"350","endLine":96,"endColumn":19},{"ruleId":"348","severity":1,"message":"349","line":96,"column":21,"nodeType":"335","messageId":"350","endLine":96,"endColumn":28},{"ruleId":"348","severity":1,"message":"352","line":97,"column":12,"nodeType":"335","messageId":"350","endLine":97,"endColumn":19},{"ruleId":"348","severity":1,"message":"404","line":99,"column":14,"nodeType":"335","messageId":"350","endLine":99,"endColumn":20},{"ruleId":"348","severity":1,"message":"349","line":99,"column":22,"nodeType":"335","messageId":"350","endLine":99,"endColumn":29},{"ruleId":"348","severity":1,"message":"352","line":100,"column":13,"nodeType":"335","messageId":"350","endLine":100,"endColumn":20},{"ruleId":"348","severity":1,"message":"404","line":102,"column":14,"nodeType":"335","messageId":"350","endLine":102,"endColumn":20},{"ruleId":"348","severity":1,"message":"349","line":102,"column":22,"nodeType":"335","messageId":"350","endLine":102,"endColumn":29},{"ruleId":"348","severity":1,"message":"352","line":103,"column":13,"nodeType":"335","messageId":"350","endLine":103,"endColumn":20},{"ruleId":"348","severity":1,"message":"426","line":104,"column":13,"nodeType":"335","messageId":"350","endLine":104,"endColumn":17},{"ruleId":"348","severity":1,"message":"404","line":106,"column":10,"nodeType":"335","messageId":"350","endLine":106,"endColumn":16},{"ruleId":"348","severity":1,"message":"349","line":106,"column":18,"nodeType":"335","messageId":"350","endLine":106,"endColumn":25},{"ruleId":"348","severity":1,"message":"352","line":106,"column":27,"nodeType":"335","messageId":"350","endLine":106,"endColumn":34},{"ruleId":"348","severity":1,"message":"404","line":129,"column":14,"nodeType":"335","messageId":"350","endLine":129,"endColumn":20},{"ruleId":"348","severity":1,"message":"349","line":129,"column":22,"nodeType":"335","messageId":"350","endLine":129,"endColumn":29},{"ruleId":"348","severity":1,"message":"352","line":130,"column":13,"nodeType":"335","messageId":"350","endLine":130,"endColumn":20},{"ruleId":"333","severity":1,"message":"415","line":1,"column":10,"nodeType":"335","messageId":"336","endLine":1,"endColumn":22},{"ruleId":"333","severity":1,"message":"416","line":1,"column":24,"nodeType":"335","messageId":"336","endLine":1,"endColumn":33},{"ruleId":"333","severity":1,"message":"343","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":16},{"ruleId":"333","severity":1,"message":"334","line":2,"column":18,"nodeType":"335","messageId":"336","endLine":2,"endColumn":23},{"ruleId":"333","severity":1,"message":"337","line":2,"column":31,"nodeType":"335","messageId":"336","endLine":2,"endColumn":37},{"ruleId":"333","severity":1,"message":"427","line":3,"column":8,"nodeType":"335","messageId":"336","endLine":3,"endColumn":13},{"ruleId":"412","severity":1,"message":"413","line":87,"column":17,"nodeType":"414","endLine":87,"endColumn":61},{"ruleId":"333","severity":1,"message":"415","line":1,"column":10,"nodeType":"335","messageId":"336","endLine":1,"endColumn":22},{"ruleId":"333","severity":1,"message":"416","line":1,"column":24,"nodeType":"335","messageId":"336","endLine":1,"endColumn":33},{"ruleId":"333","severity":1,"message":"343","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":16},{"ruleId":"333","severity":1,"message":"334","line":2,"column":18,"nodeType":"335","messageId":"336","endLine":2,"endColumn":23},{"ruleId":"333","severity":1,"message":"337","line":2,"column":31,"nodeType":"335","messageId":"336","endLine":2,"endColumn":37},{"ruleId":"333","severity":1,"message":"343","line":1,"column":9,"nodeType":"335","messageId":"336","endLine":1,"endColumn":15},{"ruleId":"333","severity":1,"message":"334","line":1,"column":17,"nodeType":"335","messageId":"336","endLine":1,"endColumn":22},{"ruleId":"333","severity":1,"message":"337","line":1,"column":30,"nodeType":"335","messageId":"336","endLine":1,"endColumn":36},{"ruleId":"417","severity":1,"message":"418","line":16,"column":11,"nodeType":"419","endLine":16,"endColumn":44},{"ruleId":"333","severity":1,"message":"343","line":1,"column":9,"nodeType":"335","messageId":"336","endLine":1,"endColumn":15},{"ruleId":"333","severity":1,"message":"334","line":1,"column":17,"nodeType":"335","messageId":"336","endLine":1,"endColumn":22},{"ruleId":"333","severity":1,"message":"337","line":1,"column":30,"nodeType":"335","messageId":"336","endLine":1,"endColumn":36},{"ruleId":"333","severity":1,"message":"428","line":2,"column":8,"nodeType":"335","messageId":"336","endLine":2,"endColumn":22},{"ruleId":"333","severity":1,"message":"429","line":3,"column":8,"nodeType":"335","messageId":"336","endLine":3,"endColumn":18},{"ruleId":"333","severity":1,"message":"430","line":5,"column":8,"nodeType":"335","messageId":"336","endLine":5,"endColumn":12},{"ruleId":"333","severity":1,"message":"431","line":6,"column":8,"nodeType":"335","messageId":"336","endLine":6,"endColumn":19},{"ruleId":"333","severity":1,"message":"432","line":7,"column":8,"nodeType":"335","messageId":"336","endLine":7,"endColumn":14},{"ruleId":"412","severity":1,"message":"413","line":36,"column":10,"nodeType":"414","endLine":36,"endColumn":58},{"ruleId":"412","severity":1,"message":"413","line":42,"column":9,"nodeType":"414","endLine":42,"endColumn":58},{"ruleId":"412","severity":1,"message":"413","line":50,"column":9,"nodeType":"414","endLine":50,"endColumn":55},{"ruleId":"412","severity":1,"message":"413","line":57,"column":11,"nodeType":"414","endLine":57,"endColumn":56},{"ruleId":"333","severity":1,"message":"343","line":1,"column":9,"nodeType":"335","messageId":"336","endLine":1,"endColumn":15},{"ruleId":"333","severity":1,"message":"334","line":1,"column":17,"nodeType":"335","messageId":"336","endLine":1,"endColumn":22},{"ruleId":"333","severity":1,"message":"337","line":1,"column":30,"nodeType":"335","messageId":"336","endLine":1,"endColumn":36},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","no-native-reassign",["433"],"no-negated-in-lhs",["434"],"'useEffect' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","'BrowserRouter' is defined but never used.","'UserInput' is defined but never used.","'tableSnap' is assigned a value but never used.","no-redeclare","'numberS' is already defined.","redeclared","'numberM' is already defined.","'numberL' is already defined.","'numberM' is assigned a value but never used.","'name' is assigned a value but never used.","'numList' is assigned a value but never used.","'year' is assigned a value but never used.","'Page' is defined but never used.","'Image' is defined but never used.","'Document' is defined but never used.","'Font' is defined but never used.","'PDFDownloadLink' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'tstyles' is assigned a value but never used.","'$' is already defined.","'unit' is already defined.","no-use-before-define","'correctAnswer' was used before it was defined.","usedBeforeDefined","'A' is already defined.","'B' is already defined.","'C' is already defined.","'D' is already defined.","'E' is already defined.","'E' is assigned a value but never used.","'dividend' is assigned a value but never used.","'numberM2' is already defined.","'randWhole' is defined but never used.","'n' is assigned a value but never used.","'x' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'createQAListTableAnswers' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'randDecimal2' was used before it was defined.","'w' is already defined.","'styles' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'text' is already defined.","'Fraction' is defined but never used.","'cap' is defined but never used.","'sanitize_block' is defined but never used.","'verticalFractions' is assigned a value but never used.","'answer' is already defined.","'mixedNumber1' is assigned a value but never used.","'AC' is assigned a value but never used.","'randProb' is assigned a value but never used.","'prob1' is already defined.","'mass' is assigned a value but never used.","'numberL2' is assigned a value but never used.","'prob2' is already defined.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'defaultProps' is defined but never used.","'PropTypes' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Fragment' is defined but never used.","'to' is defined but never used.","'e' is assigned a value but never used.","'numArray' is already defined.","'num' is already defined.","'divideWhole' is assigned a value but never used.","'item' is already defined.","'Input' is defined but never used.","'InfinitySymbol' is defined but never used.","'Calculator' is defined but never used.","'Math' is defined but never used.","'MathSymbols' is defined but never used.","'School' is defined but never used.","no-global-assign","no-unsafe-negation"]